initSidebarItems({"enum":[["ExitStatus","Coroutine exit status (value returned or panic)"]],"fn":[["get_userdata","Gets a reference to the user data set through `set_userdata`. Returns `None` if `T` does not match or if no data was set"],["in_coroutine","Returns true when executing inside a mioco coroutine, false otherwise."],["select_wait","Wait till an event is ready"],["set_children_userdata","Sets new user data that will inherit to newly spawned coroutines. Use `None` to clear."],["set_userdata","Sets new user data for the current coroutine"],["shutdown","Shutdown current mioco instance"],["sleep","Block coroutine for a given time"],["spawn","Spawn a mioco coroutine."],["spawn_ext","Spawn a `mioco` coroutine"],["start","Start mioco instance."],["start_threads","Start mioco instance using a given number of threads."],["sync","Execute a block of synchronous operations"],["thread_num","Get number of threads of the Mioco instance that coroutine is running in."],["yield_now","Yield coroutine execution"]],"macro":[["select!","**Warning**: Mioco can't guarantee that the returned `EventSource` will not block when actually attempting to `read` or `write`. You must use `try_read` and `try_write` instead."]],"mod":[["mio","Re-export of some `mio` symbols, that are part of the mioco API."],["sync","Useful synchronization primitives"],["tcp","TCP IO"],["timer","Timers"],["udp","UDP IO"],["unix","Unix sockets IO"]],"struct":[["Config","Mioco instance builder."],["CoroutineControl","Coroutine control block"],["CoroutineHandle","Handle to spawned coroutine"],["Event","Event delivered to the coroutine"],["EventSourceId","Id of an event source used to enumerate them"],["Handler","Mioco event loop `Handler`"],["MioAdapter","Adapt raw `mio` type to mioco `Evented` requirements."],["Mioco","Mioco instance"],["RW","Read/Write/Both/None"]],"trait":[["Evented","Mioco event source."],["Scheduler","Coroutine Scheduler"],["SchedulerThread","Per-thread Scheduler"]]});