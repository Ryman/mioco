initSidebarItems({"fn":[["get_userdata","Get user-provided data of the current coroutine."],["in_coroutine","Check if running inside a mioco coroutine."],["select_wait","Block the current coroutine waiting for an event."],["set_children_userdata","Set user-provided data for future child coroutines."],["set_userdata","Set user-provided data for the current coroutine."],["shutdown","Shutdown current mioco instance."],["sleep","Block execution for a given time."],["sleep_ms","Block execution for a given time."],["spawn","Spawn a mioco coroutine."],["start","Start a new mioco instance."],["start_threads","Start a new mioco instance with a given number of threads."],["thread_num","Get number of threads of current mioco instance."],["yield_now","Yield execution of the current coroutine."]],"macro":[["select!","Select operation on multiple IO."]],"mod":[["mio","Some mio types that are part of mioco-API, re-exported"],["sched","Custom scheduling"],["sync","Useful synchronization primitives"],["tcp","TCP"],["timer","Timers"],["udp","UDP"],["unix","Unix sockets IO"]],"struct":[["Config","Mioco instance builder."],["Event","Event delivered to the coroutine"],["EventSourceId","Id of an event source used to enumerate them."],["Handler","Mioco event loop `Handler`"],["JoinHandle","Allows to join on mioco Coroutine"],["MioAdapter","Adapt raw `mio` type to mioco `Evented` requirements."],["Mioco","Mioco instance."],["RW","Read/Write/Both/None"]],"trait":[["Evented","Mioco event source."]]});