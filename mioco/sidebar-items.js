initSidebarItems({"fn":[["get_userdata","Get a reference to the user data set through `set_userdata`. Returns `None` if `T` does not match a userdata type or if no data was set."],["in_coroutine","Returns true when executing inside a mioco coroutine, false otherwise."],["select_wait","Wait till an event is ready."],["set_children_userdata","Set new user data that will inherit to newly spawned coroutines. Use `None` to clear."],["set_userdata","Set new user data for the current coroutine."],["shutdown","Shutdown current mioco instance."],["sleep","Sleep for a given time."],["sleep_ms","Sleep for a given time."],["spawn","Spawn a mioco coroutine."],["start","Start a new mioco instance."],["start_threads","Start a new mioco instance with a given number of threads."],["sync","Execute a block of synchronous operations"],["thread_num","Get number of threads of the Mioco instance that coroutine is running in."],["yield_now","Yield coroutine execution"]],"macro":[["select!","Select operation on multiple IO."]],"mod":[["mio","Re-export of some `mio` symbols, that are part of the mioco API."],["sync","Useful synchronization primitives"],["tcp","TCP IO"],["timer","Timers"],["udp","UDP IO"],["unix","Unix sockets IO"]],"struct":[["Config","Mioco instance builder."],["CoroutineControl","Coroutine control block."],["Event","Event delivered to the coroutine"],["EventSourceId","Id of an event source used to enumerate them."],["Handler","Mioco event loop `Handler`"],["JoinHandle","Allows to join on mioco Coroutine"],["MioAdapter","Adapt raw `mio` type to mioco `Evented` requirements."],["Mioco","Mioco instance."],["RW","Read/Write/Both/None"]],"trait":[["Evented","Mioco event source."],["Scheduler","Coroutine Scheduler"],["SchedulerThread","Per-thread Scheduler"]]});