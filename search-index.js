var searchIndex = {};
searchIndex["mioco"] = {"doc":"# Mioco","items":[[3,"Config","mioco","Mioco instance builder.",null,null],[3,"Event","","Event delivered to the coroutine",null,null],[3,"EventSourceId","","Id of an event source used to enumerate them.",null,null],[3,"Handler","","Mioco event loop `Handler`",null,null],[3,"JoinHandle","","Allows to join on mioco Coroutine",null,null],[3,"MioAdapter","","Adapt raw `mio` type to mioco `Evented` requirements.",null,null],[3,"Mioco","","Mioco instance.",null,null],[3,"RW","","Read/Write/Both/None",null,null],[5,"get_userdata","","Get user-provided data of the current coroutine.",null,{"inputs":[],"output":{"name":"option"}}],[5,"set_userdata","","Set user-provided data for the current coroutine.",null,{"inputs":[{"name":"t"}],"output":null}],[5,"set_children_userdata","","Set user-provided data for future child coroutines.",null,{"inputs":[{"name":"option"}],"output":null}],[5,"in_coroutine","","Check if running inside a mioco coroutine.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"select_wait","","Block the current coroutine waiting for an event.",null,{"inputs":[],"output":{"name":"event"}}],[5,"sleep","","Block execution for a given time.",null,{"inputs":[{"name":"duration"}],"output":null}],[5,"sleep_ms","","Block execution for a given time.",null,{"inputs":[{"name":"u32"}],"output":null}],[5,"spawn","","Spawn a mioco coroutine.",null,{"inputs":[{"name":"f"}],"output":{"name":"joinhandle"}}],[5,"start","","Start a new mioco instance.",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"shutdown","","Shutdown current mioco instance.",null,{"inputs":[],"output":null}],[5,"start_threads","","Start a new mioco instance with a given number of threads.",null,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[5,"thread_num","","Get number of threads of current mioco instance.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"yield_now","","Yield execution of the current coroutine.",null,{"inputs":[],"output":null}],[11,"from_str","mio::net","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","mioco","Create `MioAdapter` from raw mio type.",1,{"inputs":[{"name":"mt"}],"output":{"name":"self"}}],[11,"try_read","","Try reading data into a buffer.",1,null],[11,"read","","Block on read.",1,null],[11,"try_write","","Try writing a data from the buffer.",1,null],[11,"write","","Block on write.",1,null],[11,"flush","","",1,{"inputs":[{"name":"mioadapter"}],"output":{"name":"result"}}],[11,"try_accept","","Attempt to accept a pending connection.",1,{"inputs":[{"name":"mioadapter"}],"output":{"name":"result"}}],[11,"accept","","Block on accepting a connection.",1,{"inputs":[{"name":"mioadapter"}],"output":{"name":"result"}}],[11,"from_raw_fd","","",1,{"inputs":[{"name":"rawfd"}],"output":{"name":"self"}}],[11,"as_raw_fd","","",1,{"inputs":[{"name":"mioadapter"}],"output":{"name":"rawfd"}}],[11,"new","context::stack","Creates a (non-owning) representation of some stack memory.",2,null],[11,"top","","Returns the top of the stack from which on it grows downwards towards bottom().",2,null],[11,"bottom","","Returns the bottom of the stack and thus it&#39;s end.",2,null],[11,"len","","Returns the size of the stack between top() and bottom().",2,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"min_size","","Returns the minimal stack size allowed by the current platform.",2,{"inputs":[],"output":{"name":"usize"}}],[11,"max_size","","Returns the maximum stack size allowed by the current platform.",2,{"inputs":[],"output":{"name":"usize"}}],[11,"default_size","","Returns a implementation defined default stack size.",2,{"inputs":[],"output":{"name":"usize"}}],[11,"fmt","","",2,{"inputs":[{"name":"stack"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","mioco","Create a Handler.",3,{"inputs":[{"name":"rchandlershared"},{"name":"box"}],"output":{"name":"self"}}],[11,"shared","","Data shared between Handler and Coroutines belonging to it",3,{"inputs":[{"name":"handler"}],"output":{"name":"rchandlershared"}}],[11,"tick","","",3,{"inputs":[{"name":"handler"},{"name":"eventloop"}],"output":null}],[11,"ready","","",3,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"token"},{"name":"eventset"}],"output":null}],[11,"notify","","",3,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"message"}],"output":null}],[11,"timeout","","",3,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"timeout"}],"output":null}],[11,"eq","","",4,{"inputs":[{"name":"rw"},{"name":"rw"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"rw"},{"name":"rw"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"rw"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"rw"}],"output":{"name":"rw"}}],[11,"read","","Read.",4,{"inputs":[],"output":{"name":"self"}}],[11,"write","","Write",4,{"inputs":[],"output":{"name":"self"}}],[11,"both","","Read + Write",4,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",5,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"event"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"event"}],"output":{"name":"event"}}],[11,"id","","Index of the EventedShared handle",5,{"inputs":[{"name":"event"}],"output":{"name":"eventsourceid"}}],[11,"has_read","","Was the event a read",5,{"inputs":[{"name":"event"}],"output":{"name":"bool"}}],[11,"has_write","","Was the event a write",5,{"inputs":[{"name":"event"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"eq","","",6,{"inputs":[{"name":"eventsourceid"},{"name":"eventsourceid"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"eventsourceid"},{"name":"eventsourceid"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"eventsourceid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"eventsourceid"}],"output":{"name":"eventsourceid"}}],[11,"as_usize","","",6,{"inputs":[{"name":"eventsourceid"}],"output":{"name":"usize"}}],[11,"from_usize","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"new","","Create new `Mioco` instance.",7,{"inputs":[],"output":{"name":"self"}}],[11,"new_configured","","Create new `Mioco` instance with custom configuration.",7,{"inputs":[{"name":"config"}],"output":{"name":"self"}}],[11,"start","","Start mioco instance.",7,{"inputs":[{"name":"mioco"},{"name":"f"}],"output":{"name":"result"}}],[11,"new","","Create mioco `Config`.",8,{"inputs":[],"output":{"name":"self"}}],[11,"set_thread_num","","Set numer of threads to run mioco with",8,{"inputs":[{"name":"config"},{"name":"usize"}],"output":{"name":"self"}}],[11,"set_scheduler","","Set custom scheduler.",8,{"inputs":[{"name":"config"},{"name":"box"}],"output":{"name":"self"}}],[11,"set_stack_size","","Set stack size in bytes.",8,{"inputs":[{"name":"config"},{"name":"usize"}],"output":{"name":"self"}}],[11,"set_userdata","","Set user-provided data for the first coroutine",8,{"inputs":[{"name":"config"},{"name":"t"}],"output":{"name":"self"}}],[11,"event_loop","","Configure `mio::EvenLoop` for all the threads",8,{"inputs":[{"name":"config"}],"output":{"name":"eventloopconfig"}}],[11,"set_catch_panics","","Set if this instance will be catching panics, that occur within the coroutines",8,{"inputs":[{"name":"config"},{"name":"bool"}],"output":{"name":"self"}}],[11,"set_stack_protection","","Set if this instance should use protected stacks (default).",8,{"inputs":[{"name":"config"},{"name":"bool"}],"output":{"name":"self"}}],[11,"join","","Block waiting for coroutine completion",9,{"inputs":[{"name":"joinhandle"}],"output":{"name":"result"}}],[0,"mio","","Some mio types that are part of mioco-API, re-exported",null,null],[11,"drop","mio::event_loop","",10,null],[11,"new","","Initializes a new event loop using default configuration settings. The\nevent loop will not be running yet.",10,{"inputs":[],"output":{"name":"result"}}],[11,"configured","","",10,{"inputs":[{"name":"eventloopconfig"}],"output":{"name":"result"}}],[11,"channel","","Returns a sender that allows sending messages to the event loop in a\nthread-safe way, waking up the event loop if needed.",10,{"inputs":[{"name":"eventloop"}],"output":{"name":"sender"}}],[11,"timeout_ms","","Schedules a timeout after the requested time interval. When the\nduration has been reached,\n[Handler::timeout](trait.Handler.html#method.timeout) will be invoked\npassing in the supplied token.",10,null],[11,"clear_timeout","","If the supplied timeout has not been triggered, cancel it such that it\nwill not be triggered in the future.",10,{"inputs":[{"name":"eventloop"},{"name":"timeout"}],"output":{"name":"bool"}}],[11,"shutdown","","Tells the event loop to exit after it is done handling all events in the\ncurrent iteration.",10,null],[11,"is_running","","Indicates whether the event loop is currently running. If it&#39;s not it has either\nstopped or is scheduled to stop on the next tick.",10,{"inputs":[{"name":"eventloop"}],"output":{"name":"bool"}}],[11,"register","","Registers an IO handle with the event loop.",10,{"inputs":[{"name":"eventloop"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","Re-Registers an IO handle with the event loop.",10,{"inputs":[{"name":"eventloop"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"run","","Keep spinning the event loop indefinitely, and notify the handler whenever\nany of the registered handles are ready.",10,{"inputs":[{"name":"eventloop"},{"name":"h"}],"output":{"name":"result"}}],[11,"deregister","","Deregisters an IO handle with the event loop.",10,{"inputs":[{"name":"eventloop"},{"name":"e"}],"output":{"name":"result"}}],[11,"run_once","","Spin the event loop once, with a timeout of one second, and notify the\nhandler if any of the registered handles become ready during that\ntime.",10,{"inputs":[{"name":"eventloop"},{"name":"h"},{"name":"option"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"eventloop"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"EventLoop","mioco::mio","Single threaded IO event loop.",null,null],[8,"Handler","","",null,null],[16,"Timeout","","",11,null],[16,"Message","","",11,null],[11,"ready","","Invoked when the socket represented by `token` is ready to be operated\non. `events` indicates the specific operations that are\nready to be performed.",11,null],[11,"notify","","Invoked when a message has been received via the event loop&#39;s channel.",11,null],[11,"timeout","","Invoked when a timeout has completed.",11,null],[11,"interrupted","","Invoked when `EventLoop` has been interrupted by a signal interrupt.",11,null],[11,"tick","","Invoked at the end of an event loop tick.",11,null],[3,"Ipv4Addr","","Representation of an IPv4 address.",null,null],[0,"sched","mioco","Custom scheduling",null,null],[3,"Coroutine","mioco::sched","Coroutine scheduling handle.",null,null],[8,"Scheduler","","Coroutine Scheduler",null,null],[10,"spawn_thread","","Spawn per-thread Scheduler",12,{"inputs":[{"name":"scheduler"}],"output":{"name":"box"}}],[8,"SchedulerThread","","Scheduler thread",null,null],[10,"spawned","","New coroutine was spawned.",13,{"inputs":[{"name":"schedulerthread"},{"name":"eventloop"},{"name":"coroutinecontrol"}],"output":null}],[10,"ready","","A Coroutine became ready.",13,{"inputs":[{"name":"schedulerthread"},{"name":"eventloop"},{"name":"coroutinecontrol"}],"output":null}],[11,"tick","","Mio&#39;s tick have completed.",13,{"inputs":[{"name":"schedulerthread"},{"name":"eventloop"}],"output":null}],[11,"timeout","","Set the maximum time till the next tick.",13,{"inputs":[{"name":"schedulerthread"}],"output":{"name":"option"}}],[0,"unix","mioco","Unix sockets IO",null,null],[3,"UnixListener","mioco::unix","Unix listener",null,null],[5,"pipe","","Create a pair of unix pipe (reader and writer)",null,{"inputs":[],"output":{"name":"result"}}],[6,"PipeReader","","Unix pipe reader",null,null],[6,"PipeWriter","","Unix pipe writer",null,null],[6,"UnixSocket","","Unix socket",null,null],[6,"UnixStream","","Unix stream",null,null],[11,"bind","","Bind to a port",14,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"try_clone","","Try cloning the socket descriptor.",14,{"inputs":[{"name":"unixlistener"}],"output":{"name":"result"}}],[11,"stream","","Returns a new, unbound, Unix domain socket",15,{"inputs":[],"output":{"name":"result"}}],[11,"connect","","Connect the socket to the specified address",15,{"inputs":[{"name":"unixsocket"},{"name":"p"}],"output":{"name":"result"}}],[11,"bind","","Bind the socket to the specified address",15,{"inputs":[{"name":"unixsocket"},{"name":"p"}],"output":{"name":"result"}}],[11,"try_clone","","Clone",15,{"inputs":[{"name":"unixsocket"}],"output":{"name":"result"}}],[11,"connect","","Connect UnixStream to `path`",16,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"try_clone","","Clone",16,{"inputs":[{"name":"unixstream"}],"output":{"name":"result"}}],[11,"try_read_recv_fd","","Try reading data into a buffer.",16,null],[11,"read_recv_fd","","Block on read.",16,null],[11,"try_write_send_fd","","Try writing a data from the buffer.",16,null],[11,"write_send_fd","","Block on write",16,null],[0,"timer","mioco","Timers",null,null],[3,"Timer","mioco::timer","A Timer generating event after a given time",null,null],[11,"new","","Create a new timer",17,{"inputs":[],"output":{"name":"timer"}}],[11,"read","","Read a timer to block on it until it is done.",17,{"inputs":[{"name":"timer"}],"output":{"name":"steadytime"}}],[11,"try_read","","Try reading current time (if the timer is done)",17,{"inputs":[{"name":"timer"}],"output":{"name":"option"}}],[11,"set_timeout","","Set timeout for the timer",17,{"inputs":[{"name":"timer"},{"name":"i64"}],"output":null}],[11,"set_timeout_absolute","","Set timeout for the timer using absolute time.",17,{"inputs":[{"name":"timer"},{"name":"steadytime"}],"output":null}],[11,"get_timeout_absolute","","Get absolute value of the timer timeout.",17,{"inputs":[{"name":"timer"}],"output":{"name":"steadytime"}}],[0,"tcp","mioco","TCP",null,null],[4,"Shutdown","mioco::tcp","Possible values which can be passed to the `shutdown` method of `TcpStream`.",null,null],[13,"Read","","Indicates that the reading portion of this stream/socket should be shut\ndown. All currently blocked and future reads will return `Ok(0)`.",18,null],[13,"Write","","Indicates that the writing portion of this stream/socket should be shut\ndown. All currently blocked and future writes will return an error.",18,null],[13,"Both","","Shut down both the reading and writing portions of this stream.",18,null],[6,"TcpListener","","TCP Listener",null,null],[6,"TcpStream","","TCP Stream",null,null],[11,"local_addr","","Local address",19,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"take_socket_error","","TODO: document",19,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","Try cloning the listener descriptor.",19,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"bind","","Bind to a port",19,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"from_listener","","Creates a new TcpListener from an instance of a `std::net::TcpListener` type.",19,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"connect","","Create a new TCP stream an issue a non-blocking connect to the specified address.",20,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"connect_stream","","Creates a new TcpStream from the pending socket inside the given\n`std::net::TcpBuilder`, connecting it to the address specified.",20,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"local_addr","","Local address of connection.",20,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"peer_addr","","Peer address of connection.",20,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","Shutdown the connection.",20,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_nodelay","","Set `no_delay`.",20,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_keepalive","","Set keepalive.",20,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"take_socket_error","","TODO: document",20,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"try_clone","","Try cloning the socket descriptor.",20,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[0,"udp","mioco","UDP",null,null],[4,"IpAddr","mioco::udp","An IP address, either a IPv4 or IPv6 address.",null,null],[13,"V4","","",0,null],[13,"V6","","",0,null],[6,"UdpSocket","","Udp Socket",null,null],[11,"v4","","Return a new unbound IPv4 UDP Socket.",21,{"inputs":[],"output":{"name":"result"}}],[11,"v6","","Return a new unbound IPv6 UDP Socket.",21,{"inputs":[],"output":{"name":"result"}}],[11,"bound","","Return a new bound UDP Socket.",21,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"bind","","Bind the unbound UDP Socket.",21,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"local_addr","","Local address of the Socket.",21,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","Try cloning the socket.",21,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"recv","","Block on recv.",21,null],[11,"try_recv","","Try reading data into a buffer.",21,null],[11,"send","","Block on send.",21,null],[11,"try_send","","Try writing a data from the buffer.",21,null],[11,"set_broadcast","","Set broadcast flag.",21,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_multicast_loop","","Set multicast loop flag.",21,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"join_multicast","","Join multicast.",21,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"leave_multicast","","Leave multicast.",21,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_multicast_time_to_live","","Set multicast TTL.",21,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"result"}}],[0,"sync","mioco","Useful synchronization primitives",null,null],[3,"RwLock","mioco::sync","A reader-writer lock",null,null],[3,"Mutex","","A Mutex",null,null],[11,"tick","mioco::sync::mioco","Mio&#39;s tick have completed.",13,{"inputs":[{"name":"schedulerthread"},{"name":"eventloop"}],"output":null}],[11,"timeout","","Set the maximum time till the next tick.",13,{"inputs":[{"name":"schedulerthread"}],"output":{"name":"option"}}],[0,"mpsc","mioco::sync","MPSC channel modeled after `std::sync::mpsc`.",null,null],[3,"Receiver","mioco::sync::mpsc","Channel receiving end",null,null],[3,"Sender","","Channel sending end",null,null],[5,"channel","","Create a channel",null,null],[11,"recv","","Receive `T` sent using corresponding `Sender::send()`.",22,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"try_recv","","Try reading data from the queue.",22,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"sender"}],"output":{"name":"self"}}],[11,"send","","Deliver `T` to the other end of the channel.",23,{"inputs":[{"name":"sender"},{"name":"t"}],"output":{"name":"result"}}],[11,"fmt","mioco::sync","",24,{"inputs":[{"name":"rwlock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new instance of an RwLock&lt;T&gt; which is unlocked.",24,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"native_lock","","Get a reference to raw `std::sync::RwLock`.",24,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current\ncoroutine until it can be acquired.",24,{"inputs":[{"name":"rwlock"}],"output":{"name":"lockresult"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",24,{"inputs":[{"name":"rwlock"}],"output":{"name":"trylockresult"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\ncoroutine until it can be acquired.",24,{"inputs":[{"name":"rwlock"}],"output":{"name":"lockresult"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",24,{"inputs":[{"name":"rwlock"}],"output":{"name":"trylockresult"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",24,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"fmt","","",25,{"inputs":[{"name":"mutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new instance of an Mutex&lt;T&gt; which is unlocked.",25,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"native_lock","","Get a reference to raw `std::sync::Mutex`.",25,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","Acquire a mutex, blocking the current coroutine until it is able to do so.",25,{"inputs":[{"name":"mutex"}],"output":{"name":"lockresult"}}],[11,"try_lock","","Attempt to acquire this lock.",25,{"inputs":[{"name":"mutex"}],"output":{"name":"trylockresult"}}],[8,"Evented","mioco","Mioco event source.",null,null],[14,"select!","","Select operation on multiple IO.",null,null],[11,"tick","mioco::sched","Mio&#39;s tick have completed.",13,{"inputs":[{"name":"schedulerthread"},{"name":"eventloop"}],"output":null}],[11,"timeout","","Set the maximum time till the next tick.",13,{"inputs":[{"name":"schedulerthread"}],"output":{"name":"option"}}],[11,"recv","mioco::sync::mpsc","Receive `T` sent using corresponding `Sender::send()`.",22,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"try_recv","","Try reading data from the queue.",22,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"sender"}],"output":{"name":"self"}}],[11,"send","","Deliver `T` to the other end of the channel.",23,{"inputs":[{"name":"sender"},{"name":"t"}],"output":{"name":"result"}}],[11,"fmt","mioco::sync","",24,{"inputs":[{"name":"rwlock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new instance of an RwLock&lt;T&gt; which is unlocked.",24,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"native_lock","","Get a reference to raw `std::sync::RwLock`.",24,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current\ncoroutine until it can be acquired.",24,{"inputs":[{"name":"rwlock"}],"output":{"name":"lockresult"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",24,{"inputs":[{"name":"rwlock"}],"output":{"name":"trylockresult"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\ncoroutine until it can be acquired.",24,{"inputs":[{"name":"rwlock"}],"output":{"name":"lockresult"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",24,{"inputs":[{"name":"rwlock"}],"output":{"name":"trylockresult"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",24,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"fmt","","",25,{"inputs":[{"name":"mutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new instance of an Mutex&lt;T&gt; which is unlocked.",25,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"native_lock","","Get a reference to raw `std::sync::Mutex`.",25,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","Acquire a mutex, blocking the current coroutine until it is able to do so.",25,{"inputs":[{"name":"mutex"}],"output":{"name":"lockresult"}}],[11,"try_lock","","Attempt to acquire this lock.",25,{"inputs":[{"name":"mutex"}],"output":{"name":"trylockresult"}}],[11,"new","mioco::timer","Create a new timer",17,{"inputs":[],"output":{"name":"timer"}}],[11,"read","","Read a timer to block on it until it is done.",17,{"inputs":[{"name":"timer"}],"output":{"name":"steadytime"}}],[11,"try_read","","Try reading current time (if the timer is done)",17,{"inputs":[{"name":"timer"}],"output":{"name":"option"}}],[11,"set_timeout","","Set timeout for the timer",17,{"inputs":[{"name":"timer"},{"name":"i64"}],"output":null}],[11,"set_timeout_absolute","","Set timeout for the timer using absolute time.",17,{"inputs":[{"name":"timer"},{"name":"steadytime"}],"output":null}],[11,"get_timeout_absolute","","Get absolute value of the timer timeout.",17,{"inputs":[{"name":"timer"}],"output":{"name":"steadytime"}}],[11,"bind","mioco::unix","Bind to a port",14,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"try_clone","","Try cloning the socket descriptor.",14,{"inputs":[{"name":"unixlistener"}],"output":{"name":"result"}}],[11,"stream","","Returns a new, unbound, Unix domain socket",15,{"inputs":[],"output":{"name":"result"}}],[11,"connect","","Connect the socket to the specified address",15,{"inputs":[{"name":"unixsocket"},{"name":"p"}],"output":{"name":"result"}}],[11,"bind","","Bind the socket to the specified address",15,{"inputs":[{"name":"unixsocket"},{"name":"p"}],"output":{"name":"result"}}],[11,"try_clone","","Clone",15,{"inputs":[{"name":"unixsocket"}],"output":{"name":"result"}}],[11,"connect","","Connect UnixStream to `path`",16,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"try_clone","","Clone",16,{"inputs":[{"name":"unixstream"}],"output":{"name":"result"}}],[11,"try_read_recv_fd","","Try reading data into a buffer.",16,null],[11,"read_recv_fd","","Block on read.",16,null],[11,"try_write_send_fd","","Try writing a data from the buffer.",16,null],[11,"write_send_fd","","Block on write",16,null],[11,"local_addr","mioco::tcp","Local address",19,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"take_socket_error","","TODO: document",19,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","Try cloning the listener descriptor.",19,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"bind","","Bind to a port",19,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"from_listener","","Creates a new TcpListener from an instance of a `std::net::TcpListener` type.",19,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"connect","","Create a new TCP stream an issue a non-blocking connect to the specified address.",20,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"connect_stream","","Creates a new TcpStream from the pending socket inside the given\n`std::net::TcpBuilder`, connecting it to the address specified.",20,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"local_addr","","Local address of connection.",20,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"peer_addr","","Peer address of connection.",20,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","Shutdown the connection.",20,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_nodelay","","Set `no_delay`.",20,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_keepalive","","Set keepalive.",20,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"take_socket_error","","TODO: document",20,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"try_clone","","Try cloning the socket descriptor.",20,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"v4","mioco::udp","Return a new unbound IPv4 UDP Socket.",21,{"inputs":[],"output":{"name":"result"}}],[11,"v6","","Return a new unbound IPv6 UDP Socket.",21,{"inputs":[],"output":{"name":"result"}}],[11,"bound","","Return a new bound UDP Socket.",21,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"bind","","Bind the unbound UDP Socket.",21,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"local_addr","","Local address of the Socket.",21,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","Try cloning the socket.",21,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"recv","","Block on recv.",21,null],[11,"try_recv","","Try reading data into a buffer.",21,null],[11,"send","","Block on send.",21,null],[11,"try_send","","Try writing a data from the buffer.",21,null],[11,"set_broadcast","","Set broadcast flag.",21,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_multicast_loop","","Set multicast loop flag.",21,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"join_multicast","","Join multicast.",21,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"leave_multicast","","Leave multicast.",21,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_multicast_time_to_live","","Set multicast TTL.",21,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"kill","mioco::sched","Finish coroutine",26,{"inputs":[{"name":"coroutine"}],"output":null}],[11,"tick","","Mio&#39;s tick have completed.",13,{"inputs":[{"name":"schedulerthread"},{"name":"eventloop"}],"output":null}],[11,"timeout","","Set the maximum time till the next tick.",13,{"inputs":[{"name":"schedulerthread"}],"output":{"name":"option"}}],[11,"drop","","",26,{"inputs":[{"name":"coroutine"}],"output":null}],[11,"resume","","Resume Coroutine.",26,{"inputs":[{"name":"coroutine"},{"name":"eventloop"}],"output":null}],[11,"migrate","","Migrate to a different thread.",26,{"inputs":[{"name":"coroutine"},{"name":"eventloop"},{"name":"usize"}],"output":null}],[11,"reattach_to","","Finish migrating Coroutine by attaching it to a new thread.",26,{"inputs":[{"name":"coroutine"},{"name":"eventloop"},{"name":"handler"}],"output":null}],[11,"is_yielding","","Is this Coroutine ready after `yield_now()`?",26,{"inputs":[{"name":"coroutine"}],"output":{"name":"bool"}}],[11,"get_userdata","","Get coroutine user-provided data.",26,{"inputs":[{"name":"coroutine"}],"output":{"name":"option"}}]],"paths":[[4,"IpAddr"],[3,"MioAdapter"],[3,"Stack"],[3,"Handler"],[3,"RW"],[3,"Event"],[3,"EventSourceId"],[3,"Mioco"],[3,"Config"],[3,"JoinHandle"],[3,"EventLoop"],[8,"Handler"],[8,"Scheduler"],[8,"SchedulerThread"],[3,"UnixListener"],[6,"UnixSocket"],[6,"UnixStream"],[3,"Timer"],[4,"Shutdown"],[6,"TcpListener"],[6,"TcpStream"],[6,"UdpSocket"],[3,"Receiver"],[3,"Sender"],[3,"RwLock"],[3,"Mutex"],[3,"Coroutine"]]};
searchIndex["nix"] = {"doc":"Rust friendly bindings to the various *nix system functions.","items":[[6,"c_int","nix","",null,null],[4,"c_void","","",null,null],[4,"Errno","","",null,null],[13,"UnknownErrno","","",0,null],[13,"EPERM","","",0,null],[13,"ENOENT","","",0,null],[13,"ESRCH","","",0,null],[13,"EINTR","","",0,null],[13,"EIO","","",0,null],[13,"ENXIO","","",0,null],[13,"E2BIG","","",0,null],[13,"ENOEXEC","","",0,null],[13,"EBADF","","",0,null],[13,"ECHILD","","",0,null],[13,"EAGAIN","","",0,null],[13,"ENOMEM","","",0,null],[13,"EACCES","","",0,null],[13,"EFAULT","","",0,null],[13,"ENOTBLK","","",0,null],[13,"EBUSY","","",0,null],[13,"EEXIST","","",0,null],[13,"EXDEV","","",0,null],[13,"ENODEV","","",0,null],[13,"ENOTDIR","","",0,null],[13,"EISDIR","","",0,null],[13,"EINVAL","","",0,null],[13,"ENFILE","","",0,null],[13,"EMFILE","","",0,null],[13,"ENOTTY","","",0,null],[13,"ETXTBSY","","",0,null],[13,"EFBIG","","",0,null],[13,"ENOSPC","","",0,null],[13,"ESPIPE","","",0,null],[13,"EROFS","","",0,null],[13,"EMLINK","","",0,null],[13,"EPIPE","","",0,null],[13,"EDOM","","",0,null],[13,"ERANGE","","",0,null],[13,"EDEADLK","","",0,null],[13,"ENAMETOOLONG","","",0,null],[13,"ENOLCK","","",0,null],[13,"ENOSYS","","",0,null],[13,"ENOTEMPTY","","",0,null],[13,"ELOOP","","",0,null],[13,"ENOMSG","","",0,null],[13,"EIDRM","","",0,null],[13,"ECHRNG","","",0,null],[13,"EL2NSYNC","","",0,null],[13,"EL3HLT","","",0,null],[13,"EL3RST","","",0,null],[13,"ELNRNG","","",0,null],[13,"EUNATCH","","",0,null],[13,"ENOCSI","","",0,null],[13,"EL2HLT","","",0,null],[13,"EBADE","","",0,null],[13,"EBADR","","",0,null],[13,"EXFULL","","",0,null],[13,"ENOANO","","",0,null],[13,"EBADRQC","","",0,null],[13,"EBADSLT","","",0,null],[13,"EBFONT","","",0,null],[13,"ENOSTR","","",0,null],[13,"ENODATA","","",0,null],[13,"ETIME","","",0,null],[13,"ENOSR","","",0,null],[13,"ENONET","","",0,null],[13,"ENOPKG","","",0,null],[13,"EREMOTE","","",0,null],[13,"ENOLINK","","",0,null],[13,"EADV","","",0,null],[13,"ESRMNT","","",0,null],[13,"ECOMM","","",0,null],[13,"EPROTO","","",0,null],[13,"EMULTIHOP","","",0,null],[13,"EDOTDOT","","",0,null],[13,"EBADMSG","","",0,null],[13,"EOVERFLOW","","",0,null],[13,"ENOTUNIQ","","",0,null],[13,"EBADFD","","",0,null],[13,"EREMCHG","","",0,null],[13,"ELIBACC","","",0,null],[13,"ELIBBAD","","",0,null],[13,"ELIBSCN","","",0,null],[13,"ELIBMAX","","",0,null],[13,"ELIBEXEC","","",0,null],[13,"EILSEQ","","",0,null],[13,"ERESTART","","",0,null],[13,"ESTRPIPE","","",0,null],[13,"EUSERS","","",0,null],[13,"ENOTSOCK","","",0,null],[13,"EDESTADDRREQ","","",0,null],[13,"EMSGSIZE","","",0,null],[13,"EPROTOTYPE","","",0,null],[13,"ENOPROTOOPT","","",0,null],[13,"EPROTONOSUPPORT","","",0,null],[13,"ESOCKTNOSUPPORT","","",0,null],[13,"EOPNOTSUPP","","",0,null],[13,"EPFNOSUPPORT","","",0,null],[13,"EAFNOSUPPORT","","",0,null],[13,"EADDRINUSE","","",0,null],[13,"EADDRNOTAVAIL","","",0,null],[13,"ENETDOWN","","",0,null],[13,"ENETUNREACH","","",0,null],[13,"ENETRESET","","",0,null],[13,"ECONNABORTED","","",0,null],[13,"ECONNRESET","","",0,null],[13,"ENOBUFS","","",0,null],[13,"EISCONN","","",0,null],[13,"ENOTCONN","","",0,null],[13,"ESHUTDOWN","","",0,null],[13,"ETOOMANYREFS","","",0,null],[13,"ETIMEDOUT","","",0,null],[13,"ECONNREFUSED","","",0,null],[13,"EHOSTDOWN","","",0,null],[13,"EHOSTUNREACH","","",0,null],[13,"EALREADY","","",0,null],[13,"EINPROGRESS","","",0,null],[13,"ESTALE","","",0,null],[13,"EUCLEAN","","",0,null],[13,"ENOTNAM","","",0,null],[13,"ENAVAIL","","",0,null],[13,"EISNAM","","",0,null],[13,"EREMOTEIO","","",0,null],[13,"EDQUOT","","",0,null],[13,"ENOMEDIUM","","",0,null],[13,"EMEDIUMTYPE","","",0,null],[13,"ECANCELED","","",0,null],[13,"ENOKEY","","",0,null],[13,"EKEYEXPIRED","","",0,null],[13,"EKEYREVOKED","","",0,null],[13,"EKEYREJECTED","","",0,null],[13,"EOWNERDEAD","","",0,null],[13,"ENOTRECOVERABLE","","",0,null],[13,"ERFKILL","","",0,null],[13,"EHWPOISON","","",0,null],[4,"Error","","",null,null],[13,"Sys","","",1,null],[13,"InvalidPath","","",1,null],[0,"errno","","",null,null],[4,"Errno","nix::errno","",null,null],[13,"UnknownErrno","","",0,null],[13,"EPERM","","",0,null],[13,"ENOENT","","",0,null],[13,"ESRCH","","",0,null],[13,"EINTR","","",0,null],[13,"EIO","","",0,null],[13,"ENXIO","","",0,null],[13,"E2BIG","","",0,null],[13,"ENOEXEC","","",0,null],[13,"EBADF","","",0,null],[13,"ECHILD","","",0,null],[13,"EAGAIN","","",0,null],[13,"ENOMEM","","",0,null],[13,"EACCES","","",0,null],[13,"EFAULT","","",0,null],[13,"ENOTBLK","","",0,null],[13,"EBUSY","","",0,null],[13,"EEXIST","","",0,null],[13,"EXDEV","","",0,null],[13,"ENODEV","","",0,null],[13,"ENOTDIR","","",0,null],[13,"EISDIR","","",0,null],[13,"EINVAL","","",0,null],[13,"ENFILE","","",0,null],[13,"EMFILE","","",0,null],[13,"ENOTTY","","",0,null],[13,"ETXTBSY","","",0,null],[13,"EFBIG","","",0,null],[13,"ENOSPC","","",0,null],[13,"ESPIPE","","",0,null],[13,"EROFS","","",0,null],[13,"EMLINK","","",0,null],[13,"EPIPE","","",0,null],[13,"EDOM","","",0,null],[13,"ERANGE","","",0,null],[13,"EDEADLK","","",0,null],[13,"ENAMETOOLONG","","",0,null],[13,"ENOLCK","","",0,null],[13,"ENOSYS","","",0,null],[13,"ENOTEMPTY","","",0,null],[13,"ELOOP","","",0,null],[13,"ENOMSG","","",0,null],[13,"EIDRM","","",0,null],[13,"ECHRNG","","",0,null],[13,"EL2NSYNC","","",0,null],[13,"EL3HLT","","",0,null],[13,"EL3RST","","",0,null],[13,"ELNRNG","","",0,null],[13,"EUNATCH","","",0,null],[13,"ENOCSI","","",0,null],[13,"EL2HLT","","",0,null],[13,"EBADE","","",0,null],[13,"EBADR","","",0,null],[13,"EXFULL","","",0,null],[13,"ENOANO","","",0,null],[13,"EBADRQC","","",0,null],[13,"EBADSLT","","",0,null],[13,"EBFONT","","",0,null],[13,"ENOSTR","","",0,null],[13,"ENODATA","","",0,null],[13,"ETIME","","",0,null],[13,"ENOSR","","",0,null],[13,"ENONET","","",0,null],[13,"ENOPKG","","",0,null],[13,"EREMOTE","","",0,null],[13,"ENOLINK","","",0,null],[13,"EADV","","",0,null],[13,"ESRMNT","","",0,null],[13,"ECOMM","","",0,null],[13,"EPROTO","","",0,null],[13,"EMULTIHOP","","",0,null],[13,"EDOTDOT","","",0,null],[13,"EBADMSG","","",0,null],[13,"EOVERFLOW","","",0,null],[13,"ENOTUNIQ","","",0,null],[13,"EBADFD","","",0,null],[13,"EREMCHG","","",0,null],[13,"ELIBACC","","",0,null],[13,"ELIBBAD","","",0,null],[13,"ELIBSCN","","",0,null],[13,"ELIBMAX","","",0,null],[13,"ELIBEXEC","","",0,null],[13,"EILSEQ","","",0,null],[13,"ERESTART","","",0,null],[13,"ESTRPIPE","","",0,null],[13,"EUSERS","","",0,null],[13,"ENOTSOCK","","",0,null],[13,"EDESTADDRREQ","","",0,null],[13,"EMSGSIZE","","",0,null],[13,"EPROTOTYPE","","",0,null],[13,"ENOPROTOOPT","","",0,null],[13,"EPROTONOSUPPORT","","",0,null],[13,"ESOCKTNOSUPPORT","","",0,null],[13,"EOPNOTSUPP","","",0,null],[13,"EPFNOSUPPORT","","",0,null],[13,"EAFNOSUPPORT","","",0,null],[13,"EADDRINUSE","","",0,null],[13,"EADDRNOTAVAIL","","",0,null],[13,"ENETDOWN","","",0,null],[13,"ENETUNREACH","","",0,null],[13,"ENETRESET","","",0,null],[13,"ECONNABORTED","","",0,null],[13,"ECONNRESET","","",0,null],[13,"ENOBUFS","","",0,null],[13,"EISCONN","","",0,null],[13,"ENOTCONN","","",0,null],[13,"ESHUTDOWN","","",0,null],[13,"ETOOMANYREFS","","",0,null],[13,"ETIMEDOUT","","",0,null],[13,"ECONNREFUSED","","",0,null],[13,"EHOSTDOWN","","",0,null],[13,"EHOSTUNREACH","","",0,null],[13,"EALREADY","","",0,null],[13,"EINPROGRESS","","",0,null],[13,"ESTALE","","",0,null],[13,"EUCLEAN","","",0,null],[13,"ENOTNAM","","",0,null],[13,"ENAVAIL","","",0,null],[13,"EISNAM","","",0,null],[13,"EREMOTEIO","","",0,null],[13,"EDQUOT","","",0,null],[13,"ENOMEDIUM","","",0,null],[13,"EMEDIUMTYPE","","",0,null],[13,"ECANCELED","","",0,null],[13,"ENOKEY","","",0,null],[13,"EKEYEXPIRED","","",0,null],[13,"EKEYREVOKED","","",0,null],[13,"EKEYREJECTED","","",0,null],[13,"EOWNERDEAD","","",0,null],[13,"ENOTRECOVERABLE","","",0,null],[13,"ERFKILL","","",0,null],[13,"EHWPOISON","","",0,null],[5,"from_i32","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[5,"errno","","Returns the platform-specific value of errno",null,{"inputs":[],"output":{"name":"i32"}}],[11,"eq","nix","",0,{"inputs":[{"name":"errno"},{"name":"errno"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"errno"}],"output":{"name":"errno"}}],[11,"fmt","","",0,{"inputs":[{"name":"errno"},{"name":"formatter"}],"output":{"name":"result"}}],[17,"EWOULDBLOCK","nix::errno","",null,null],[17,"EDEADLOCK","","",null,null],[8,"ErrnoSentinel","","The sentinel value indicates that a function failed and more detailed\ninformation about the error can be found in `errno`",null,null],[10,"sentinel","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"last","nix","",0,{"inputs":[],"output":{"name":"self"}}],[11,"desc","","",0,{"inputs":[{"name":"errno"}],"output":{"name":"str"}}],[11,"from_i32","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[11,"clear","","",0,null],[11,"result","","Returns `Ok(value)` if it does not contain the sentinel value. This\nshould not be used when `-1` is not the errno sentinel value.",0,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"errno"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"errno"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",3,{"inputs":[{"name":"errno"}],"output":{"name":"self"}}],[0,"features","nix","",null,null],[5,"socket_atomic_cloexec","nix::features","",null,{"inputs":[],"output":{"name":"bool"}}],[0,"fcntl","nix","",null,null],[3,"SpliceFFlags","nix::fcntl","",null,null],[3,"OFlag","","",null,null],[3,"FdFlag","","",null,null],[3,"SealFlag","","",null,null],[3,"flock","","",null,null],[12,"l_type","","",4,null],[12,"l_whence","","",4,null],[12,"l_start","","",4,null],[12,"l_len","","",4,null],[12,"l_pid","","",4,null],[12,"l_sysid","","",4,null],[4,"FcntlArg","","",null,null],[13,"F_DUPFD","","",5,null],[13,"F_DUPFD_CLOEXEC","","",5,null],[13,"F_GETFD","","",5,null],[13,"F_SETFD","","",5,null],[13,"F_GETFL","","",5,null],[13,"F_SETFL","","",5,null],[13,"F_SETLK","","",5,null],[13,"F_SETLKW","","",5,null],[13,"F_GETLK","","",5,null],[13,"F_OFD_SETLK","","",5,null],[13,"F_OFD_SETLKW","","",5,null],[13,"F_OFD_GETLK","","",5,null],[13,"F_ADD_SEALS","","",5,null],[13,"F_GET_SEALS","","",5,null],[4,"FlockArg","","",null,null],[13,"LockShared","","",6,null],[13,"LockExclusive","","",6,null],[13,"Unlock","","",6,null],[13,"LockSharedNonblock","","",6,null],[13,"LockExclusiveNonblock","","",6,null],[13,"UnlockNonblock","","",6,null],[5,"open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"name":"result"}}],[5,"fcntl","","",null,{"inputs":[{"name":"rawfd"},{"name":"fcntlarg"}],"output":{"name":"result"}}],[5,"flock","","",null,{"inputs":[{"name":"rawfd"},{"name":"flockarg"}],"output":{"name":"result"}}],[5,"splice","","",null,{"inputs":[{"name":"rawfd"},{"name":"option"},{"name":"rawfd"},{"name":"option"},{"name":"usize"},{"name":"splicefflags"}],"output":{"name":"result"}}],[5,"tee","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"usize"},{"name":"splicefflags"}],"output":{"name":"result"}}],[5,"vmsplice","","",null,null],[11,"clone","libc::unix::notbsd::linux::other","",7,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"fmt","nix::fcntl","",4,{"inputs":[{"name":"flock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"flock"}}],[11,"clone","","",4,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"hash","","",8,null],[11,"cmp","","",8,{"inputs":[{"name":"splicefflags"},{"name":"splicefflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"splicefflags"},{"name":"splicefflags"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"splicefflags"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"splicefflags"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"splicefflags"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"splicefflags"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"splicefflags"}],"output":{"name":"splicefflags"}}],[11,"eq","","",8,{"inputs":[{"name":"splicefflags"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"splicefflags"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"splicefflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",8,{"inputs":[],"output":{"name":"splicefflags"}}],[11,"all","","Returns the set containing all flags.",8,{"inputs":[],"output":{"name":"splicefflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",8,{"inputs":[{"name":"splicefflags"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",8,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",8,{"inputs":[{"name":"c_uint"}],"output":{"name":"splicefflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",8,{"inputs":[{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",8,{"inputs":[{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",8,{"inputs":[{"name":"splicefflags"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",8,{"inputs":[{"name":"splicefflags"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",8,{"inputs":[{"name":"splicefflags"},{"name":"splicefflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",8,{"inputs":[{"name":"splicefflags"},{"name":"splicefflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",8,{"inputs":[{"name":"splicefflags"},{"name":"splicefflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",8,{"inputs":[{"name":"splicefflags"},{"name":"splicefflags"}],"output":{"name":"splicefflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",8,{"inputs":[{"name":"splicefflags"},{"name":"splicefflags"}],"output":{"name":"splicefflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",8,{"inputs":[{"name":"splicefflags"},{"name":"splicefflags"}],"output":{"name":"splicefflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",8,{"inputs":[{"name":"splicefflags"},{"name":"splicefflags"}],"output":{"name":"splicefflags"}}],[11,"not","","Returns the complement of this set of flags.",8,{"inputs":[{"name":"splicefflags"}],"output":{"name":"splicefflags"}}],[11,"from_iter","","",8,{"inputs":[{"name":"t"}],"output":{"name":"splicefflags"}}],[11,"hash","","",9,null],[11,"cmp","","",9,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"eq","","",9,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"oflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",9,{"inputs":[],"output":{"name":"oflag"}}],[11,"all","","Returns the set containing all flags.",9,{"inputs":[],"output":{"name":"oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",9,{"inputs":[{"name":"oflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",9,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",9,{"inputs":[{"name":"c_int"}],"output":{"name":"oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",9,{"inputs":[{"name":"oflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",9,{"inputs":[{"name":"oflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",9,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",9,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",9,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",9,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",9,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",9,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",9,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",9,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",9,{"inputs":[{"name":"oflag"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"not","","Returns the complement of this set of flags.",9,{"inputs":[{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"from_iter","","",9,{"inputs":[{"name":"t"}],"output":{"name":"oflag"}}],[11,"hash","","",10,null],[11,"cmp","","",10,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"eq","","",10,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"fdflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",10,{"inputs":[],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",10,{"inputs":[],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",10,{"inputs":[{"name":"fdflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",10,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",10,{"inputs":[{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",10,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",10,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",10,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",10,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",10,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",10,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",10,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",10,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",10,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",10,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",10,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"not","","Returns the complement of this set of flags.",10,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"from_iter","","",10,{"inputs":[{"name":"t"}],"output":{"name":"fdflag"}}],[11,"hash","","",11,null],[11,"cmp","","",11,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"eq","","",11,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"sealflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",11,{"inputs":[],"output":{"name":"sealflag"}}],[11,"all","","Returns the set containing all flags.",11,{"inputs":[],"output":{"name":"sealflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",11,{"inputs":[{"name":"sealflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",11,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",11,{"inputs":[{"name":"c_int"}],"output":{"name":"sealflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",11,{"inputs":[{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",11,{"inputs":[{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",11,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",11,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",11,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",11,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",11,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",11,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",11,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",11,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",11,{"inputs":[{"name":"sealflag"},{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"not","","Returns the complement of this set of flags.",11,{"inputs":[{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"from_iter","","",11,{"inputs":[{"name":"t"}],"output":{"name":"sealflag"}}],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"O_NDELAY","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[0,"mount","nix","",null,null],[3,"MsFlags","nix::mount","",null,null],[3,"MntFlags","","",null,null],[5,"mount","","",null,{"inputs":[{"name":"option"},{"name":"p2"},{"name":"option"},{"name":"msflags"},{"name":"option"}],"output":{"name":"result"}}],[5,"umount","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"umount2","","",null,{"inputs":[{"name":"p"},{"name":"mntflags"}],"output":{"name":"result"}}],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_VERBOSE","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_NOSEC","","",null,null],[17,"MS_BORN","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[11,"hash","","",12,null],[11,"cmp","","",12,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"eq","","",12,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"msflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",12,{"inputs":[],"output":{"name":"msflags"}}],[11,"all","","Returns the set containing all flags.",12,{"inputs":[],"output":{"name":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",12,{"inputs":[{"name":"msflags"}],"output":{"name":"c_ulong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",12,{"inputs":[{"name":"c_ulong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",12,{"inputs":[{"name":"c_ulong"}],"output":{"name":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",12,{"inputs":[{"name":"msflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",12,{"inputs":[{"name":"msflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",12,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",12,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",12,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",12,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",12,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",12,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",12,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",12,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",12,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"not","","Returns the complement of this set of flags.",12,{"inputs":[{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"from_iter","","",12,{"inputs":[{"name":"t"}],"output":{"name":"msflags"}}],[11,"hash","","",13,null],[11,"cmp","","",13,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"eq","","",13,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"mntflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",13,{"inputs":[],"output":{"name":"mntflags"}}],[11,"all","","Returns the set containing all flags.",13,{"inputs":[],"output":{"name":"mntflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",13,{"inputs":[{"name":"mntflags"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",13,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",13,{"inputs":[{"name":"c_int"}],"output":{"name":"mntflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",13,{"inputs":[{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",13,{"inputs":[{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",13,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",13,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",13,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",13,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",13,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",13,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",13,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",13,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",13,{"inputs":[{"name":"mntflags"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"not","","Returns the complement of this set of flags.",13,{"inputs":[{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"from_iter","","",13,{"inputs":[{"name":"t"}],"output":{"name":"mntflags"}}],[0,"mqueue","nix","Posix Message Queue functions",null,null],[3,"MQ_OFlag","nix::mqueue","",null,null],[3,"FdFlag","","",null,null],[3,"MqAttr","","",null,null],[12,"mq_flags","","",14,null],[12,"mq_maxmsg","","",14,null],[12,"mq_msgsize","","",14,null],[12,"mq_curmsgs","","",14,null],[5,"mq_open","","",null,{"inputs":[{"name":"cstring"},{"name":"mq_oflag"},{"name":"mode"},{"name":"option"}],"output":{"name":"result"}}],[5,"mq_unlink","","",null,{"inputs":[{"name":"cstring"}],"output":{"name":"result"}}],[5,"mq_close","","",null,{"inputs":[{"name":"mqd"}],"output":{"name":"result"}}],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,{"inputs":[{"name":"mqd"}],"output":{"name":"result"}}],[5,"mq_setattr","","Set the attributes of the message queue. Only O_NONBLOCK can be set, everything else will be ignored\nReturns the old attributes\nIt is recommend to use the mq_set_nonblock() and mq_remove_nonblock() convenience functions as they are easier to use",null,{"inputs":[{"name":"mqd"},{"name":"mqattr"}],"output":{"name":"result"}}],[5,"mq_set_nonblock","","Convenience function.\nSets the O_NONBLOCK attribute for a given message queue descriptor\nReturns the old attributes",null,{"inputs":[{"name":"mqd"}],"output":{"name":"result"}}],[5,"mq_remove_nonblock","","Convenience function.\nRemoves O_NONBLOCK attribute for a given message queue descriptor\nReturns the old attributes",null,{"inputs":[{"name":"mqd"}],"output":{"name":"result"}}],[11,"hash","","",15,null],[11,"cmp","","",15,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"option"}}],[11,"lt","","",15,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"le","","",15,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"gt","","",15,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"ge","","",15,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"eq","","",15,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"mq_oflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",15,{"inputs":[],"output":{"name":"mq_oflag"}}],[11,"all","","Returns the set containing all flags.",15,{"inputs":[],"output":{"name":"mq_oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",15,{"inputs":[{"name":"mq_oflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",15,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",15,{"inputs":[{"name":"c_int"}],"output":{"name":"mq_oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",15,{"inputs":[{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",15,{"inputs":[{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",15,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",15,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",15,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",15,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",15,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",15,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",15,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",15,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",15,{"inputs":[{"name":"mq_oflag"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"not","","Returns the complement of this set of flags.",15,{"inputs":[{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"from_iter","","",15,{"inputs":[{"name":"t"}],"output":{"name":"mq_oflag"}}],[11,"hash","","",16,null],[11,"cmp","","",16,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"eq","","",16,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"fdflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",16,{"inputs":[],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",16,{"inputs":[],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",16,{"inputs":[{"name":"fdflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",16,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",16,{"inputs":[{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",16,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",16,{"inputs":[{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",16,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",16,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",16,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",16,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",16,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",16,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",16,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",16,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",16,{"inputs":[{"name":"fdflag"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"not","","Returns the complement of this set of flags.",16,{"inputs":[{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"from_iter","","",16,{"inputs":[{"name":"t"}],"output":{"name":"fdflag"}}],[6,"MQd","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"FD_CLOEXEC","","",null,null],[11,"eq","","",14,{"inputs":[{"name":"mqattr"},{"name":"mqattr"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"mqattr"},{"name":"mqattr"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"mqattr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"mqattr"}],"output":{"name":"mqattr"}}],[11,"new","","",14,{"inputs":[{"name":"c_long"},{"name":"c_long"},{"name":"c_long"},{"name":"c_long"}],"output":{"name":"mqattr"}}],[0,"poll","nix","",null,null],[3,"PollFd","nix::poll","",null,null],[12,"fd","","",17,null],[12,"events","","",17,null],[12,"revents","","",17,null],[3,"EventFlags","","",null,null],[5,"poll","","",null,null],[11,"hash","","",18,null],[11,"cmp","","",18,{"inputs":[{"name":"eventflags"},{"name":"eventflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"eventflags"},{"name":"eventflags"}],"output":{"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"eventflags"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"eventflags"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"eventflags"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"eventflags"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"eventflags"}],"output":{"name":"eventflags"}}],[11,"eq","","",18,{"inputs":[{"name":"eventflags"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"eventflags"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"eventflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",18,{"inputs":[],"output":{"name":"eventflags"}}],[11,"all","","Returns the set containing all flags.",18,{"inputs":[],"output":{"name":"eventflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",18,{"inputs":[{"name":"eventflags"}],"output":{"name":"c_short"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",18,{"inputs":[{"name":"c_short"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",18,{"inputs":[{"name":"c_short"}],"output":{"name":"eventflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",18,{"inputs":[{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",18,{"inputs":[{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",18,{"inputs":[{"name":"eventflags"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",18,{"inputs":[{"name":"eventflags"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",18,{"inputs":[{"name":"eventflags"},{"name":"eventflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",18,{"inputs":[{"name":"eventflags"},{"name":"eventflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",18,{"inputs":[{"name":"eventflags"},{"name":"eventflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",18,{"inputs":[{"name":"eventflags"},{"name":"eventflags"}],"output":{"name":"eventflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",18,{"inputs":[{"name":"eventflags"},{"name":"eventflags"}],"output":{"name":"eventflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",18,{"inputs":[{"name":"eventflags"},{"name":"eventflags"}],"output":{"name":"eventflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",18,{"inputs":[{"name":"eventflags"},{"name":"eventflags"}],"output":{"name":"eventflags"}}],[11,"not","","Returns the complement of this set of flags.",18,{"inputs":[{"name":"eventflags"}],"output":{"name":"eventflags"}}],[11,"from_iter","","",18,{"inputs":[{"name":"t"}],"output":{"name":"eventflags"}}],[11,"fmt","","",17,{"inputs":[{"name":"pollfd"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[6,"nfds_t","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[0,"net","nix","",null,null],[0,"if_","nix::net","Network interface name resolution.",null,null],[5,"if_nametoindex","nix::net::if_","Resolve an interface into a interface number.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[0,"sched","nix","",null,null],[3,"CloneFlags","nix::sched","",null,null],[3,"CpuSet","","",null,null],[5,"sched_setaffinity","","",null,{"inputs":[{"name":"isize"},{"name":"cpuset"}],"output":{"name":"result"}}],[5,"clone","","",null,null],[5,"unshare","","",null,{"inputs":[{"name":"cloneflags"}],"output":{"name":"result"}}],[5,"setns","","",null,{"inputs":[{"name":"rawfd"},{"name":"cloneflags"}],"output":{"name":"result"}}],[6,"CloneCb","","",null,null],[6,"CpuMask","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[11,"hash","","",19,null],[11,"cmp","","",19,{"inputs":[{"name":"cloneflags"},{"name":"cloneflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"cloneflags"},{"name":"cloneflags"}],"output":{"name":"option"}}],[11,"lt","","",19,{"inputs":[{"name":"cloneflags"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"le","","",19,{"inputs":[{"name":"cloneflags"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"gt","","",19,{"inputs":[{"name":"cloneflags"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"ge","","",19,{"inputs":[{"name":"cloneflags"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"cloneflags"}],"output":{"name":"cloneflags"}}],[11,"eq","","",19,{"inputs":[{"name":"cloneflags"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"cloneflags"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"cloneflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",19,{"inputs":[],"output":{"name":"cloneflags"}}],[11,"all","","Returns the set containing all flags.",19,{"inputs":[],"output":{"name":"cloneflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",19,{"inputs":[{"name":"cloneflags"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",19,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",19,{"inputs":[{"name":"c_int"}],"output":{"name":"cloneflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",19,{"inputs":[{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",19,{"inputs":[{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",19,{"inputs":[{"name":"cloneflags"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",19,{"inputs":[{"name":"cloneflags"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",19,{"inputs":[{"name":"cloneflags"},{"name":"cloneflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",19,{"inputs":[{"name":"cloneflags"},{"name":"cloneflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",19,{"inputs":[{"name":"cloneflags"},{"name":"cloneflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",19,{"inputs":[{"name":"cloneflags"},{"name":"cloneflags"}],"output":{"name":"cloneflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",19,{"inputs":[{"name":"cloneflags"},{"name":"cloneflags"}],"output":{"name":"cloneflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",19,{"inputs":[{"name":"cloneflags"},{"name":"cloneflags"}],"output":{"name":"cloneflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",19,{"inputs":[{"name":"cloneflags"},{"name":"cloneflags"}],"output":{"name":"cloneflags"}}],[11,"not","","Returns the complement of this set of flags.",19,{"inputs":[{"name":"cloneflags"}],"output":{"name":"cloneflags"}}],[11,"from_iter","","",19,{"inputs":[{"name":"t"}],"output":{"name":"cloneflags"}}],[11,"clone","","",20,{"inputs":[{"name":"cpuset"}],"output":{"name":"cpuset"}}],[11,"new","","",20,{"inputs":[],"output":{"name":"cpuset"}}],[11,"set","","",20,{"inputs":[{"name":"cpuset"},{"name":"usize"}],"output":null}],[11,"unset","","",20,{"inputs":[{"name":"cpuset"},{"name":"usize"}],"output":null}],[0,"sys","nix","",null,null],[0,"epoll","nix::sys","",null,null],[3,"EpollEventKind","nix::sys::epoll","",null,null],[3,"EpollEvent","","",null,null],[12,"events","","",21,null],[12,"data","","",21,null],[4,"EpollOp","","",null,null],[13,"EpollCtlAdd","","",22,null],[13,"EpollCtlDel","","",22,null],[13,"EpollCtlMod","","",22,null],[5,"epoll_create","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"epoll_ctl","","",null,{"inputs":[{"name":"rawfd"},{"name":"epollop"},{"name":"rawfd"},{"name":"epollevent"}],"output":{"name":"result"}}],[5,"epoll_wait","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"EPOLLET","","",null,null],[11,"hash","","",23,null],[11,"cmp","","",23,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",23,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"option"}}],[11,"lt","","",23,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"le","","",23,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"gt","","",23,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"ge","","",23,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"eq","","",23,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"epolleventkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",23,{"inputs":[],"output":{"name":"epolleventkind"}}],[11,"all","","Returns the set containing all flags.",23,{"inputs":[],"output":{"name":"epolleventkind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",23,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",23,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",23,{"inputs":[{"name":"u32"}],"output":{"name":"epolleventkind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",23,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",23,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",23,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",23,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",23,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",23,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",23,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",23,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",23,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",23,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"sub","","Returns the set difference of the two sets of flags.",23,{"inputs":[{"name":"epolleventkind"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"not","","Returns the complement of this set of flags.",23,{"inputs":[{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"from_iter","","",23,{"inputs":[{"name":"t"}],"output":{"name":"epolleventkind"}}],[11,"clone","","",22,{"inputs":[{"name":"epollop"}],"output":{"name":"epollop"}}],[11,"clone","","",21,{"inputs":[{"name":"epollevent"}],"output":{"name":"epollevent"}}],[0,"memfd","nix::sys","",null,null],[3,"MemFdCreateFlag","nix::sys::memfd","",null,null],[5,"memfd_create","","",null,{"inputs":[{"name":"cstr"},{"name":"memfdcreateflag"}],"output":{"name":"result"}}],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[11,"hash","","",24,null],[11,"cmp","","",24,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",24,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"option"}}],[11,"lt","","",24,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"le","","",24,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"gt","","",24,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"ge","","",24,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"eq","","",24,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"memfdcreateflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",24,{"inputs":[],"output":{"name":"memfdcreateflag"}}],[11,"all","","Returns the set containing all flags.",24,{"inputs":[],"output":{"name":"memfdcreateflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",24,{"inputs":[{"name":"memfdcreateflag"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",24,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",24,{"inputs":[{"name":"c_uint"}],"output":{"name":"memfdcreateflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",24,{"inputs":[{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",24,{"inputs":[{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",24,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",24,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",24,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",24,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",24,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",24,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",24,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",24,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",24,{"inputs":[{"name":"memfdcreateflag"},{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"not","","Returns the complement of this set of flags.",24,{"inputs":[{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"from_iter","","",24,{"inputs":[{"name":"t"}],"output":{"name":"memfdcreateflag"}}],[0,"ioctl","nix::sys","Provide helpers for making ioctl system calls",null,null],[4,"c_void","nix::sys::ioctl::libc","",null,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[5,"isalnum","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isalpha","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"iscntrl","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isdigit","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isgraph","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"islower","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isprint","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"ispunct","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isspace","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isupper","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"isxdigit","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"tolower","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"toupper","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"atof","","",null,null],[5,"labs","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[5,"rand","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"srand","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"DT_DIR","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"MS_ACTIVE","","",null,null],[11,"clone","libc::unix::notbsd::linux","",25,{"inputs":[{"name":"rlimit64"}],"output":{"name":"rlimit64"}}],[3,"rlimit64","nix::sys::ioctl::libc","",null,null],[12,"rlim_cur","","",25,null],[12,"rlim_max","","",25,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[5,"open","","",null,null],[17,"TCP_MAXSEG","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"fsetxattr","","",null,null],[4,"fpos64_t","","",null,null],[17,"LOCK_UN","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"ENOTDIR","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"SIG_IGN","","",null,null],[17,"MNT_DETACH","","",null,null],[11,"clone","libc::unix::notbsd","",26,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[3,"sockaddr_in","nix::sys::ioctl::libc","",null,null],[12,"sin_family","","",26,null],[12,"sin_port","","",26,null],[12,"sin_addr","","",26,null],[12,"sin_zero","","",26,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[6,"speed_t","","",null,null],[17,"ENOSPC","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"EPOLLIN","","",null,null],[5,"removexattr","","",null,null],[17,"S_IROTH","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[5,"flistxattr","","",null,null],[5,"pwrite64","","",null,null],[5,"chroot","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[5,"pwritev","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[11,"clone","libc::unix","",27,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[3,"in_addr","nix::sys::ioctl::libc","",null,null],[12,"s_addr","","",27,null],[5,"epoll_ctl","","",null,null],[17,"ENOLINK","","",null,null],[5,"fopen64","","",null,null],[5,"gai_strerror","","",null,null],[5,"fseeko","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"NL1","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[5,"flock","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"pthread_rwlock_wrlock","","",null,null],[5,"signalfd","","",null,null],[6,"sighandler_t","","",null,null],[17,"EPOLLERR","","",null,null],[17,"CR0","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"EAGAIN","","",null,null],[17,"MS_NODEV","","",null,null],[5,"cfsetospeed","","",null,null],[5,"pthread_attr_getstack","","",null,null],[17,"F_GETFD","","",null,null],[17,"S_IXGRP","","",null,null],[5,"pthread_join","","",null,null],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"EPROTO","","",null,null],[5,"execve","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[5,"opendir","","",null,null],[17,"SHUT_WR","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"SHM_R","","",null,null],[5,"getsid","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"CLONE_FS","","",null,null],[17,"ELIBMAX","","",null,null],[5,"getxattr","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"EROFS","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"O_CREAT","","",null,null],[17,"MS_I_VERSION","","",null,null],[5,"strerror_r","","",null,null],[5,"getopt","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[17,"VQUIT","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[5,"sched_setscheduler","","",null,null],[17,"SO_ERROR","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"TIOCMGET","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"IPPROTO_IP","","",null,null],[6,"blksize_t","","",null,null],[5,"dlerror","","",null,null],[17,"EIDRM","","",null,null],[17,"ENOPROTOOPT","","",null,null],[5,"epoll_pwait","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"ENETDOWN","","",null,null],[17,"TCION","","",null,null],[5,"syscall","","",null,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[11,"clone","libc::unix::notbsd::linux","",28,{"inputs":[{"name":"cpu_set_t"}],"output":{"name":"cpu_set_t"}}],[3,"cpu_set_t","nix::sys::ioctl::libc","",null,null],[17,"AT_FDCWD","","",null,null],[17,"TCP_LINGER2","","",null,null],[5,"getegid","","",null,{"inputs":[],"output":{"name":"u32"}}],[6,"key_t","","",null,null],[5,"clock_gettime","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"SIGCONT","","",null,null],[5,"geteuid","","",null,{"inputs":[],"output":{"name":"u32"}}],[17,"_SC_2_FORT_RUN","","",null,null],[17,"GLOB_NOSORT","","",null,null],[11,"clone","libc::unix::notbsd","",29,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[3,"sockaddr_un","nix::sys::ioctl::libc","",null,null],[12,"sun_family","","",29,null],[12,"sun_path","","",29,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[17,"ECHRNG","","",null,null],[17,"ENOBUFS","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[5,"WIFEXITED","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"bool"}}],[17,"SCHED_OTHER","","",null,null],[17,"SIGVTALRM","","",null,null],[5,"mkostemps","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"ETXTBSY","","",null,null],[17,"ENETRESET","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"O_DIRECT","","",null,null],[6,"blkcnt64_t","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[5,"msync","","",null,null],[5,"shmget","","",null,{"inputs":[{"name":"i32"},{"name":"usize"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"pathconf","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[11,"clone","libc::unix::notbsd::linux::other","",30,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[3,"siginfo_t","nix::sys::ioctl::libc","",null,null],[12,"si_signo","","",30,null],[12,"si_errno","","",30,null],[12,"si_code","","",30,null],[12,"_pad","","",30,null],[17,"MS_MGC_MSK","","",null,null],[11,"clone","libc::unix::notbsd::linux","",31,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[3,"pthread_mutex_t","nix::sys::ioctl::libc","",null,null],[17,"ONLCR","","",null,null],[17,"ENODATA","","",null,null],[11,"clone","libc::unix","",32,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[3,"iovec","nix::sys::ioctl::libc","",null,null],[12,"iov_base","","",32,null],[12,"iov_len","","",32,null],[17,"ENOSTR","","",null,null],[17,"CLONE_PARENT","","",null,null],[5,"chmod","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"O_RDWR","","",null,null],[6,"useconds_t","","",null,null],[5,"sigaltstack","","",null,null],[5,"readv","","",null,null],[17,"RLIMIT_DATA","","",null,null],[11,"clone","libc::unix::notbsd::linux","",33,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[3,"pthread_mutexattr_t","nix::sys::ioctl::libc","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[5,"localtime_r","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_IOFBF","","",null,null],[17,"SHM_RDONLY","","",null,null],[5,"setpgid","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"EPOLLPRI","","",null,null],[5,"fdopen","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[17,"ECHILD","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"IXON","","",null,null],[17,"TCSETAW","","",null,null],[5,"rewinddir","","",null,null],[17,"CRTSCTS","","",null,null],[11,"clone","libc::unix::notbsd","",34,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[3,"utsname","nix::sys::ioctl::libc","",null,null],[12,"sysname","","",34,null],[12,"nodename","","",34,null],[12,"release","","",34,null],[12,"version","","",34,null],[12,"machine","","",34,null],[12,"domainname","","",34,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[5,"glob64","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[6,"rlim64_t","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"EMSGSIZE","","",null,null],[11,"clone","libc::unix::notbsd::linux::other","",35,{"inputs":[{"name":"glob64_t"}],"output":{"name":"glob64_t"}}],[3,"glob64_t","nix::sys::ioctl::libc","",null,null],[12,"gl_pathc","","",35,null],[12,"gl_pathv","","",35,null],[12,"gl_offs","","",35,null],[12,"gl_flags","","",35,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"RLIMIT_CORE","","",null,null],[5,"lstat64","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"S_IREAD","","",null,null],[5,"sigwaitinfo","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"DT_BLK","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"Q_QUOTAON","","",null,null],[5,"sigwait","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"CREAD","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"F_OK","","",null,null],[17,"ERFKILL","","",null,null],[17,"SIGIO","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_IOLBF","","",null,null],[5,"getlogin","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"TCOON","","",null,null],[17,"IXOFF","","",null,null],[6,"off64_t","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[11,"clone","libc::unix::notbsd::linux::other","",36,{"inputs":[{"name":"ipc_perm"}],"output":{"name":"ipc_perm"}}],[3,"ipc_perm","nix::sys::ioctl::libc","",null,null],[12,"__key","","",36,null],[12,"uid","","",36,null],[12,"gid","","",36,null],[12,"cuid","","",36,null],[12,"cgid","","",36,null],[12,"mode","","",36,null],[12,"__seq","","",36,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"MS_MOVE","","",null,null],[6,"blkcnt_t","","",null,null],[5,"fgetpos64","","",null,null],[17,"TIOCSTI","","",null,null],[5,"tcsendbreak","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"sigaddset","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"ENOLCK","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[5,"fstatfs","","",null,null],[17,"S_IWGRP","","",null,null],[17,"ENOCSI","","",null,null],[17,"MS_SILENT","","",null,null],[17,"ECOMM","","",null,null],[17,"MADV_NORMAL","","",null,null],[6,"nfds_t","","",null,null],[5,"uname","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"OPOST","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SIGURG","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"SIG_ERR","","",null,null],[5,"isatty","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"TCP_CORK","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"S_ISGID","","",null,null],[5,"unlink","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"EREMCHG","","",null,null],[5,"readdir64_r","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[17,"SIGKILL","","",null,null],[17,"BUFSIZ","","",null,null],[17,"NOFLSH","","",null,null],[5,"nanosleep","","",null,null],[17,"EPIPE","","",null,null],[11,"clone","libc::unix::notbsd::linux::other","",37,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[3,"sigaction","nix::sys::ioctl::libc","",null,null],[12,"sa_sigaction","","",37,null],[12,"sa_mask","","",37,null],[12,"sa_flags","","",37,null],[17,"GLOB_ABORTED","","",null,null],[5,"sysctl","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[5,"tmpfile64","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"LOCK_NB","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"ENOTTY","","",null,null],[5,"vmsplice","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"SIGHUP","","",null,null],[17,"ENXIO","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"MS_SHARED","","",null,null],[17,"PROT_READ","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[5,"sethostname","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[11,"clone","libc::unix","",38,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[3,"pollfd","nix::sys::ioctl::libc","",null,null],[12,"fd","","",38,null],[12,"events","","",38,null],[12,"revents","","",38,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[11,"clone","libc::unix","",39,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[3,"ip_mreq","nix::sys::ioctl::libc","",null,null],[12,"imr_multiaddr","","",39,null],[12,"imr_interface","","",39,null],[6,"tcflag_t","","",null,null],[17,"SHM_RND","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"QIF_ALL","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[11,"clone","libc::unix::notbsd","",40,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[3,"sockaddr_ll","nix::sys::ioctl::libc","",null,null],[12,"sll_family","","",40,null],[12,"sll_protocol","","",40,null],[12,"sll_ifindex","","",40,null],[12,"sll_hatype","","",40,null],[12,"sll_pkttype","","",40,null],[12,"sll_halen","","",40,null],[12,"sll_addr","","",40,null],[17,"EXIT_SUCCESS","","",null,null],[5,"mkstemps","","",null,null],[11,"clone","libc::unix::notbsd","",41,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[3,"fd_set","nix::sys::ioctl::libc","",null,null],[5,"setenv","","",null,null],[5,"writev","","",null,null],[17,"TCSETA","","",null,null],[5,"pipe","","",null,null],[5,"umount2","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[6,"in_addr_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"ERANGE","","",null,null],[17,"SIGBUS","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"O_CLOEXEC","","",null,null],[5,"chown","","",null,null],[17,"SCHED_BATCH","","",null,null],[5,"gmtime_r","","",null,null],[5,"close","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"TCP_KEEPIDLE","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[5,"open64","","",null,null],[17,"X_OK","","",null,null],[5,"mlockall","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"FF1","","",null,null],[5,"setcontext","","",null,null],[17,"ELIBSCN","","",null,null],[5,"ftruncate","","",null,{"inputs":[{"name":"i32"},{"name":"i64"}],"output":{"name":"i32"}}],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[5,"mkdtemp","","",null,null],[17,"SEEK_END","","",null,null],[5,"mincore","","",null,null],[17,"IPC_EXCL","","",null,null],[11,"clone","libc::unix::notbsd::linux","",42,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[3,"ifaddrs","nix::sys::ioctl::libc","",null,null],[12,"ifa_next","","",42,null],[12,"ifa_name","","",42,null],[12,"ifa_flags","","",42,null],[12,"ifa_addr","","",42,null],[12,"ifa_netmask","","",42,null],[12,"ifa_ifu","","",42,null],[12,"ifa_data","","",42,null],[5,"ioctl","","",null,{"inputs":[{"name":"i32"},{"name":"u64"}],"output":{"name":"i32"}}],[17,"ENOTCONN","","",null,null],[17,"O_RSYNC","","",null,null],[17,"CSIZE","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"S_IEXEC","","",null,null],[5,"tcflush","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"munmap","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"VEOL","","",null,null],[5,"cfgetispeed","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"F_SETOWN","","",null,null],[11,"clone","libc::unix::notbsd::linux::other::b64::x86_64","",43,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[3,"pthread_attr_t","nix::sys::ioctl::libc","",null,null],[5,"getuid","","",null,{"inputs":[],"output":{"name":"u32"}}],[17,"AF_INET6","","",null,null],[17,"EBADF","","",null,null],[5,"mq_close","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"_SC_MEMLOCK","","",null,null],[17,"ELIBBAD","","",null,null],[17,"EPOLLRDHUP","","",null,null],[5,"posix_fadvise","","",null,{"inputs":[{"name":"i32"},{"name":"i64"},{"name":"i64"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"pthread_mutex_trylock","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"_SC_2_VERSION","","",null,null],[5,"utimes","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[5,"accept","","",null,null],[5,"dup","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"IF_NAMESIZE","","",null,null],[17,"SA_ONSTACK","","",null,null],[5,"wait","","",null,null],[17,"CSTOPB","","",null,null],[5,"FD_ISSET","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[5,"CPU_ZERO","","",null,null],[5,"lgetxattr","","",null,null],[5,"getpgrp","","",null,{"inputs":[],"output":{"name":"i32"}}],[17,"SA_RESTART","","",null,null],[17,"S_IWOTH","","",null,null],[5,"freopen64","","",null,null],[17,"ELIBACC","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"ESPIPE","","",null,null],[5,"putenv","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"EDOM","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"EBADSLT","","",null,null],[17,"EBFONT","","",null,null],[17,"SIGABRT","","",null,null],[5,"fstatvfs","","",null,null],[17,"RAND_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[11,"clone","libc::unix::notbsd::linux::other","",44,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[3,"stack_t","nix::sys::ioctl::libc","",null,null],[12,"ss_sp","","",44,null],[12,"ss_flags","","",44,null],[12,"ss_size","","",44,null],[5,"getdtablesize","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"posix_fallocate","","",null,{"inputs":[{"name":"i32"},{"name":"i64"},{"name":"i64"}],"output":{"name":"i32"}}],[17,"SO_REUSEPORT","","",null,null],[17,"TAB0","","",null,null],[5,"mmap","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"ENOSR","","",null,null],[17,"IP_TTL","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"F_SETFD","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"EIO","","",null,null],[17,"MADV_REMOVE","","",null,null],[11,"clone","libc::unix::notbsd::linux::other","",45,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[3,"termios","nix::sys::ioctl::libc","",null,null],[12,"c_iflag","","",45,null],[12,"c_oflag","","",45,null],[12,"c_cflag","","",45,null],[12,"c_lflag","","",45,null],[12,"c_line","","",45,null],[12,"c_cc","","",45,null],[12,"c_ispeed","","",45,null],[12,"c_ospeed","","",45,null],[17,"IPC_RMID","","",null,null],[5,"pthread_key_delete","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[17,"ECHOCTL","","",null,null],[6,"cc_t","","",null,null],[6,"wchar_t","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[5,"fsync","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"splice","","",null,null],[5,"mq_receive","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SIGWINCH","","",null,null],[5,"sleep","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"umount","","",null,null],[17,"EXDEV","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[6,"clock_t","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"S_IXOTH","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"ENODEV","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"CLONE_IO","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"USRQUOTA","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[11,"clone","libc::unix::notbsd::linux::other::b64::x86_64","",46,{"inputs":[{"name":"stat64"}],"output":{"name":"stat64"}}],[3,"stat64","nix::sys::ioctl::libc","",null,null],[12,"st_dev","","",46,null],[12,"st_ino","","",46,null],[12,"st_nlink","","",46,null],[12,"st_mode","","",46,null],[12,"st_uid","","",46,null],[12,"st_gid","","",46,null],[12,"st_rdev","","",46,null],[12,"st_size","","",46,null],[12,"st_blksize","","",46,null],[12,"st_blocks","","",46,null],[12,"st_atime","","",46,null],[12,"st_atime_nsec","","",46,null],[12,"st_mtime","","",46,null],[12,"st_mtime_nsec","","",46,null],[12,"st_ctime","","",46,null],[12,"st_ctime_nsec","","",46,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"ENOMEM","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[5,"socketpair","","",null,null],[11,"clone","libc::unix::notbsd","",47,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[3,"sockaddr_in6","nix::sys::ioctl::libc","",null,null],[12,"sin6_family","","",47,null],[12,"sin6_port","","",47,null],[12,"sin6_flowinfo","","",47,null],[12,"sin6_addr","","",47,null],[12,"sin6_scope_id","","",47,null],[17,"MAP_SHARED","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"ST_MANDLOCK","","",null,null],[5,"globfree64","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[17,"SYS_gettid","","",null,null],[17,"EINTR","","",null,null],[6,"in_port_t","","",null,null],[17,"SIGUSR2","","",null,null],[17,"S_IRWXO","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"LOCK_EX","","",null,null],[17,"ENOENT","","",null,null],[17,"SIGPIPE","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[5,"pause","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"bind","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[5,"WTERMSIG","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"ESRCH","","",null,null],[5,"tcsetattr","","",null,null],[5,"getnameinfo","","",null,null],[5,"dup2","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"TIOCGPGRP","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"ELOOP","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"TAB2","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"HUPCL","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"rmdir","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"CS8","","",null,null],[17,"CLONE_SETTLS","","",null,null],[11,"clone","libc::unix::notbsd","",48,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[3,"addrinfo","nix::sys::ioctl::libc","",null,null],[12,"ai_flags","","",48,null],[12,"ai_family","","",48,null],[12,"ai_socktype","","",48,null],[12,"ai_protocol","","",48,null],[12,"ai_addrlen","","",48,null],[12,"ai_addr","","",48,null],[12,"ai_canonname","","",48,null],[12,"ai_next","","",48,null],[11,"clone","libc::unix::notbsd::linux::other","",49,{"inputs":[{"name":"shmid_ds"}],"output":{"name":"shmid_ds"}}],[3,"shmid_ds","nix::sys::ioctl::libc","",null,null],[12,"shm_perm","","",49,null],[12,"shm_segsz","","",49,null],[12,"shm_atime","","",49,null],[12,"shm_dtime","","",49,null],[12,"shm_ctime","","",49,null],[12,"shm_cpid","","",49,null],[12,"shm_lpid","","",49,null],[12,"shm_nattch","","",49,null],[17,"VSTOP","","",null,null],[5,"CPU_SET","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[17,"PTRACE_SETREGSET","","",null,null],[5,"execvp","","",null,null],[17,"TCSANOW","","",null,null],[11,"clone","libc::unix","",50,{"inputs":[{"name":"winsize"}],"output":{"name":"winsize"}}],[3,"winsize","nix::sys::ioctl::libc","",null,null],[12,"ws_row","","",50,null],[12,"ws_col","","",50,null],[12,"ws_xpixel","","",50,null],[12,"ws_ypixel","","",50,null],[17,"O_WRONLY","","",null,null],[5,"dlopen","","",null,null],[6,"__fsword_t","","",null,null],[17,"EMFILE","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[5,"mmap64","","",null,null],[17,"S_IWUSR","","",null,null],[5,"sigemptyset","","",null,null],[5,"pthread_cond_signal","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[5,"pthread_cond_destroy","","",null,null],[11,"clone","libc::unix::notbsd::linux","",51,{"inputs":[{"name":"dirent64"}],"output":{"name":"dirent64"}}],[3,"dirent64","nix::sys::ioctl::libc","",null,null],[12,"d_ino","","",51,null],[12,"d_off","","",51,null],[12,"d_reclen","","",51,null],[12,"d_type","","",51,null],[12,"d_name","","",51,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"VERASE","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"ECHONL","","",null,null],[5,"recv","","",null,null],[17,"VDISCARD","","",null,null],[5,"timegm","","",null,null],[17,"ECHOK","","",null,null],[17,"EPERM","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[5,"readahead","","",null,{"inputs":[{"name":"i32"},{"name":"i64"},{"name":"usize"}],"output":{"name":"isize"}}],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGQUIT","","",null,null],[5,"getcwd","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"EOVERFLOW","","",null,null],[5,"epoll_wait","","",null,null],[17,"S_ISUID","","",null,null],[17,"EXFULL","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[17,"EBADR","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"EL2HLT","","",null,null],[5,"daemon","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"freeaddrinfo","","",null,null],[5,"sigismember","","",null,null],[17,"INPCK","","",null,null],[17,"MS_REC","","",null,null],[5,"utime","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[5,"sched_get_priority_max","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"TCIOFF","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[11,"clone","libc::unix::notbsd::linux::other::b64::x86_64","",52,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[3,"stat","nix::sys::ioctl::libc","",null,null],[12,"st_dev","","",52,null],[12,"st_ino","","",52,null],[12,"st_nlink","","",52,null],[12,"st_mode","","",52,null],[12,"st_uid","","",52,null],[12,"st_gid","","",52,null],[12,"st_rdev","","",52,null],[12,"st_size","","",52,null],[12,"st_blksize","","",52,null],[12,"st_blocks","","",52,null],[12,"st_atime","","",52,null],[12,"st_atime_nsec","","",52,null],[12,"st_mtime","","",52,null],[12,"st_mtime_nsec","","",52,null],[12,"st_ctime","","",52,null],[12,"st_ctime_nsec","","",52,null],[17,"EINPROGRESS","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"SIGCHLD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"ENAVAIL","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"RLIMIT_NICE","","",null,null],[5,"mount","","",null,null],[5,"tcdrain","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[5,"closedir","","",null,null],[6,"dev_t","","",null,null],[17,"O_EXCL","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"EDEADLOCK","","",null,null],[6,"c_ulong","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"ECHO","","",null,null],[17,"IMAXBEL","","",null,null],[17,"Q_GETQUOTA","","",null,null],[5,"fchmod","","",null,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"i32"}}],[5,"mq_send","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"S_IFLNK","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"FIONBIO","","",null,null],[17,"SIGXCPU","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"EDEADLK","","",null,null],[17,"EPOLLONESHOT","","",null,null],[5,"lseek","","",null,{"inputs":[{"name":"i32"},{"name":"i64"},{"name":"i32"}],"output":{"name":"i64"}}],[17,"PTRACE_INTERRUPT","","",null,null],[17,"SIGTSTP","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[5,"sysconf","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i64"}}],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[5,"lremovexattr","","",null,null],[17,"O_DIRECTORY","","",null,null],[5,"fileno","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"S_IWRITE","","",null,null],[17,"SIGILL","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[5,"FD_ZERO","","",null,null],[5,"__errno_location","","",null,null],[17,"VINTR","","",null,null],[4,"DIR","","",null,null],[17,"F_DUPFD","","",null,null],[17,"E2BIG","","",null,null],[17,"MAP_STACK","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"DT_LNK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"VSUSP","","",null,null],[17,"TAB3","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"F_GETOWN","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[6,"nlink_t","","",null,null],[17,"ESTRPIPE","","",null,null],[5,"fstat64","","",null,null],[17,"PROT_NONE","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"S_IRGRP","","",null,null],[17,"TIOCMBIC","","",null,null],[6,"suseconds_t","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"_SC_FSYNC","","",null,null],[11,"clone","libc::unix","",53,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[3,"in6_addr","nix::sys::ioctl::libc","",null,null],[12,"s6_addr","","",53,null],[17,"ETOOMANYREFS","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"SIGPWR","","",null,null],[5,"quotactl","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"EL3RST","","",null,null],[5,"fremovexattr","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"CLOCAL","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"WNOHANG","","",null,null],[17,"SIGUSR1","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"SIG_BLOCK","","",null,null],[5,"lstat","","",null,null],[5,"ftruncate64","","",null,{"inputs":[{"name":"i32"},{"name":"i64"}],"output":{"name":"i32"}}],[6,"mqd_t","","",null,null],[17,"VKILL","","",null,null],[5,"tcgetpgrp","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"read","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[5,"stat","","",null,null],[17,"O_TRUNC","","",null,null],[5,"select","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"EILSEQ","","",null,null],[6,"loff_t","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"EPOLLET","","",null,null],[17,"NCCS","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"S_ISVTX","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"MS_STRICTATIME","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"recvfrom","","",null,null],[5,"recvmsg","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"ESTALE","","",null,null],[6,"ino64_t","","",null,null],[5,"creat64","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"EEXIST","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"MADV_DODUMP","","",null,null],[5,"chdir","","",null,null],[5,"setuid","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[17,"DT_FIFO","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"EDOTDOT","","",null,null],[11,"clone","libc::unix::notbsd","",54,{"inputs":[{"name":"sched_param"}],"output":{"name":"sched_param"}}],[3,"sched_param","nix::sys::ioctl::libc","",null,null],[12,"sched_priority","","",54,null],[17,"MAP_DENYWRITE","","",null,null],[17,"AF_UNIX","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[5,"cfgetospeed","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[11,"clone","libc::unix::notbsd","",55,{"inputs":[{"name":"sockaddr_nl"}],"output":{"name":"sockaddr_nl"}}],[3,"sockaddr_nl","nix::sys::ioctl::libc","",null,null],[12,"nl_family","","",55,null],[12,"nl_pid","","",55,null],[12,"nl_groups","","",55,null],[17,"ST_NODEV","","",null,null],[17,"ICANON","","",null,null],[5,"waitpid","","",null,null],[17,"TCGETS","","",null,null],[17,"IPC_SET","","",null,null],[17,"ECHOE","","",null,null],[17,"MAP_FIXED","","",null,null],[5,"fcntl","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"_IONBF","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[4,"timezone","","",null,null],[11,"clone","libc::unix::notbsd","",56,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[3,"tm","nix::sys::ioctl::libc","",null,null],[12,"tm_sec","","",56,null],[12,"tm_min","","",56,null],[12,"tm_hour","","",56,null],[12,"tm_mday","","",56,null],[12,"tm_mon","","",56,null],[12,"tm_year","","",56,null],[12,"tm_wday","","",56,null],[12,"tm_yday","","",56,null],[12,"tm_isdst","","",56,null],[12,"tm_gmtoff","","",56,null],[12,"tm_zone","","",56,null],[17,"MNT_FORCE","","",null,null],[5,"mkdir","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"S_IXUSR","","",null,null],[17,"SIGSEGV","","",null,null],[17,"ECHOKE","","",null,null],[5,"lseek64","","",null,{"inputs":[{"name":"i32"},{"name":"i64"},{"name":"i32"}],"output":{"name":"i64"}}],[17,"JFFS2_SUPER_MAGIC","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[17,"TCOOFF","","",null,null],[11,"clone","libc::unix","",57,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[3,"utimbuf","nix::sys::ioctl::libc","",null,null],[12,"actime","","",57,null],[12,"modtime","","",57,null],[17,"_PC_NAME_MAX","","",null,null],[17,"ENFILE","","",null,null],[17,"RLIMIT_STACK","","",null,null],[6,"c_long","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"EWOULDBLOCK","","",null,null],[5,"symlink","","",null,null],[17,"EMULTIHOP","","",null,null],[5,"getaddrinfo","","",null,null],[5,"pwrite","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"IGNPAR","","",null,null],[17,"AF_PACKET","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[5,"ftello64","","",null,null],[17,"ENOPKG","","",null,null],[5,"pthread_getattr_np","","",null,null],[17,"CS7","","",null,null],[17,"IEXTEN","","",null,null],[17,"ST_NOATIME","","",null,null],[5,"mq_unlink","","",null,null],[17,"SIGPROF","","",null,null],[5,"FD_CLR","","",null,null],[5,"ttyname","","",null,null],[17,"EFBIG","","",null,null],[17,"FF0","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[5,"statvfs","","",null,null],[17,"IGNCR","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"S_IFDIR","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[5,"mkostemp","","",null,null],[17,"SIGFPE","","",null,null],[11,"clone","libc::unix::notbsd::linux","",58,{"inputs":[{"name":"mq_attr"}],"output":{"name":"mq_attr"}}],[3,"mq_attr","nix::sys::ioctl::libc","",null,null],[12,"mq_flags","","",58,null],[12,"mq_maxmsg","","",58,null],[12,"mq_msgsize","","",58,null],[12,"mq_curmsgs","","",58,null],[5,"setrlimit","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[5,"if_nametoindex","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[5,"fdatasync","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"readdir_r","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"TCGETA","","",null,null],[5,"pread64","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"SIGTTOU","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[5,"getifaddrs","","",null,null],[5,"makecontext","","",null,null],[17,"BS1","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[5,"sigaction","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"EADV","","",null,null],[17,"POLLNVAL","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"IUTF8","","",null,null],[6,"shmatt_t","","",null,null],[17,"F_SETLEASE","","",null,null],[5,"getpeername","","",null,null],[17,"SIGALRM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"ST_WRITE","","",null,null],[5,"setgid","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[17,"EPOLLOUT","","",null,null],[17,"MAP_FILE","","",null,null],[17,"EPOLLMSG","","",null,null],[5,"listen","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"clone","libc::unix::notbsd","",59,{"inputs":[{"name":"epoll_event"}],"output":{"name":"epoll_event"}}],[3,"epoll_event","nix::sys::ioctl::libc","",null,null],[12,"events","","",59,null],[12,"u64","","",59,null],[11,"clone","libc::unix::notbsd::linux","",60,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[3,"statvfs","nix::sys::ioctl::libc","",null,null],[12,"f_bsize","","",60,null],[12,"f_frsize","","",60,null],[12,"f_blocks","","",60,null],[12,"f_bfree","","",60,null],[12,"f_bavail","","",60,null],[12,"f_files","","",60,null],[12,"f_ffree","","",60,null],[12,"f_favail","","",60,null],[12,"f_fsid","","",60,null],[12,"f_flag","","",60,null],[12,"f_namemax","","",60,null],[17,"VMIN","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[6,"fsblkcnt_t","","",null,null],[3,"flock","","",null,null],[12,"l_type","","",7,null],[12,"l_whence","","",7,null],[12,"l_start","","",7,null],[12,"l_len","","",7,null],[12,"l_pid","","",7,null],[17,"CLONE_NEWUSER","","",null,null],[5,"epoll_create","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"TAB1","","",null,null],[17,"CR1","","",null,null],[17,"O_ASYNC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"CR2","","",null,null],[5,"globfree","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"QIF_BTIME","","",null,null],[6,"pid_t","","",null,null],[17,"O_NDELAY","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"ENOKEY","","",null,null],[5,"seekdir","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[5,"usleep","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[17,"MS_UNBINDABLE","","",null,null],[17,"F_GETLK","","",null,null],[17,"SIGSTOP","","",null,null],[17,"EALREADY","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"ENONET","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"ISTRIP","","",null,null],[17,"F_TEST","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[5,"getrlimit64","","",null,null],[17,"VEOL2","","",null,null],[11,"clone","libc::unix","",61,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[3,"timespec","nix::sys::ioctl::libc","",null,null],[12,"tv_sec","","",61,null],[12,"tv_nsec","","",61,null],[17,"TCSETSW","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"EDQUOT","","",null,null],[5,"alarm","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"fpathconf","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i64"}}],[5,"getcontext","","",null,null],[5,"dladdr","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"F_LOCK","","",null,null],[6,"uid_t","","",null,null],[17,"MNT_EXPIRE","","",null,null],[5,"mprotect","","",null,null],[17,"IPC_NOWAIT","","",null,null],[5,"dlsym","","",null,null],[5,"gettimeofday","","",null,null],[17,"O_SYNC","","",null,null],[11,"clone","libc::unix::notbsd","",62,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[3,"sockaddr_storage","nix::sys::ioctl::libc","",null,null],[12,"ss_family","","",62,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"QIF_LIMITS","","",null,null],[5,"posix_madvise","","",null,null],[11,"clone","libc::unix::notbsd","",63,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[3,"Dl_info","nix::sys::ioctl::libc","",null,null],[12,"dli_fname","","",63,null],[12,"dli_fbase","","",63,null],[12,"dli_sname","","",63,null],[12,"dli_saddr","","",63,null],[5,"freeifaddrs","","",null,null],[17,"SIGTERM","","",null,null],[17,"TCSETS","","",null,null],[6,"rlim_t","","",null,null],[17,"S_IFCHR","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"IPC_STAT","","",null,null],[5,"getpid","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"sched_getaffinity","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"FIOCLEX","","",null,null],[5,"munlockall","","",null,{"inputs":[],"output":{"name":"i32"}}],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[6,"pthread_t","","",null,null],[5,"kill","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"W_OK","","",null,null],[17,"ECONNRESET","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIGINT","","",null,null],[17,"EHWPOISON","","",null,null],[5,"creat","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"O_NOCTTY","","",null,null],[6,"c_char","","",null,null],[5,"mkfifo","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[6,"socklen_t","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"F_SETLKW","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"S_IFMT","","",null,null],[5,"sigfillset","","",null,null],[11,"clone","libc::unix","",64,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[3,"rlimit","nix::sys::ioctl::libc","",null,null],[12,"rlim_cur","","",64,null],[12,"rlim_max","","",64,null],[17,"PATH_MAX","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[5,"getrusage","","",null,null],[17,"SHUT_RD","","",null,null],[17,"ENOTEMPTY","","",null,null],[11,"clone","libc::unix::notbsd::linux::other","",65,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[3,"msghdr","nix::sys::ioctl::libc","",null,null],[12,"msg_name","","",65,null],[12,"msg_namelen","","",65,null],[12,"msg_iov","","",65,null],[12,"msg_iovlen","","",65,null],[12,"msg_control","","",65,null],[12,"msg_controllen","","",65,null],[12,"msg_flags","","",65,null],[11,"clone","libc::unix::notbsd::linux::other::b64::x86_64","",66,{"inputs":[{"name":"ucontext_t"}],"output":{"name":"ucontext_t"}}],[3,"ucontext_t","nix::sys::ioctl::libc","",null,null],[12,"uc_flags","","",66,null],[12,"uc_link","","",66,null],[12,"uc_stack","","",66,null],[12,"uc_mcontext","","",66,null],[12,"uc_sigmask","","",66,null],[17,"EREMOTEIO","","",null,null],[17,"SHM_W","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_sigmask","","",null,null],[17,"POLLHUP","","",null,null],[5,"shm_open","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[5,"getgroups","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"S_IFBLK","","",null,null],[17,"TIOCINQ","","",null,null],[5,"posix_memalign","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"CR3","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"SO_OOBINLINE","","",null,null],[5,"shmdt","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FIONREAD","","",null,null],[5,"readlink","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"memrchr","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"ECANCELED","","",null,null],[17,"VWERASE","","",null,null],[5,"sched_getscheduler","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[11,"clone","libc::unix","",67,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[3,"timeval","nix::sys::ioctl::libc","",null,null],[12,"tv_sec","","",67,null],[12,"tv_usec","","",67,null],[17,"ENOEXEC","","",null,null],[17,"TIOCCONS","","",null,null],[17,"S_IRWXU","","",null,null],[17,"ICRNL","","",null,null],[5,"execv","","",null,null],[17,"QIF_USAGE","","",null,null],[11,"clone","libc::unix::notbsd::linux","",68,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[3,"dqblk","nix::sys::ioctl::libc","",null,null],[12,"dqb_bhardlimit","","",68,null],[12,"dqb_bsoftlimit","","",68,null],[12,"dqb_curspace","","",68,null],[12,"dqb_ihardlimit","","",68,null],[12,"dqb_isoftlimit","","",68,null],[12,"dqb_curinodes","","",68,null],[12,"dqb_btime","","",68,null],[12,"dqb_itime","","",68,null],[12,"dqb_valid","","",68,null],[17,"EXTPROC","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"EBADRQC","","",null,null],[17,"QIF_INODES","","",null,null],[5,"getrlimit","","",null,null],[5,"setns","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[6,"ino_t","","",null,null],[5,"access","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"EUCLEAN","","",null,null],[17,"EUSERS","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"BRKINT","","",null,null],[11,"clone","libc::unix::notbsd::linux","",69,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[3,"passwd","nix::sys::ioctl::libc","",null,null],[12,"pw_name","","",69,null],[12,"pw_passwd","","",69,null],[12,"pw_uid","","",69,null],[12,"pw_gid","","",69,null],[12,"pw_gecos","","",69,null],[12,"pw_dir","","",69,null],[12,"pw_shell","","",69,null],[11,"clone","libc::unix::notbsd::linux","",70,{"inputs":[{"name":"signalfd_siginfo"}],"output":{"name":"signalfd_siginfo"}}],[3,"signalfd_siginfo","nix::sys::ioctl::libc","",null,null],[12,"ssi_signo","","",70,null],[12,"ssi_errno","","",70,null],[12,"ssi_code","","",70,null],[12,"ssi_pid","","",70,null],[12,"ssi_uid","","",70,null],[12,"ssi_fd","","",70,null],[12,"ssi_tid","","",70,null],[12,"ssi_band","","",70,null],[12,"ssi_overrun","","",70,null],[12,"ssi_trapno","","",70,null],[12,"ssi_status","","",70,null],[12,"ssi_int","","",70,null],[12,"ssi_ptr","","",70,null],[12,"ssi_utime","","",70,null],[12,"ssi_stime","","",70,null],[12,"ssi_addr","","",70,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"LOCK_SH","","",null,null],[5,"pipe2","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"SIGIOT","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"VEOF","","",null,null],[5,"getgid","","",null,{"inputs":[],"output":{"name":"u32"}}],[17,"EOPNOTSUPP","","",null,null],[17,"EINVAL","","",null,null],[17,"POLLIN","","",null,null],[17,"IGNBRK","","",null,null],[17,"PARMRK","","",null,null],[17,"NL0","","",null,null],[17,"MS_MANDLOCK","","",null,null],[5,"umask","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[17,"SIGTTIN","","",null,null],[17,"EL3HLT","","",null,null],[17,"EISNAM","","",null,null],[5,"FD_SET","","",null,null],[5,"poll","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[5,"clone","","",null,null],[5,"preadv","","",null,null],[17,"ECONNABORTED","","",null,null],[5,"if_indextoname","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[11,"clone","libc::unix::notbsd::linux","",71,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[3,"pthread_cond_t","nix::sys::ioctl::libc","",null,null],[17,"ST_RDONLY","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"O_APPEND","","",null,null],[5,"sendmsg","","",null,null],[17,"EFAULT","","",null,null],[17,"O_DSYNC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"O_FSYNC","","",null,null],[17,"ENOANO","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[5,"socket","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"sigdelset","","",null,null],[17,"POLLPRI","","",null,null],[5,"shutdown","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"TCSADRAIN","","",null,null],[17,"ENOTNAM","","",null,null],[5,"pselect","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[5,"shm_unlink","","",null,null],[17,"SCHED_RR","","",null,null],[5,"stat64","","",null,null],[17,"EREMOTE","","",null,null],[5,"write","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"RTLD_LOCAL","","",null,null],[5,"pthread_create","","",null,null],[11,"clone","libc::unix","",72,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[3,"hostent","nix::sys::ioctl::libc","",null,null],[12,"h_name","","",72,null],[12,"h_aliases","","",72,null],[12,"h_addrtype","","",72,null],[12,"h_length","","",72,null],[12,"h_addr_list","","",72,null],[17,"IPC_CREAT","","",null,null],[17,"L_tmpnam","","",null,null],[17,"MS_SYNC","","",null,null],[5,"munlock","","",null,null],[5,"dlclose","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"VTIME","","",null,null],[5,"mq_setattr","","",null,null],[17,"TCFLSH","","",null,null],[5,"fgetxattr","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[6,"pthread_key_t","","",null,null],[5,"lsetxattr","","",null,null],[6,"sa_family_t","","",null,null],[11,"clone","libc::unix::notbsd::linux::other","",73,{"inputs":[{"name":"ucred"}],"output":{"name":"ucred"}}],[3,"ucred","nix::sys::ioctl::libc","",null,null],[12,"pid","","",73,null],[12,"uid","","",73,null],[12,"gid","","",73,null],[5,"utimensat","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"ESRMNT","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"VT1","","",null,null],[5,"connect","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"SO_LINGER","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"EPOLLWRBAND","","",null,null],[5,"statfs","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"S_IRUSR","","",null,null],[5,"link","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"CS5","","",null,null],[11,"clone","libc::unix::notbsd::linux","",74,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[3,"fsid_t","nix::sys::ioctl::libc","",null,null],[5,"sched_yield","","",null,{"inputs":[],"output":{"name":"i32"}}],[17,"RLIM_SAVED_CUR","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"QIF_SPACE","","",null,null],[5,"setsid","","",null,{"inputs":[],"output":{"name":"i32"}}],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"SIGTRAP","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"ISIG","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[5,"shmctl","","",null,null],[17,"POLLERR","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[5,"pthread_attr_init","","",null,null],[6,"off_t","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"POLLOUT","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"S_IFREG","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[5,"mknod","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[5,"pthread_self","","",null,{"inputs":[],"output":{"name":"u64"}}],[5,"sendto","","",null,null],[5,"mkstemp","","",null,null],[5,"fseeko64","","",null,null],[17,"VT0","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[5,"madvise","","",null,null],[5,"getsockname","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"TCSETAF","","",null,null],[17,"ST_APPEND","","",null,null],[5,"memalign","","",null,null],[17,"ERESTART","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MS_BIND","","",null,null],[17,"SIGPOLL","","",null,null],[17,"IXANY","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"TCSBRK","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"PARODD","","",null,null],[5,"gethostname","","",null,null],[17,"TCXONC","","",null,null],[11,"clone","libc::unix::notbsd::linux","",75,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[3,"dirent","nix::sys::ioctl::libc","",null,null],[12,"d_ino","","",75,null],[12,"d_off","","",75,null],[12,"d_reclen","","",75,null],[12,"d_type","","",75,null],[12,"d_name","","",75,null],[17,"EBADMSG","","",null,null],[5,"tcgetattr","","",null,null],[17,"AF_INET","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"INLCR","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[5,"fstat","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"DT_REG","","",null,null],[5,"backtrace","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"CLONE_VFORK","","",null,null],[5,"tee","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"usize"},{"name":"u32"}],"output":{"name":"isize"}}],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"EMLINK","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"EOF","","",null,null],[5,"popen","","",null,null],[5,"realpath","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"ELNRNG","","",null,null],[17,"F_TLOCK","","",null,null],[5,"listxattr","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[5,"mktime","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SEEK_SET","","",null,null],[17,"S_IFIFO","","",null,null],[17,"EACCES","","",null,null],[17,"EUNATCH","","",null,null],[17,"BS0","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[5,"mq_open","","",null,null],[17,"SOCK_STREAM","","",null,null],[5,"swapcontext","","",null,null],[17,"F_SETFL","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[5,"pthread_key_create","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"shmat","","",null,null],[17,"NI_MAXHOST","","",null,null],[5,"send","","",null,null],[11,"clone","libc::unix::notbsd::linux","",76,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[3,"pthread_rwlock_t","nix::sys::ioctl::libc","",null,null],[17,"S_IRWXG","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"O_RDONLY","","",null,null],[5,"setsockopt","","",null,null],[11,"clone","libc::unix::notbsd::linux","",77,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[3,"glob_t","nix::sys::ioctl::libc","",null,null],[12,"gl_pathc","","",77,null],[12,"gl_pathv","","",77,null],[12,"gl_offs","","",77,null],[12,"gl_flags","","",77,null],[17,"_SC_AIO_MAX","","",null,null],[17,"F_GETFL","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"MAP_32BIT","","",null,null],[5,"pclose","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[5,"getppid","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"getpwuid_r","","",null,null],[17,"CBAUD","","",null,null],[17,"EL2NSYNC","","",null,null],[5,"setxattr","","",null,null],[5,"sendfile","","",null,null],[17,"F_SETLK","","",null,null],[17,"CS6","","",null,null],[17,"ETIME","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"EBUSY","","",null,null],[17,"AF_NETLINK","","",null,null],[5,"pthread_detach","","",null,{"inputs":[{"name":"u64"}],"output":{"name":"i32"}}],[17,"TCP_SYNCNT","","",null,null],[17,"TMP_MAX","","",null,null],[17,"EISCONN","","",null,null],[5,"unsetenv","","",null,null],[17,"MS_NOUSER","","",null,null],[6,"mode_t","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"DT_CHR","","",null,null],[5,"dup3","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"sigtimedwait","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[11,"clone","libc::unix","",78,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[3,"rusage","nix::sys::ioctl::libc","",null,null],[12,"ru_utime","","",78,null],[12,"ru_stime","","",78,null],[12,"ru_maxrss","","",78,null],[12,"ru_ixrss","","",78,null],[12,"ru_idrss","","",78,null],[12,"ru_isrss","","",78,null],[12,"ru_minflt","","",78,null],[12,"ru_majflt","","",78,null],[12,"ru_nswap","","",78,null],[12,"ru_inblock","","",78,null],[12,"ru_oublock","","",78,null],[12,"ru_msgsnd","","",78,null],[12,"ru_msgrcv","","",78,null],[12,"ru_nsignals","","",78,null],[12,"ru_nvcsw","","",78,null],[12,"ru_nivcsw","","",78,null],[17,"SCHED_FIFO","","",null,null],[5,"sched_setaffinity","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[5,"fallocate","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i64"},{"name":"i64"}],"output":{"name":"i32"}}],[6,"time_t","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[5,"raise","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[11,"clone","libc::unix","",79,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[3,"ipv6_mreq","nix::sys::ioctl::libc","",null,null],[12,"ipv6mr_multiaddr","","",79,null],[12,"ipv6mr_interface","","",79,null],[5,"eventfd","","",null,{"inputs":[{"name":"u32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"signal","","",null,{"inputs":[{"name":"i32"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"cfsetispeed","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"mq_getattr","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"SIGSYS","","",null,null],[5,"futimes","","",null,null],[17,"FLUSHO","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[5,"mlock","","",null,null],[11,"clone","libc::unix::notbsd","",80,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[3,"sockaddr","nix::sys::ioctl::libc","",null,null],[12,"sa_family","","",80,null],[12,"sa_data","","",80,null],[17,"TIOCLINUX","","",null,null],[5,"glob","","",null,null],[17,"ENOMSG","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"PENDIN","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"R_OK","","",null,null],[17,"TCSETSF","","",null,null],[17,"EISDIR","","",null,null],[5,"tcflow","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"PTRACE_GETEVENTMSG","","",null,null],[5,"futimens","","",null,null],[5,"setrlimit64","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"TCP_INFO","","",null,null],[5,"setgroups","","",null,null],[11,"clone","libc::unix::notbsd::linux::other","",81,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[3,"statfs","nix::sys::ioctl::libc","",null,null],[12,"f_type","","",81,null],[12,"f_bsize","","",81,null],[12,"f_blocks","","",81,null],[12,"f_bfree","","",81,null],[12,"f_bavail","","",81,null],[12,"f_files","","",81,null],[12,"f_ffree","","",81,null],[12,"f_fsid","","",81,null],[12,"f_namelen","","",81,null],[12,"f_frsize","","",81,null],[17,"PTRACE_CONT","","",null,null],[17,"VSTART","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"Q_SYNC","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[5,"prctl","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"ftello","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[5,"pthread_kill","","",null,{"inputs":[{"name":"u64"},{"name":"i32"}],"output":{"name":"i32"}}],[17,"RTLD_NODELETE","","",null,null],[5,"unshare","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[11,"clone","libc::unix::notbsd::linux::other::b64::x86_64","",82,{"inputs":[{"name":"mcontext_t"}],"output":{"name":"mcontext_t"}}],[3,"mcontext_t","nix::sys::ioctl::libc","",null,null],[17,"TOSTOP","","",null,null],[6,"gid_t","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[5,"ptrace","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i64"}}],[17,"VREPRINT","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"F_ULOCK","","",null,null],[5,"getsockopt","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"EBADFD","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[5,"fsetpos64","","",null,null],[17,"EBADE","","",null,null],[11,"clone","libc::unix::notbsd::linux::other::b64","",83,{"inputs":[{"name":"sigset_t"}],"output":{"name":"sigset_t"}}],[3,"sigset_t","nix::sys::ioctl::libc","",null,null],[5,"telldir","","",null,null],[17,"PARENB","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"sched_get_priority_min","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"llistxattr","","",null,null],[5,"fork","","",null,{"inputs":[],"output":{"name":"i32"}}],[17,"ECHOPRT","","",null,null],[5,"pread","","",null,null],[17,"_SC_TIMERS","","",null,null],[5,"pthread_mutex_lock","","",null,null],[17,"VLNEXT","","",null,null],[17,"QIF_ILIMITS","","",null,null],[5,"ioc_dir","nix::sys::ioctl","Extracts the &quot;direction&quot; (read/write/none) from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[5,"ioc_type","","Extracts the type from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"ioc_nr","","Extracts the ioctl number from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"ioc_size","","Extracts the size from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[17,"NRBITS","","",null,null],[17,"TYPEBITS","","",null,null],[17,"NONE","","",null,null],[17,"READ","","",null,null],[17,"WRITE","","",null,null],[17,"SIZEBITS","","",null,null],[17,"DIRBITS","","",null,null],[17,"NRSHIFT","","",null,null],[17,"TYPESHIFT","","",null,null],[17,"SIZESHIFT","","",null,null],[17,"DIRSHIFT","","",null,null],[17,"NRMASK","","",null,null],[17,"TYPEMASK","","",null,null],[17,"SIZEMASK","","",null,null],[17,"DIRMASK","","",null,null],[17,"IN","","",null,null],[17,"OUT","","",null,null],[17,"INOUT","","",null,null],[17,"SIZE_MASK","","",null,null],[0,"sendfile","nix::sys","",null,null],[5,"sendfile","nix::sys::sendfile","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"option"},{"name":"usize"}],"output":{"name":"result"}}],[0,"signal","nix::sys","",null,null],[17,"SIGHUP","nix::sys::signal","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"SIGTRAP","","",null,null],[17,"SIGIOT","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[3,"SaFlag","","",null,null],[3,"SigFlag","","",null,null],[3,"SigSet","","",null,null],[3,"SigAction","","",null,null],[4,"SigHandler","","",null,null],[13,"SigDfl","","",84,null],[13,"SigIgn","","",84,null],[13,"Handler","","",84,null],[13,"SigAction","","",84,null],[5,"sigaction","","",null,{"inputs":[{"name":"signum"},{"name":"sigaction"}],"output":{"name":"result"}}],[5,"pthread_sigmask","","Manages the signal mask (set of blocked signals) for the calling thread.",null,{"inputs":[{"name":"sigflag"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[5,"kill","","",null,{"inputs":[{"name":"pid_t"},{"name":"signum"}],"output":{"name":"result"}}],[5,"raise","","",null,{"inputs":[{"name":"signum"}],"output":{"name":"result"}}],[6,"SigNum","","",null,null],[17,"SIGEMT","","",null,null],[17,"NSIG","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"SIG_SETMASK","","",null,null],[11,"hash","","",85,null],[11,"cmp","","",85,{"inputs":[{"name":"saflag"},{"name":"saflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",85,{"inputs":[{"name":"saflag"},{"name":"saflag"}],"output":{"name":"option"}}],[11,"lt","","",85,{"inputs":[{"name":"saflag"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"le","","",85,{"inputs":[{"name":"saflag"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"gt","","",85,{"inputs":[{"name":"saflag"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"ge","","",85,{"inputs":[{"name":"saflag"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"clone","","",85,{"inputs":[{"name":"saflag"}],"output":{"name":"saflag"}}],[11,"eq","","",85,{"inputs":[{"name":"saflag"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"saflag"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"fmt","","",85,{"inputs":[{"name":"saflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",85,{"inputs":[],"output":{"name":"saflag"}}],[11,"all","","Returns the set containing all flags.",85,{"inputs":[],"output":{"name":"saflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",85,{"inputs":[{"name":"saflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",85,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",85,{"inputs":[{"name":"c_int"}],"output":{"name":"saflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",85,{"inputs":[{"name":"saflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",85,{"inputs":[{"name":"saflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",85,{"inputs":[{"name":"saflag"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",85,{"inputs":[{"name":"saflag"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",85,{"inputs":[{"name":"saflag"},{"name":"saflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",85,{"inputs":[{"name":"saflag"},{"name":"saflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",85,{"inputs":[{"name":"saflag"},{"name":"saflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",85,{"inputs":[{"name":"saflag"},{"name":"saflag"}],"output":{"name":"saflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",85,{"inputs":[{"name":"saflag"},{"name":"saflag"}],"output":{"name":"saflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",85,{"inputs":[{"name":"saflag"},{"name":"saflag"}],"output":{"name":"saflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",85,{"inputs":[{"name":"saflag"},{"name":"saflag"}],"output":{"name":"saflag"}}],[11,"not","","Returns the complement of this set of flags.",85,{"inputs":[{"name":"saflag"}],"output":{"name":"saflag"}}],[11,"from_iter","","",85,{"inputs":[{"name":"t"}],"output":{"name":"saflag"}}],[11,"hash","","",86,null],[11,"cmp","","",86,{"inputs":[{"name":"sigflag"},{"name":"sigflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",86,{"inputs":[{"name":"sigflag"},{"name":"sigflag"}],"output":{"name":"option"}}],[11,"lt","","",86,{"inputs":[{"name":"sigflag"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"le","","",86,{"inputs":[{"name":"sigflag"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"gt","","",86,{"inputs":[{"name":"sigflag"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"ge","","",86,{"inputs":[{"name":"sigflag"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"clone","","",86,{"inputs":[{"name":"sigflag"}],"output":{"name":"sigflag"}}],[11,"eq","","",86,{"inputs":[{"name":"sigflag"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"sigflag"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"fmt","","",86,{"inputs":[{"name":"sigflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",86,{"inputs":[],"output":{"name":"sigflag"}}],[11,"all","","Returns the set containing all flags.",86,{"inputs":[],"output":{"name":"sigflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",86,{"inputs":[{"name":"sigflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",86,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",86,{"inputs":[{"name":"c_int"}],"output":{"name":"sigflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",86,{"inputs":[{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",86,{"inputs":[{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",86,{"inputs":[{"name":"sigflag"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",86,{"inputs":[{"name":"sigflag"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",86,{"inputs":[{"name":"sigflag"},{"name":"sigflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",86,{"inputs":[{"name":"sigflag"},{"name":"sigflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",86,{"inputs":[{"name":"sigflag"},{"name":"sigflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",86,{"inputs":[{"name":"sigflag"},{"name":"sigflag"}],"output":{"name":"sigflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",86,{"inputs":[{"name":"sigflag"},{"name":"sigflag"}],"output":{"name":"sigflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",86,{"inputs":[{"name":"sigflag"},{"name":"sigflag"}],"output":{"name":"sigflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",86,{"inputs":[{"name":"sigflag"},{"name":"sigflag"}],"output":{"name":"sigflag"}}],[11,"not","","Returns the complement of this set of flags.",86,{"inputs":[{"name":"sigflag"}],"output":{"name":"sigflag"}}],[11,"from_iter","","",86,{"inputs":[{"name":"t"}],"output":{"name":"sigflag"}}],[11,"clone","","",87,{"inputs":[{"name":"sigset"}],"output":{"name":"sigset"}}],[11,"all","","",87,{"inputs":[],"output":{"name":"sigset"}}],[11,"empty","","",87,{"inputs":[],"output":{"name":"sigset"}}],[11,"add","","",87,{"inputs":[{"name":"sigset"},{"name":"signum"}],"output":{"name":"result"}}],[11,"remove","","",87,{"inputs":[{"name":"sigset"},{"name":"signum"}],"output":{"name":"result"}}],[11,"contains","","",87,{"inputs":[{"name":"sigset"},{"name":"signum"}],"output":{"name":"result"}}],[11,"thread_get_mask","","Gets the currently blocked (masked) set of signals for the calling thread.",87,{"inputs":[],"output":{"name":"result"}}],[11,"thread_set_mask","","Sets the set of signals as the signal mask for the calling thread.",87,{"inputs":[{"name":"sigset"}],"output":{"name":"result"}}],[11,"thread_block","","Adds the set of signals to the signal mask for the calling thread.",87,{"inputs":[{"name":"sigset"}],"output":{"name":"result"}}],[11,"thread_unblock","","Removes the set of signals from the signal mask for the calling thread.",87,{"inputs":[{"name":"sigset"}],"output":{"name":"result"}}],[11,"thread_swap_mask","","Sets the set of signals as the signal mask, and returns the old mask.",87,{"inputs":[{"name":"sigset"},{"name":"sigflag"}],"output":{"name":"result"}}],[11,"wait","","Suspends execution of the calling thread until one of the signals in the\nsignal mask becomes pending, and returns the accepted signal.",87,{"inputs":[{"name":"sigset"}],"output":{"name":"result"}}],[11,"as_ref","","",87,{"inputs":[{"name":"sigset"}],"output":{"name":"sigset_t"}}],[11,"eq","","",84,{"inputs":[{"name":"sighandler"},{"name":"sighandler"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"sighandler"},{"name":"sighandler"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"sighandler"}],"output":{"name":"sighandler"}}],[11,"new","","This function will set or unset the flag `SA_SIGINFO` depending on the\ntype of the `handler` argument.",88,{"inputs":[{"name":"sighandler"},{"name":"saflag"},{"name":"sigset"}],"output":{"name":"sigaction"}}],[0,"socket","nix::sys","Socket interface functions",null,null],[3,"in_addr","nix::sys::socket","",null,null],[12,"s_addr","","",27,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",53,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",80,null],[12,"sa_data","","",80,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",26,null],[12,"sin_port","","",26,null],[12,"sin_addr","","",26,null],[12,"sin_zero","","",26,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",47,null],[12,"sin6_port","","",47,null],[12,"sin6_flowinfo","","",47,null],[12,"sin6_addr","","",47,null],[12,"sin6_scope_id","","",47,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",29,null],[12,"sun_path","","",29,null],[6,"sa_family_t","","",null,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",62,null],[3,"UnixAddr","","A wrapper around sockaddr_un. We track the length of sun_path,\nbecause it may not be null-terminated (unconnected and abstract\nsockets). Note that the actual sockaddr length is greater by\nsize_of::&lt;sa_family_t&gt;().",null,null],[12,"0","","",89,null],[12,"1","","",89,null],[3,"Ipv4Addr","","",null,null],[12,"0","","",90,null],[3,"Ipv6Addr","","",null,null],[12,"0","","",91,null],[3,"NetlinkAddr","","",null,null],[12,"0","","",92,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",93,null],[12,"imr_interface","","",93,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",94,null],[12,"ipv6mr_interface","","",94,null],[3,"MsgFlags","","",null,null],[3,"SockFlag","","",null,null],[3,"CmsgSpace","","A structure used to make room in a cmsghdr passed to recvmsg. The\nsize and alignment match that of a cmsghdr followed by a T, but the\nfields are not accessible, as the actual types will change on a call\nto recvmsg.",null,null],[3,"RecvMsg","","",null,null],[12,"bytes","","",95,null],[12,"address","","",95,null],[12,"flags","","",95,null],[3,"CmsgIterator","","",null,null],[3,"linger","","",null,null],[12,"l_onoff","","",96,null],[12,"l_linger","","",96,null],[3,"ucred","","",null,null],[4,"AddressFamily","","",null,null],[13,"Unix","","",97,null],[13,"Inet","","",97,null],[13,"Inet6","","",97,null],[13,"Netlink","","",97,null],[13,"Packet","","",97,null],[4,"SockAddr","","Represents a socket address",null,null],[13,"Inet","","",98,null],[13,"Unix","","",98,null],[13,"Netlink","","",98,null],[4,"InetAddr","","",null,null],[13,"V4","","",99,null],[13,"V6","","",99,null],[4,"IpAddr","","",null,null],[13,"V4","","",100,null],[13,"V6","","",100,null],[4,"SockType","","",null,null],[13,"Stream","","",101,null],[13,"Datagram","","",101,null],[13,"SeqPacket","","",101,null],[13,"Raw","","",101,null],[13,"Rdm","","",101,null],[4,"ControlMessage","","A type-safe wrapper around a single control message. More types may\nbe added to this enum; do not exhaustively pattern-match it.\n[Further reading](http://man7.org/linux/man-pages/man3/cmsg.3.html)",null,null],[13,"ScmRights","","A message of type SCM_RIGHTS, containing an array of file\ndescriptors passed between processes. See the description in the\n&quot;Ancillary messages&quot; section of the\n[unix(7) man page](http://man7.org/linux/man-pages/man7/unix.7.html).",102,null],[4,"SockLevel","","The protocol level at which to get / set socket options. Used as an\nargument to `getsockopt` and `setsockopt`.",null,null],[13,"Socket","","",103,null],[13,"Tcp","","",103,null],[13,"Ip","","",103,null],[13,"Ipv6","","",103,null],[13,"Udp","","",103,null],[13,"Netlink","","",103,null],[4,"Shutdown","","",null,null],[13,"Read","","Further receptions will be disallowed.",104,null],[13,"Write","","Further  transmissions will be disallowed.",104,null],[13,"Both","","Further receptions and transmissions will be disallowed.",104,null],[5,"sendmsg","","Send data in scatter-gather vectors to a socket, possibly accompanied\nby ancillary data. Optionally direct the message at the given address,\nas with sendto.",null,null],[5,"recvmsg","","Receive message in scatter-gather vectors from a socket, and\noptionally receive ancillary data into the provided buffer.\nIf no ancillary data is desired, use () as the type parameter.",null,null],[5,"socket","","Create an endpoint for communication",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"sockflag"},{"name":"c_int"}],"output":{"name":"result"}}],[5,"socketpair","","Create a pair of connected sockets",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"c_int"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"listen","","Listen for connections on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[5,"bind","","Bind a name to a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"accept","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"accept4","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"connect","","Initiate a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"recv","","Receive data from a connection-oriented socket. Returns the number of\nbytes read",null,null],[5,"recvfrom","","Receive data from a connectionless or connection-oriented socket. Returns\nthe number of bytes read and the socket address of the sender.",null,null],[5,"sendto","","",null,null],[5,"send","","Send data to a connection-oriented socket. Returns the number of bytes read",null,null],[5,"getsockopt","","Get the current value for the requested socket option",null,{"inputs":[{"name":"rawfd"},{"name":"o"}],"output":{"name":"result"}}],[5,"setsockopt","","Sets the value for the requested socket option",null,{"inputs":[{"name":"rawfd"},{"name":"o"},{"name":"val"}],"output":{"name":"result"}}],[5,"getpeername","","Get the address of the peer connected to the socket `fd`.",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"getsockname","","Get the current address to which the socket `fd` is bound.",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"sockaddr_storage_to_addr","","",null,{"inputs":[{"name":"sockaddr_storage"},{"name":"usize"}],"output":{"name":"result"}}],[5,"shutdown","","Shut down part of a full-duplex connection.",null,{"inputs":[{"name":"rawfd"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"netlinkaddr"}],"output":{"name":"netlinkaddr"}}],[11,"eq","","",92,{"inputs":[{"name":"netlinkaddr"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",92,{"inputs":[{"name":"netlinkaddr"},{"name":"h"}],"output":null}],[11,"new","","",92,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"netlinkaddr"}}],[11,"pid","","",92,{"inputs":[{"name":"netlinkaddr"}],"output":{"name":"u32"}}],[11,"groups","","",92,{"inputs":[{"name":"netlinkaddr"}],"output":{"name":"u32"}}],[11,"fmt","","",92,{"inputs":[{"name":"netlinkaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",97,null],[11,"fmt","","",97,{"inputs":[{"name":"addressfamily"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",97,{"inputs":[{"name":"addressfamily"},{"name":"addressfamily"}],"output":{"name":"bool"}}],[11,"clone","","",97,{"inputs":[{"name":"addressfamily"}],"output":{"name":"addressfamily"}}],[11,"from_std","","",99,{"inputs":[{"name":"socketaddr"}],"output":{"name":"inetaddr"}}],[11,"new","","",99,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"inetaddr"}}],[11,"ip","","Gets the IP address associated with this socket address.",99,{"inputs":[{"name":"inetaddr"}],"output":{"name":"ipaddr"}}],[11,"port","","Gets the port number associated with this socket address",99,{"inputs":[{"name":"inetaddr"}],"output":{"name":"u16"}}],[11,"to_std","","",99,{"inputs":[{"name":"inetaddr"}],"output":{"name":"socketaddr"}}],[11,"to_str","","",99,{"inputs":[{"name":"inetaddr"}],"output":{"name":"string"}}],[11,"eq","","",99,{"inputs":[{"name":"inetaddr"},{"name":"inetaddr"}],"output":{"name":"bool"}}],[11,"hash","","",99,{"inputs":[{"name":"inetaddr"},{"name":"h"}],"output":null}],[11,"clone","","",99,{"inputs":[{"name":"inetaddr"}],"output":{"name":"inetaddr"}}],[11,"fmt","","",99,{"inputs":[{"name":"inetaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_v4","","Create a new IpAddr that contains an IPv4 address.",100,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipaddr"}}],[11,"new_v6","","Create a new IpAddr that contains an IPv6 address.",100,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",100,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",90,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"from_std","","",90,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"any","","",90,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"octets","","",90,null],[11,"to_std","","",90,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",90,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",90,{"inputs":[{"name":"ipv4addr"},{"name":"h"}],"output":null}],[11,"clone","","",90,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"fmt","","",90,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"new","","",91,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"from_std","","",91,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Return the eight 16-bit segments that make up this address",91,null],[11,"to_std","","",91,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",91,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new sockaddr_un representing a filesystem path.",89,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new_abstract","","Create a new sockaddr_un representing an address in the\n&quot;abstract namespace&quot;. This is a Linux-specific extension,\nprimarily used to allow chrooted processes to communicate with\nspecific daemons.",89,null],[11,"path","","If this address represents a filesystem path, return that path.",89,{"inputs":[{"name":"unixaddr"}],"output":{"name":"option"}}],[11,"eq","","",89,{"inputs":[{"name":"unixaddr"},{"name":"unixaddr"}],"output":{"name":"bool"}}],[11,"hash","","",89,{"inputs":[{"name":"unixaddr"},{"name":"h"}],"output":null}],[11,"clone","","",89,{"inputs":[{"name":"unixaddr"}],"output":{"name":"unixaddr"}}],[11,"fmt","","",89,{"inputs":[{"name":"unixaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_inet","","",98,{"inputs":[{"name":"inetaddr"}],"output":{"name":"sockaddr"}}],[11,"new_unix","","",98,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new_netlink","","",98,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"sockaddr"}}],[11,"family","","",98,{"inputs":[{"name":"sockaddr"}],"output":{"name":"addressfamily"}}],[11,"to_str","","",98,{"inputs":[{"name":"sockaddr"}],"output":{"name":"string"}}],[11,"as_ffi_pair","","",98,null],[11,"eq","","",98,{"inputs":[{"name":"sockaddr"},{"name":"sockaddr"}],"output":{"name":"bool"}}],[11,"hash","","",98,{"inputs":[{"name":"sockaddr"},{"name":"h"}],"output":null}],[11,"clone","","",98,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"fmt","","",98,{"inputs":[{"name":"sockaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",105,null],[11,"cmp","","",105,{"inputs":[{"name":"msgflags"},{"name":"msgflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",105,{"inputs":[{"name":"msgflags"},{"name":"msgflags"}],"output":{"name":"option"}}],[11,"lt","","",105,{"inputs":[{"name":"msgflags"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"le","","",105,{"inputs":[{"name":"msgflags"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"gt","","",105,{"inputs":[{"name":"msgflags"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"ge","","",105,{"inputs":[{"name":"msgflags"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"clone","","",105,{"inputs":[{"name":"msgflags"}],"output":{"name":"msgflags"}}],[11,"eq","","",105,{"inputs":[{"name":"msgflags"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"msgflags"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"fmt","","",105,{"inputs":[{"name":"msgflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",105,{"inputs":[],"output":{"name":"msgflags"}}],[11,"all","","Returns the set containing all flags.",105,{"inputs":[],"output":{"name":"msgflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",105,{"inputs":[{"name":"msgflags"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",105,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",105,{"inputs":[{"name":"c_int"}],"output":{"name":"msgflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",105,{"inputs":[{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",105,{"inputs":[{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",105,{"inputs":[{"name":"msgflags"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",105,{"inputs":[{"name":"msgflags"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",105,{"inputs":[{"name":"msgflags"},{"name":"msgflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",105,{"inputs":[{"name":"msgflags"},{"name":"msgflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",105,{"inputs":[{"name":"msgflags"},{"name":"msgflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",105,{"inputs":[{"name":"msgflags"},{"name":"msgflags"}],"output":{"name":"msgflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",105,{"inputs":[{"name":"msgflags"},{"name":"msgflags"}],"output":{"name":"msgflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",105,{"inputs":[{"name":"msgflags"},{"name":"msgflags"}],"output":{"name":"msgflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",105,{"inputs":[{"name":"msgflags"},{"name":"msgflags"}],"output":{"name":"msgflags"}}],[11,"not","","Returns the complement of this set of flags.",105,{"inputs":[{"name":"msgflags"}],"output":{"name":"msgflags"}}],[11,"from_iter","","",105,{"inputs":[{"name":"t"}],"output":{"name":"msgflags"}}],[11,"clone","","",93,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"fmt","","",93,{"inputs":[{"name":"ip_mreq"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",93,{"inputs":[{"name":"ipv4addr"},{"name":"option"}],"output":{"name":"ip_mreq"}}],[11,"new","","",94,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6_mreq"}}],[0,"sockopt","","",null,null],[3,"ReuseAddr","nix::sys::socket::sockopt","",null,null],[3,"ReusePort","","",null,null],[3,"TcpNoDelay","","",null,null],[3,"Linger","","",null,null],[3,"IpAddMembership","","",null,null],[3,"IpDropMembership","","",null,null],[3,"Ipv6AddMembership","","",null,null],[3,"Ipv6DropMembership","","",null,null],[3,"IpMulticastTtl","","",null,null],[3,"IpMulticastLoop","","",null,null],[3,"ReceiveTimeout","","",null,null],[3,"SendTimeout","","",null,null],[3,"Broadcast","","",null,null],[3,"OobInline","","",null,null],[3,"SocketError","","",null,null],[3,"KeepAlive","","",null,null],[3,"PeerCredentials","","",null,null],[3,"TcpKeepIdle","","",null,null],[3,"RcvBuf","","",null,null],[3,"SndBuf","","",null,null],[3,"RcvBufForce","","",null,null],[3,"SndBufForce","","",null,null],[3,"SockType","","",null,null],[3,"AcceptConn","","",null,null],[11,"fmt","","",106,{"inputs":[{"name":"reuseaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"reuseaddr"}],"output":{"name":"reuseaddr"}}],[11,"set","","",106,{"inputs":[{"name":"reuseaddr"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",106,{"inputs":[{"name":"reuseaddr"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"reuseport"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"reuseport"}],"output":{"name":"reuseport"}}],[11,"set","","",107,{"inputs":[{"name":"reuseport"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",107,{"inputs":[{"name":"reuseport"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"tcpnodelay"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"tcpnodelay"}],"output":{"name":"tcpnodelay"}}],[11,"set","","",108,{"inputs":[{"name":"tcpnodelay"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",108,{"inputs":[{"name":"tcpnodelay"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"linger"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"linger"}],"output":{"name":"linger"}}],[11,"set","","",109,{"inputs":[{"name":"linger"},{"name":"rawfd"},{"name":"linger"}],"output":{"name":"result"}}],[11,"get","","",109,{"inputs":[{"name":"linger"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"ipaddmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"ipaddmembership"}],"output":{"name":"ipaddmembership"}}],[11,"set","","",110,{"inputs":[{"name":"ipaddmembership"},{"name":"rawfd"},{"name":"ip_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"ipdropmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"ipdropmembership"}],"output":{"name":"ipdropmembership"}}],[11,"set","","",111,{"inputs":[{"name":"ipdropmembership"},{"name":"rawfd"},{"name":"ip_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"ipv6addmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",112,{"inputs":[{"name":"ipv6addmembership"}],"output":{"name":"ipv6addmembership"}}],[11,"set","","",112,{"inputs":[{"name":"ipv6addmembership"},{"name":"rawfd"},{"name":"ipv6_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"ipv6dropmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"ipv6dropmembership"}],"output":{"name":"ipv6dropmembership"}}],[11,"set","","",113,{"inputs":[{"name":"ipv6dropmembership"},{"name":"rawfd"},{"name":"ipv6_mreq"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"ipmulticastttl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"ipmulticastttl"}],"output":{"name":"ipmulticastttl"}}],[11,"set","","",114,{"inputs":[{"name":"ipmulticastttl"},{"name":"rawfd"},{"name":"u8"}],"output":{"name":"result"}}],[11,"get","","",114,{"inputs":[{"name":"ipmulticastttl"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"ipmulticastloop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"ipmulticastloop"}],"output":{"name":"ipmulticastloop"}}],[11,"set","","",115,{"inputs":[{"name":"ipmulticastloop"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",115,{"inputs":[{"name":"ipmulticastloop"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",116,{"inputs":[{"name":"receivetimeout"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",116,{"inputs":[{"name":"receivetimeout"}],"output":{"name":"receivetimeout"}}],[11,"set","","",116,{"inputs":[{"name":"receivetimeout"},{"name":"rawfd"},{"name":"timeval"}],"output":{"name":"result"}}],[11,"get","","",116,{"inputs":[{"name":"receivetimeout"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"sendtimeout"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"sendtimeout"}],"output":{"name":"sendtimeout"}}],[11,"set","","",117,{"inputs":[{"name":"sendtimeout"},{"name":"rawfd"},{"name":"timeval"}],"output":{"name":"result"}}],[11,"get","","",117,{"inputs":[{"name":"sendtimeout"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"broadcast"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"broadcast"}],"output":{"name":"broadcast"}}],[11,"set","","",118,{"inputs":[{"name":"broadcast"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",118,{"inputs":[{"name":"broadcast"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"oobinline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",119,{"inputs":[{"name":"oobinline"}],"output":{"name":"oobinline"}}],[11,"set","","",119,{"inputs":[{"name":"oobinline"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",119,{"inputs":[{"name":"oobinline"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"socketerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",120,{"inputs":[{"name":"socketerror"}],"output":{"name":"socketerror"}}],[11,"get","","",120,{"inputs":[{"name":"socketerror"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"keepalive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",121,{"inputs":[{"name":"keepalive"}],"output":{"name":"keepalive"}}],[11,"set","","",121,{"inputs":[{"name":"keepalive"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",121,{"inputs":[{"name":"keepalive"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"peercredentials"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",122,{"inputs":[{"name":"peercredentials"}],"output":{"name":"peercredentials"}}],[11,"get","","",122,{"inputs":[{"name":"peercredentials"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",123,{"inputs":[{"name":"tcpkeepidle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",123,{"inputs":[{"name":"tcpkeepidle"}],"output":{"name":"tcpkeepidle"}}],[11,"set","","",123,{"inputs":[{"name":"tcpkeepidle"},{"name":"rawfd"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get","","",123,{"inputs":[{"name":"tcpkeepidle"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"rcvbuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",124,{"inputs":[{"name":"rcvbuf"}],"output":{"name":"rcvbuf"}}],[11,"set","","",124,{"inputs":[{"name":"rcvbuf"},{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[11,"get","","",124,{"inputs":[{"name":"rcvbuf"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",125,{"inputs":[{"name":"sndbuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",125,{"inputs":[{"name":"sndbuf"}],"output":{"name":"sndbuf"}}],[11,"set","","",125,{"inputs":[{"name":"sndbuf"},{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[11,"get","","",125,{"inputs":[{"name":"sndbuf"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"rcvbufforce"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",126,{"inputs":[{"name":"rcvbufforce"}],"output":{"name":"rcvbufforce"}}],[11,"set","","",126,{"inputs":[{"name":"rcvbufforce"},{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"sndbufforce"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",127,{"inputs":[{"name":"sndbufforce"}],"output":{"name":"sndbufforce"}}],[11,"set","","",127,{"inputs":[{"name":"sndbufforce"},{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"socktype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",128,{"inputs":[{"name":"socktype"}],"output":{"name":"socktype"}}],[11,"get","","",128,{"inputs":[{"name":"socktype"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"acceptconn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",129,{"inputs":[{"name":"acceptconn"}],"output":{"name":"acceptconn"}}],[11,"get","","",129,{"inputs":[{"name":"acceptconn"},{"name":"rawfd"}],"output":{"name":"result"}}],[6,"IpMulticastTtl","nix::sys::socket","",null,null],[6,"InAddrT","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_PACKET","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[8,"GetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument\nto `getsockopt`",null,null],[16,"Val","","",130,null],[8,"SetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument\nto `setsockopt`",null,null],[16,"Val","","",131,null],[11,"fmt","","",101,{"inputs":[{"name":"socktype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",101,{"inputs":[{"name":"socktype"},{"name":"socktype"}],"output":{"name":"bool"}}],[11,"clone","","",101,{"inputs":[{"name":"socktype"}],"output":{"name":"socktype"}}],[11,"hash","","",132,null],[11,"cmp","","",132,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",132,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"option"}}],[11,"lt","","",132,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"le","","",132,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"gt","","",132,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ge","","",132,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"clone","","",132,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"eq","","",132,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"fmt","","",132,{"inputs":[{"name":"sockflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",132,{"inputs":[],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",132,{"inputs":[],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",132,{"inputs":[{"name":"sockflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",132,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",132,{"inputs":[{"name":"c_int"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",132,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",132,{"inputs":[{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",132,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",132,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",132,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",132,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",132,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",132,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",132,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",132,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",132,{"inputs":[{"name":"sockflag"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"not","","Returns the complement of this set of flags.",132,{"inputs":[{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"from_iter","","",132,{"inputs":[{"name":"t"}],"output":{"name":"sockflag"}}],[11,"new","","Create a CmsgSpace&lt;T&gt;. The structure is used only for space, so\nthe fields are uninitialized.",133,{"inputs":[],"output":{"name":"self"}}],[11,"cmsgs","","Iterate over the valid control messages pointed to by this\nmsghdr.",95,{"inputs":[{"name":"recvmsg"}],"output":{"name":"cmsgiterator"}}],[11,"next","","",134,{"inputs":[{"name":"cmsgiterator"}],"output":{"name":"option"}}],[11,"fmt","","",96,{"inputs":[{"name":"linger"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"linger"}],"output":{"name":"linger"}}],[11,"fmt","","",135,{"inputs":[{"name":"ucred"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",135,{"inputs":[{"name":"ucred"},{"name":"ucred"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"ucred"},{"name":"ucred"}],"output":{"name":"bool"}}],[11,"clone","","",135,{"inputs":[{"name":"ucred"}],"output":{"name":"ucred"}}],[11,"fmt","","",104,{"inputs":[{"name":"shutdown"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",104,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"clone","","",104,{"inputs":[{"name":"shutdown"}],"output":{"name":"shutdown"}}],[0,"stat","nix::sys","",null,null],[6,"dev_t","nix::sys::stat","",null,null],[3,"FileStat","","",null,null],[12,"st_dev","","",52,null],[12,"st_ino","","",52,null],[12,"st_nlink","","",52,null],[12,"st_mode","","",52,null],[12,"st_uid","","",52,null],[12,"st_gid","","",52,null],[12,"st_rdev","","",52,null],[12,"st_size","","",52,null],[12,"st_blksize","","",52,null],[12,"st_blocks","","",52,null],[12,"st_atime","","",52,null],[12,"st_atime_nsec","","",52,null],[12,"st_mtime","","",52,null],[12,"st_mtime_nsec","","",52,null],[12,"st_ctime","","",52,null],[12,"st_ctime_nsec","","",52,null],[3,"SFlag","","",null,null],[3,"Mode","","",null,null],[5,"mknod","","",null,{"inputs":[{"name":"p"},{"name":"sflag"},{"name":"mode"},{"name":"dev_t"}],"output":{"name":"result"}}],[5,"mkdev","","",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"dev_t"}}],[5,"umask","","",null,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[5,"stat","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"lstat","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fstat","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[17,"S_IFREG","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IROTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[11,"hash","","",136,null],[11,"cmp","","",136,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",136,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"option"}}],[11,"lt","","",136,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"le","","",136,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"gt","","",136,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"ge","","",136,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"clone","","",136,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"eq","","",136,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"fmt","","",136,{"inputs":[{"name":"sflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",136,{"inputs":[],"output":{"name":"sflag"}}],[11,"all","","Returns the set containing all flags.",136,{"inputs":[],"output":{"name":"sflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",136,{"inputs":[{"name":"sflag"}],"output":{"name":"mode_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",136,{"inputs":[{"name":"mode_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",136,{"inputs":[{"name":"mode_t"}],"output":{"name":"sflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",136,{"inputs":[{"name":"sflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",136,{"inputs":[{"name":"sflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",136,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",136,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",136,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",136,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",136,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",136,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",136,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",136,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",136,{"inputs":[{"name":"sflag"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"not","","Returns the complement of this set of flags.",136,{"inputs":[{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"from_iter","","",136,{"inputs":[{"name":"t"}],"output":{"name":"sflag"}}],[11,"hash","","",137,null],[11,"cmp","","",137,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",137,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"option"}}],[11,"lt","","",137,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"le","","",137,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"gt","","",137,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ge","","",137,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"clone","","",137,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"eq","","",137,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"fmt","","",137,{"inputs":[{"name":"mode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",137,{"inputs":[],"output":{"name":"mode"}}],[11,"all","","Returns the set containing all flags.",137,{"inputs":[],"output":{"name":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",137,{"inputs":[{"name":"mode"}],"output":{"name":"mode_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",137,{"inputs":[{"name":"mode_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",137,{"inputs":[{"name":"mode_t"}],"output":{"name":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",137,{"inputs":[{"name":"mode"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",137,{"inputs":[{"name":"mode"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",137,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",137,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",137,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",137,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",137,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",137,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",137,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",137,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"sub","","Returns the set difference of the two sets of flags.",137,{"inputs":[{"name":"mode"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"not","","Returns the complement of this set of flags.",137,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"from_iter","","",137,{"inputs":[{"name":"t"}],"output":{"name":"mode"}}],[0,"syscall","nix::sys","Indirect system call",null,null],[5,"syscall","nix::sys::syscall","",null,null],[6,"Syscall","","",null,null],[7,"SYSPIVOTROOT","","",null,null],[7,"MEMFD_CREATE","","",null,null],[0,"termios","nix::sys","",null,null],[3,"Termios","nix::sys::termios","",null,null],[12,"c_iflag","","",138,null],[12,"c_oflag","","",138,null],[12,"c_cflag","","",138,null],[12,"c_lflag","","",138,null],[12,"c_line","","",138,null],[12,"c_cc","","",138,null],[12,"c_ispeed","","",138,null],[12,"c_ospeed","","",138,null],[3,"InputFlags","","",null,null],[3,"OutputFlags","","",null,null],[3,"ControlFlags","","",null,null],[3,"LocalFlags","","",null,null],[4,"SetArg","","",null,null],[13,"TCSANOW","","",139,null],[13,"TCSADRAIN","","",139,null],[13,"TCSAFLUSH","","",139,null],[4,"FlushArg","","",null,null],[13,"TCIFLUSH","","",140,null],[13,"TCOFLUSH","","",140,null],[13,"TCIOFLUSH","","",140,null],[4,"FlowArg","","",null,null],[13,"TCOOFF","","",141,null],[13,"TCOON","","",141,null],[13,"TCIOFF","","",141,null],[13,"TCION","","",141,null],[5,"cfgetispeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfgetospeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfsetispeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"result"}}],[5,"cfsetospeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"result"}}],[5,"tcgetattr","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"tcsetattr","","",null,{"inputs":[{"name":"rawfd"},{"name":"setarg"},{"name":"termios"}],"output":{"name":"result"}}],[5,"tcdrain","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"tcflow","","",null,{"inputs":[{"name":"rawfd"},{"name":"flowarg"}],"output":{"name":"result"}}],[5,"tcflush","","",null,{"inputs":[{"name":"rawfd"},{"name":"flusharg"}],"output":{"name":"result"}}],[5,"tcsendbreak","","",null,{"inputs":[{"name":"rawfd"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"clone","","",138,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"hash","","",142,null],[11,"cmp","","",142,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",142,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"option"}}],[11,"lt","","",142,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"le","","",142,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"gt","","",142,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ge","","",142,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"clone","","",142,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"eq","","",142,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"fmt","","",142,{"inputs":[{"name":"inputflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",142,{"inputs":[],"output":{"name":"inputflags"}}],[11,"all","","Returns the set containing all flags.",142,{"inputs":[],"output":{"name":"inputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",142,{"inputs":[{"name":"inputflags"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",142,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",142,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"inputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",142,{"inputs":[{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",142,{"inputs":[{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",142,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",142,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",142,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",142,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",142,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",142,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",142,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",142,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",142,{"inputs":[{"name":"inputflags"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"not","","Returns the complement of this set of flags.",142,{"inputs":[{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"from_iter","","",142,{"inputs":[{"name":"t"}],"output":{"name":"inputflags"}}],[11,"hash","","",143,null],[11,"cmp","","",143,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",143,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"option"}}],[11,"lt","","",143,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"le","","",143,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"gt","","",143,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ge","","",143,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"clone","","",143,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"eq","","",143,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"fmt","","",143,{"inputs":[{"name":"outputflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",143,{"inputs":[],"output":{"name":"outputflags"}}],[11,"all","","Returns the set containing all flags.",143,{"inputs":[],"output":{"name":"outputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",143,{"inputs":[{"name":"outputflags"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",143,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",143,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"outputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",143,{"inputs":[{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",143,{"inputs":[{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",143,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",143,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",143,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",143,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",143,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",143,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",143,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",143,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",143,{"inputs":[{"name":"outputflags"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"not","","Returns the complement of this set of flags.",143,{"inputs":[{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"from_iter","","",143,{"inputs":[{"name":"t"}],"output":{"name":"outputflags"}}],[11,"hash","","",144,null],[11,"cmp","","",144,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",144,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"option"}}],[11,"lt","","",144,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"le","","",144,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"gt","","",144,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ge","","",144,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"clone","","",144,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"eq","","",144,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"fmt","","",144,{"inputs":[{"name":"controlflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",144,{"inputs":[],"output":{"name":"controlflags"}}],[11,"all","","Returns the set containing all flags.",144,{"inputs":[],"output":{"name":"controlflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",144,{"inputs":[{"name":"controlflags"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",144,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",144,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"controlflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",144,{"inputs":[{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",144,{"inputs":[{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",144,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",144,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",144,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",144,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",144,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",144,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",144,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",144,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",144,{"inputs":[{"name":"controlflags"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"not","","Returns the complement of this set of flags.",144,{"inputs":[{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"from_iter","","",144,{"inputs":[{"name":"t"}],"output":{"name":"controlflags"}}],[11,"hash","","",145,null],[11,"cmp","","",145,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",145,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"option"}}],[11,"lt","","",145,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"le","","",145,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"gt","","",145,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ge","","",145,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"clone","","",145,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"eq","","",145,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"fmt","","",145,{"inputs":[{"name":"localflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",145,{"inputs":[],"output":{"name":"localflags"}}],[11,"all","","Returns the set containing all flags.",145,{"inputs":[],"output":{"name":"localflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",145,{"inputs":[{"name":"localflags"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",145,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",145,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"localflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",145,{"inputs":[{"name":"localflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",145,{"inputs":[{"name":"localflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",145,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",145,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",145,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",145,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",145,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",145,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",145,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",145,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",145,{"inputs":[{"name":"localflags"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"not","","Returns the complement of this set of flags.",145,{"inputs":[{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"from_iter","","",145,{"inputs":[{"name":"t"}],"output":{"name":"localflags"}}],[11,"clone","","",139,{"inputs":[{"name":"setarg"}],"output":{"name":"setarg"}}],[11,"clone","","",140,{"inputs":[{"name":"flusharg"}],"output":{"name":"flusharg"}}],[11,"clone","","",141,{"inputs":[{"name":"flowarg"}],"output":{"name":"flowarg"}}],[6,"tcflag_t","","",null,null],[6,"cc_t","","",null,null],[6,"speed_t","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"NCCS","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"IUTF8","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[0,"utsname","nix::sys","",null,null],[3,"UtsName","nix::sys::utsname","",null,null],[5,"uname","","",null,{"inputs":[],"output":{"name":"utsname"}}],[11,"clone","","",146,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"sysname","","",146,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"nodename","","",146,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"release","","",146,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"version","","",146,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[11,"machine","","",146,{"inputs":[{"name":"utsname"}],"output":{"name":"str"}}],[0,"wait","nix::sys","",null,null],[3,"WaitPidFlag","nix::sys::wait","",null,null],[4,"WaitStatus","","",null,null],[13,"Exited","","",147,null],[13,"Signaled","","",147,null],[13,"Stopped","","",147,null],[13,"Continued","","",147,null],[13,"StillAlive","","",147,null],[5,"waitpid","","",null,{"inputs":[{"name":"pid_t"},{"name":"option"}],"output":{"name":"result"}}],[5,"wait","","",null,{"inputs":[],"output":{"name":"result"}}],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[11,"hash","","",148,null],[11,"cmp","","",148,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",148,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"option"}}],[11,"lt","","",148,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"le","","",148,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"gt","","",148,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"ge","","",148,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"clone","","",148,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"eq","","",148,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"ne","","",148,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"fmt","","",148,{"inputs":[{"name":"waitpidflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",148,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"all","","Returns the set containing all flags.",148,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",148,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",148,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",148,{"inputs":[{"name":"c_int"}],"output":{"name":"waitpidflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",148,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",148,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",148,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",148,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",148,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",148,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",148,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",148,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",148,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",148,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",148,{"inputs":[{"name":"waitpidflag"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"not","","Returns the complement of this set of flags.",148,{"inputs":[{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"from_iter","","",148,{"inputs":[{"name":"t"}],"output":{"name":"waitpidflag"}}],[11,"fmt","","",147,{"inputs":[{"name":"waitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",147,{"inputs":[{"name":"waitstatus"}],"output":{"name":"waitstatus"}}],[11,"eq","","",147,{"inputs":[{"name":"waitstatus"},{"name":"waitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",147,{"inputs":[{"name":"waitstatus"},{"name":"waitstatus"}],"output":{"name":"bool"}}],[0,"mman","nix::sys","",null,null],[3,"MapFlags","nix::sys::mman","",null,null],[3,"MsFlags","","",null,null],[3,"ProtFlags","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mmap","","Calls to mmap are inherently unsafe, so they must be made in an unsafe block. Typically\na higher-level abstraction will hide the unsafe interactions with the mmap&#39;d region.",null,null],[5,"munmap","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"name":"result"}}],[5,"shm_unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"hash","","",149,null],[11,"cmp","","",149,{"inputs":[{"name":"mapflags"},{"name":"mapflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",149,{"inputs":[{"name":"mapflags"},{"name":"mapflags"}],"output":{"name":"option"}}],[11,"lt","","",149,{"inputs":[{"name":"mapflags"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"le","","",149,{"inputs":[{"name":"mapflags"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"gt","","",149,{"inputs":[{"name":"mapflags"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"ge","","",149,{"inputs":[{"name":"mapflags"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"clone","","",149,{"inputs":[{"name":"mapflags"}],"output":{"name":"mapflags"}}],[11,"eq","","",149,{"inputs":[{"name":"mapflags"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"mapflags"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"fmt","","",149,{"inputs":[{"name":"mapflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",149,{"inputs":[],"output":{"name":"mapflags"}}],[11,"all","","Returns the set containing all flags.",149,{"inputs":[],"output":{"name":"mapflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",149,{"inputs":[{"name":"mapflags"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",149,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",149,{"inputs":[{"name":"c_int"}],"output":{"name":"mapflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",149,{"inputs":[{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",149,{"inputs":[{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",149,{"inputs":[{"name":"mapflags"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",149,{"inputs":[{"name":"mapflags"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",149,{"inputs":[{"name":"mapflags"},{"name":"mapflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",149,{"inputs":[{"name":"mapflags"},{"name":"mapflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",149,{"inputs":[{"name":"mapflags"},{"name":"mapflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",149,{"inputs":[{"name":"mapflags"},{"name":"mapflags"}],"output":{"name":"mapflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",149,{"inputs":[{"name":"mapflags"},{"name":"mapflags"}],"output":{"name":"mapflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",149,{"inputs":[{"name":"mapflags"},{"name":"mapflags"}],"output":{"name":"mapflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",149,{"inputs":[{"name":"mapflags"},{"name":"mapflags"}],"output":{"name":"mapflags"}}],[11,"not","","Returns the complement of this set of flags.",149,{"inputs":[{"name":"mapflags"}],"output":{"name":"mapflags"}}],[11,"from_iter","","",149,{"inputs":[{"name":"t"}],"output":{"name":"mapflags"}}],[11,"hash","","",150,null],[11,"cmp","","",150,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",150,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"option"}}],[11,"lt","","",150,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"le","","",150,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"gt","","",150,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ge","","",150,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"clone","","",150,{"inputs":[{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"eq","","",150,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"fmt","","",150,{"inputs":[{"name":"msflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",150,{"inputs":[],"output":{"name":"msflags"}}],[11,"all","","Returns the set containing all flags.",150,{"inputs":[],"output":{"name":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",150,{"inputs":[{"name":"msflags"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",150,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",150,{"inputs":[{"name":"c_int"}],"output":{"name":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",150,{"inputs":[{"name":"msflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",150,{"inputs":[{"name":"msflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",150,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",150,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",150,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",150,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",150,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",150,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",150,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",150,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",150,{"inputs":[{"name":"msflags"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"not","","Returns the complement of this set of flags.",150,{"inputs":[{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"from_iter","","",150,{"inputs":[{"name":"t"}],"output":{"name":"msflags"}}],[6,"MmapAdvise","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[11,"hash","","",151,null],[11,"cmp","","",151,{"inputs":[{"name":"protflags"},{"name":"protflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",151,{"inputs":[{"name":"protflags"},{"name":"protflags"}],"output":{"name":"option"}}],[11,"lt","","",151,{"inputs":[{"name":"protflags"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"le","","",151,{"inputs":[{"name":"protflags"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"gt","","",151,{"inputs":[{"name":"protflags"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"ge","","",151,{"inputs":[{"name":"protflags"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"clone","","",151,{"inputs":[{"name":"protflags"}],"output":{"name":"protflags"}}],[11,"eq","","",151,{"inputs":[{"name":"protflags"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"protflags"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"fmt","","",151,{"inputs":[{"name":"protflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",151,{"inputs":[],"output":{"name":"protflags"}}],[11,"all","","Returns the set containing all flags.",151,{"inputs":[],"output":{"name":"protflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",151,{"inputs":[{"name":"protflags"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",151,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",151,{"inputs":[{"name":"c_int"}],"output":{"name":"protflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",151,{"inputs":[{"name":"protflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",151,{"inputs":[{"name":"protflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",151,{"inputs":[{"name":"protflags"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",151,{"inputs":[{"name":"protflags"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",151,{"inputs":[{"name":"protflags"},{"name":"protflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",151,{"inputs":[{"name":"protflags"},{"name":"protflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",151,{"inputs":[{"name":"protflags"},{"name":"protflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",151,{"inputs":[{"name":"protflags"},{"name":"protflags"}],"output":{"name":"protflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",151,{"inputs":[{"name":"protflags"},{"name":"protflags"}],"output":{"name":"protflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",151,{"inputs":[{"name":"protflags"},{"name":"protflags"}],"output":{"name":"protflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",151,{"inputs":[{"name":"protflags"},{"name":"protflags"}],"output":{"name":"protflags"}}],[11,"not","","Returns the complement of this set of flags.",151,{"inputs":[{"name":"protflags"}],"output":{"name":"protflags"}}],[11,"from_iter","","",151,{"inputs":[{"name":"t"}],"output":{"name":"protflags"}}],[0,"uio","nix::sys","",null,null],[3,"IoVec","nix::sys::uio","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"pwrite","","",null,null],[5,"pread","","",null,null],[11,"as_slice","","",152,null],[11,"from_slice","","",152,null],[11,"from_mut_slice","","",152,null],[0,"time","nix::sys","",null,null],[3,"TimeVal","nix::sys::time","",null,null],[12,"tv_sec","","",153,null],[12,"tv_usec","","",153,null],[11,"fmt","","",153,{"inputs":[{"name":"timeval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",153,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",153,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"option"}}],[11,"lt","","",153,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"le","","",153,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"gt","","",153,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"ge","","",153,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"eq","","",153,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"ne","","",153,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"clone","","",153,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"zero","","",153,{"inputs":[],"output":{"name":"timeval"}}],[11,"hours","","",153,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"minutes","","",153,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"seconds","","",153,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"milliseconds","","",153,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"microseconds","","Makes a new `TimeVal` with given number of microseconds.",153,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"num_hours","","",153,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_minutes","","",153,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_seconds","","",153,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","",153,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_microseconds","","",153,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"neg","","",153,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"add","","",153,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"sub","","",153,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"mul","","",153,{"inputs":[{"name":"timeval"},{"name":"i32"}],"output":{"name":"timeval"}}],[11,"div","","",153,{"inputs":[{"name":"timeval"},{"name":"i32"}],"output":{"name":"timeval"}}],[11,"fmt","","",153,{"inputs":[{"name":"timeval"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ptrace","nix::sys","",null,null],[5,"ptrace","nix::sys::ptrace","",null,null],[5,"ptrace_setoptions","","Set options, as with ptrace(PTRACE_SETOPTIONS,...).",null,{"inputs":[{"name":"pid_t"},{"name":"ptraceoptions"}],"output":{"name":"result"}}],[0,"ptrace","","",null,null],[6,"PtraceRequest","nix::sys::ptrace::ptrace","",null,null],[6,"PtraceEvent","","",null,null],[6,"PtraceOptions","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"PTRACE_EVENT_STOP","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[0,"select","nix::sys","",null,null],[3,"FdSet","nix::sys::select","",null,null],[5,"select","","",null,{"inputs":[{"name":"c_int"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[17,"FD_SETSIZE","","",null,null],[11,"clone","","",154,{"inputs":[{"name":"fdset"}],"output":{"name":"fdset"}}],[11,"new","","",154,{"inputs":[],"output":{"name":"fdset"}}],[11,"insert","","",154,{"inputs":[{"name":"fdset"},{"name":"rawfd"}],"output":null}],[11,"remove","","",154,{"inputs":[{"name":"fdset"},{"name":"rawfd"}],"output":null}],[11,"contains","","",154,{"inputs":[{"name":"fdset"},{"name":"rawfd"}],"output":{"name":"bool"}}],[11,"clear","","",154,{"inputs":[{"name":"fdset"}],"output":null}],[0,"quota","nix::sys","",null,null],[5,"quotactl_on","nix::sys::quota","",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"quotafmt"},{"name":"p"}],"output":{"name":"result"}}],[5,"quotactl_off","","",null,{"inputs":[{"name":"quotatype"},{"name":"p"}],"output":{"name":"result"}}],[5,"quotactl_sync","","",null,{"inputs":[{"name":"quotatype"},{"name":"option"}],"output":{"name":"result"}}],[5,"quotactl_get","","",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"c_int"},{"name":"dqblk"}],"output":{"name":"result"}}],[5,"quotactl_set","","",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"c_int"},{"name":"dqblk"}],"output":{"name":"result"}}],[0,"quota","","",null,null],[3,"QuotaCmd","nix::sys::quota::quota","",null,null],[12,"0","","",155,null],[12,"1","","",155,null],[3,"QuotaValidFlags","","",null,null],[3,"Dqblk","","",null,null],[12,"bhardlimit","","",156,null],[12,"bsoftlimit","","",156,null],[12,"curspace","","",156,null],[12,"ihardlimit","","",156,null],[12,"isoftlimit","","",156,null],[12,"curinodes","","",156,null],[12,"btime","","",156,null],[12,"itime","","",156,null],[12,"valid","","",156,null],[6,"QuotaSubCmd","","",null,null],[6,"QuotaType","","",null,null],[6,"QuotaFmt","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[11,"as_int","","",155,{"inputs":[{"name":"quotacmd"}],"output":{"name":"c_int"}}],[11,"hash","","",157,null],[11,"cmp","","",157,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",157,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"option"}}],[11,"lt","","",157,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"le","","",157,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"gt","","",157,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"ge","","",157,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"clone","","",157,{"inputs":[{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"eq","","",157,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"default","","",157,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"fmt","","",157,{"inputs":[{"name":"quotavalidflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",157,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"all","","Returns the set containing all flags.",157,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",157,{"inputs":[{"name":"quotavalidflags"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",157,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",157,{"inputs":[{"name":"u32"}],"output":{"name":"quotavalidflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",157,{"inputs":[{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",157,{"inputs":[{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",157,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",157,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",157,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",157,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",157,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",157,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",157,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",157,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",157,{"inputs":[{"name":"quotavalidflags"},{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"not","","Returns the complement of this set of flags.",157,{"inputs":[{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"from_iter","","",157,{"inputs":[{"name":"t"}],"output":{"name":"quotavalidflags"}}],[11,"clone","","",156,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"fmt","","",156,{"inputs":[{"name":"dqblk"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",156,{"inputs":[],"output":{"name":"dqblk"}}],[0,"statfs","nix::sys","",null,null],[5,"statfs","nix::sys::statfs","",null,{"inputs":[{"name":"p"},{"name":"statfs"}],"output":{"name":"result"}}],[5,"fstatfs","","",null,{"inputs":[{"name":"t"},{"name":"statfs"}],"output":{"name":"result"}}],[0,"vfs","","",null,null],[3,"Statfs","nix::sys::statfs::vfs","",null,null],[12,"f_type","","",158,null],[12,"f_bsize","","",158,null],[12,"f_blocks","","",158,null],[12,"f_bfree","","",158,null],[12,"f_bavail","","",158,null],[12,"f_files","","",158,null],[12,"f_ffree","","",158,null],[12,"f_fsid","","",158,null],[12,"f_namelen","","",158,null],[12,"f_frsize","","",158,null],[12,"f_spare","","",158,null],[0,"hwdep","","",null,null],[6,"FsType","nix::sys::statfs::vfs::hwdep","",null,null],[6,"BlockSize","","",null,null],[6,"NameLen","","",null,null],[6,"FragmentSize","","",null,null],[6,"SwordType","","",null,null],[17,"ADFS_SUPER_MAGIC","nix::sys::statfs::vfs","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"BEFS_SUPER_MAGIC","","",null,null],[17,"BFS_MAGIC","","",null,null],[17,"CIFS_MAGIC_NUMBER","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"COH_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"DEVFS_SUPER_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT_SUPER_MAGIC","","",null,null],[17,"EXT2_OLD_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HFS_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"JFS_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"NTFS_SB_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"ROMFS_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"SYSV2_SUPER_MAGIC","","",null,null],[17,"SYSV4_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"UDF_SUPER_MAGIC","","",null,null],[17,"UFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VXFS_SUPER_MAGIC","","",null,null],[17,"XENIX_SUPER_MAGIC","","",null,null],[17,"XFS_SUPER_MAGIC","","",null,null],[17,"_XIAFS_SUPER_MAGIC","","",null,null],[11,"clone","","",158,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"fmt","","",158,{"inputs":[{"name":"statfs"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"statvfs","nix::sys","FFI for statvfs functions",null,null],[5,"statvfs","nix::sys::statvfs","Fill an existing `Statvfs` object with information about the `path`",null,{"inputs":[{"name":"p"},{"name":"statvfs"}],"output":{"name":"result"}}],[5,"fstatvfs","","Fill an existing `Statvfs` object with information about `fd`",null,{"inputs":[{"name":"t"},{"name":"statvfs"}],"output":{"name":"result"}}],[0,"vfs","","Structs related to the `statvfs` and `fstatvfs` functions",null,null],[3,"FsFlags","nix::sys::statvfs::vfs","Mount Flags",null,null],[3,"Statvfs","","The posix statvfs struct",null,null],[12,"f_bsize","","Filesystem block size. This is the value that will lead to\nmost efficient use of the filesystem",159,null],[12,"f_frsize","","Fragment Size -- actual minimum unit of allocation on this\nfilesystem",159,null],[12,"f_blocks","","Total number of blocks on the filesystem",159,null],[12,"f_bfree","","Number of unused blocks on the filesystem, including those\nreserved for root",159,null],[12,"f_bavail","","Number of blocks available to non-root users",159,null],[12,"f_files","","Total number of inodes available on the filesystem",159,null],[12,"f_ffree","","Number of inodes available on the filesystem",159,null],[12,"f_favail","","Number of inodes available to non-root users",159,null],[12,"f_fsid","","File System ID",159,null],[12,"f_flag","","Mount Flags",159,null],[12,"f_namemax","","Maximum filename length",159,null],[17,"RDONLY","","Read Only",null,null],[17,"NOSUID","","Do not allow the set-uid bits to have an effect",null,null],[17,"NODEV","","Do not interpret character or block-special devices",null,null],[17,"NOEXEC","","Do not allow execution of binaries on the filesystem",null,null],[17,"SYNCHRONOUS","","All IO should be done synchronously",null,null],[17,"MANDLOCK","","Allow mandatory locks on the filesystem",null,null],[17,"WRITE","","",null,null],[17,"APPEND","","",null,null],[17,"IMMUTABLE","","",null,null],[17,"NOATIME","","Do not update access times on files",null,null],[17,"NODIRATIME","","Do not update access times on files",null,null],[17,"RELATIME","","Update access time relative to modify/change time",null,null],[11,"hash","","",160,null],[11,"cmp","","",160,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",160,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"option"}}],[11,"lt","","",160,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"le","","",160,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"gt","","",160,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"ge","","",160,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"clone","","",160,{"inputs":[{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"eq","","",160,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"default","","",160,{"inputs":[],"output":{"name":"fsflags"}}],[11,"fmt","","",160,{"inputs":[{"name":"fsflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",160,{"inputs":[],"output":{"name":"fsflags"}}],[11,"all","","Returns the set containing all flags.",160,{"inputs":[],"output":{"name":"fsflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",160,{"inputs":[{"name":"fsflags"}],"output":{"name":"c_ulong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",160,{"inputs":[{"name":"c_ulong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",160,{"inputs":[{"name":"c_ulong"}],"output":{"name":"fsflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",160,{"inputs":[{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",160,{"inputs":[{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",160,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",160,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",160,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",160,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",160,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",160,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",160,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",160,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",160,{"inputs":[{"name":"fsflags"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"not","","Returns the complement of this set of flags.",160,{"inputs":[{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"from_iter","","",160,{"inputs":[{"name":"t"}],"output":{"name":"fsflags"}}],[11,"clone","","",159,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"fmt","","",159,{"inputs":[{"name":"statvfs"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"for_path","","Create a new `Statvfs` object and fill it with information about\nthe mount that contains `path`",159,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"update_with_path","","Replace information in this struct with information about `path`",159,{"inputs":[{"name":"statvfs"},{"name":"p"}],"output":{"name":"result"}}],[11,"for_fd","","Create a new `Statvfs` object and fill it with information from fd",159,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"update_with_fd","","Replace information in this struct with information about `fd`",159,{"inputs":[{"name":"statvfs"},{"name":"t"}],"output":{"name":"result"}}],[11,"default","","Create a statvfs object initialized to all zeros",159,{"inputs":[],"output":{"name":"self"}}],[0,"unistd","nix","Standard symbolic constants and types",null,null],[4,"Fork","nix::unistd","",null,null],[13,"Parent","","",161,null],[13,"Child","","",161,null],[5,"pivot_root","","",null,{"inputs":[{"name":"p1"},{"name":"p2"}],"output":{"name":"result"}}],[5,"fork","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"getpid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"getppid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"setpgid","","",null,{"inputs":[{"name":"pid_t"},{"name":"pid_t"}],"output":{"name":"result"}}],[5,"dup","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"dup2","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"}],"output":{"name":"result"}}],[5,"dup3","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"oflag"}],"output":{"name":"result"}}],[5,"chdir","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"chown","","",null,{"inputs":[{"name":"p"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"daemon","","",null,{"inputs":[{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[5,"sethostname","","",null,null],[5,"gethostname","","",null,null],[5,"close","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"read","","",null,null],[5,"write","","",null,null],[5,"pipe","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"pipe2","","",null,{"inputs":[{"name":"oflag"}],"output":{"name":"result"}}],[5,"ftruncate","","",null,{"inputs":[{"name":"rawfd"},{"name":"off_t"}],"output":{"name":"result"}}],[5,"isatty","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"chroot","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fsync","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"fdatasync","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"getuid","","",null,{"inputs":[],"output":{"name":"uid_t"}}],[5,"geteuid","","",null,{"inputs":[],"output":{"name":"uid_t"}}],[5,"getgid","","",null,{"inputs":[],"output":{"name":"gid_t"}}],[5,"getegid","","",null,{"inputs":[],"output":{"name":"gid_t"}}],[5,"setuid","","",null,{"inputs":[{"name":"uid_t"}],"output":{"name":"result"}}],[5,"setgid","","",null,{"inputs":[{"name":"gid_t"}],"output":{"name":"result"}}],[11,"clone","","",161,{"inputs":[{"name":"fork"}],"output":{"name":"fork"}}],[11,"is_child","","",161,{"inputs":[{"name":"fork"}],"output":{"name":"bool"}}],[11,"is_parent","","",161,{"inputs":[{"name":"fork"}],"output":{"name":"bool"}}],[6,"Result","nix","",null,null],[8,"NixPath","","",null,null],[10,"len","","",162,{"inputs":[{"name":"nixpath"}],"output":{"name":"usize"}}],[10,"with_nix_path","","",162,{"inputs":[{"name":"nixpath"},{"name":"f"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from_errno","","",1,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"last","","",1,{"inputs":[],"output":{"name":"error"}}],[11,"invalid_argument","","",1,{"inputs":[],"output":{"name":"error"}}],[11,"errno","","",1,{"inputs":[{"name":"error"}],"output":{"name":"errno"}}],[11,"from","","",1,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"description","","",1,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",3,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"len","std::ffi::os_str","",163,{"inputs":[{"name":"osstr"}],"output":{"name":"usize"}}],[11,"with_nix_path","","",163,{"inputs":[{"name":"osstr"},{"name":"f"}],"output":{"name":"result"}}],[11,"len","std::ffi::c_str","",164,{"inputs":[{"name":"cstr"}],"output":{"name":"usize"}}],[11,"with_nix_path","","",164,{"inputs":[{"name":"cstr"},{"name":"f"}],"output":{"name":"result"}}],[11,"len","std::path","",165,{"inputs":[{"name":"path"}],"output":{"name":"usize"}}],[11,"with_nix_path","","",165,{"inputs":[{"name":"path"},{"name":"f"}],"output":{"name":"result"}}],[11,"len","","",166,{"inputs":[{"name":"pathbuf"}],"output":{"name":"usize"}}],[11,"with_nix_path","","",166,{"inputs":[{"name":"pathbuf"},{"name":"f"}],"output":{"name":"result"}}],[11,"len","core::option","",167,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"with_nix_path","","",167,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[14,"ioc!","nix","Encode an ioctl command.",null,null],[14,"io!","","Encode an ioctl command that has no associated data.",null,null],[14,"ior!","","Encode an ioctl command that reads.",null,null],[14,"iow!","","Encode an ioctl command that writes.",null,null],[14,"iorw!","","Encode an ioctl command that both reads and writes.",null,null],[14,"convert_ioctl_res!","","Convert raw ioctl return value to a Nix result",null,null],[14,"ioctl!","","Declare a wrapper function around an ioctl.",null,null]],"paths":[[4,"Errno"],[4,"Error"],[8,"ErrnoSentinel"],[3,"Error"],[3,"flock"],[4,"FcntlArg"],[4,"FlockArg"],[3,"flock"],[3,"SpliceFFlags"],[3,"OFlag"],[3,"FdFlag"],[3,"SealFlag"],[3,"MsFlags"],[3,"MntFlags"],[3,"MqAttr"],[3,"MQ_OFlag"],[3,"FdFlag"],[3,"PollFd"],[3,"EventFlags"],[3,"CloneFlags"],[3,"CpuSet"],[3,"EpollEvent"],[4,"EpollOp"],[3,"EpollEventKind"],[3,"MemFdCreateFlag"],[3,"rlimit64"],[3,"sockaddr_in"],[3,"in_addr"],[3,"cpu_set_t"],[3,"sockaddr_un"],[3,"siginfo_t"],[3,"pthread_mutex_t"],[3,"iovec"],[3,"pthread_mutexattr_t"],[3,"utsname"],[3,"glob64_t"],[3,"ipc_perm"],[3,"sigaction"],[3,"pollfd"],[3,"ip_mreq"],[3,"sockaddr_ll"],[3,"fd_set"],[3,"ifaddrs"],[3,"pthread_attr_t"],[3,"stack_t"],[3,"termios"],[3,"stat64"],[3,"sockaddr_in6"],[3,"addrinfo"],[3,"shmid_ds"],[3,"winsize"],[3,"dirent64"],[3,"FileStat"],[3,"in6_addr"],[3,"sched_param"],[3,"sockaddr_nl"],[3,"tm"],[3,"utimbuf"],[3,"mq_attr"],[3,"epoll_event"],[3,"statvfs"],[3,"timespec"],[3,"sockaddr_storage"],[3,"Dl_info"],[3,"rlimit"],[3,"msghdr"],[3,"ucontext_t"],[3,"timeval"],[3,"dqblk"],[3,"passwd"],[3,"signalfd_siginfo"],[3,"pthread_cond_t"],[3,"hostent"],[3,"ucred"],[3,"fsid_t"],[3,"dirent"],[3,"pthread_rwlock_t"],[3,"glob_t"],[3,"rusage"],[3,"ipv6_mreq"],[3,"sockaddr"],[3,"statfs"],[3,"mcontext_t"],[3,"sigset_t"],[4,"SigHandler"],[3,"SaFlag"],[3,"SigFlag"],[3,"SigSet"],[3,"SigAction"],[3,"UnixAddr"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"NetlinkAddr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"RecvMsg"],[3,"linger"],[4,"AddressFamily"],[4,"SockAddr"],[4,"InetAddr"],[4,"IpAddr"],[4,"SockType"],[4,"ControlMessage"],[4,"SockLevel"],[4,"Shutdown"],[3,"MsgFlags"],[3,"ReuseAddr"],[3,"ReusePort"],[3,"TcpNoDelay"],[3,"Linger"],[3,"IpAddMembership"],[3,"IpDropMembership"],[3,"Ipv6AddMembership"],[3,"Ipv6DropMembership"],[3,"IpMulticastTtl"],[3,"IpMulticastLoop"],[3,"ReceiveTimeout"],[3,"SendTimeout"],[3,"Broadcast"],[3,"OobInline"],[3,"SocketError"],[3,"KeepAlive"],[3,"PeerCredentials"],[3,"TcpKeepIdle"],[3,"RcvBuf"],[3,"SndBuf"],[3,"RcvBufForce"],[3,"SndBufForce"],[3,"SockType"],[3,"AcceptConn"],[8,"GetSockOpt"],[8,"SetSockOpt"],[3,"SockFlag"],[3,"CmsgSpace"],[3,"CmsgIterator"],[3,"ucred"],[3,"SFlag"],[3,"Mode"],[3,"Termios"],[4,"SetArg"],[4,"FlushArg"],[4,"FlowArg"],[3,"InputFlags"],[3,"OutputFlags"],[3,"ControlFlags"],[3,"LocalFlags"],[3,"UtsName"],[4,"WaitStatus"],[3,"WaitPidFlag"],[3,"MapFlags"],[3,"MsFlags"],[3,"ProtFlags"],[3,"IoVec"],[3,"TimeVal"],[3,"FdSet"],[3,"QuotaCmd"],[3,"Dqblk"],[3,"QuotaValidFlags"],[3,"Statfs"],[3,"Statvfs"],[3,"FsFlags"],[4,"Fork"],[8,"NixPath"],[3,"OsStr"],[3,"CStr"],[3,"Path"],[3,"PathBuf"],[4,"Option"]]};
searchIndex["mio"] = {"doc":"A fast, low-level IO library for Rust focusing on non-blocking APIs, event\nnotification, and other useful utilities for building high performance IO\napps.","items":[[11,"new","std::net::ip","Creates a new IPv4 address from four eight-bit octets.",0,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",0,null],[11,"is_unspecified","","Returns true for the special &#39;unspecified&#39; address 0.0.0.0.",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8).",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_private","","Returns true if this is a private address.",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16).",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.\nSee [iana-ipv4-special-registry][ipv4-sr].\n[ipv4-sr]: http://goo.gl/RaZ7lg",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns true if this is a multicast address.",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_broadcast","","Returns true if this is a broadcast address.",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns true if this address is in a range designated for documentation.",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible IPv6 address.",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped IPv6 address.",0,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[3,"Ipv4Addr","mio","Representation of an IPv4 address.",null,null],[3,"Ipv6Addr","","Representation of an IPv6 address.",null,null],[3,"PollOpt","","",null,null],[3,"EventSet","","",null,null],[3,"IoEvent","","",null,null],[12,"kind","","",1,null],[12,"token","","",1,null],[3,"EventLoop","","Single threaded IO event loop.",null,null],[3,"EventLoopConfig","","Configure EventLoop runtime details",null,null],[3,"Sender","","Sends messages to the EventLoop from other threads.",null,null],[3,"Poll","","",null,null],[3,"Events","","",null,null],[3,"Timeout","","",null,null],[3,"TimerError","","",null,null],[3,"Token","","",null,null],[12,"0","","",2,null],[3,"Io","","",null,null],[3,"Selector","","",null,null],[4,"IpAddr","","An IP address, either a IPv4 or IPv6 address.",null,null],[13,"V4","","",3,null],[13,"V6","","",3,null],[4,"NotifyError","","",null,null],[13,"Io","","",4,null],[13,"Full","","",4,null],[13,"Closed","","",4,null],[0,"util","","Utilities for non-blocking IO programs",null,null],[3,"BoundedQueue","mio::util","",null,null],[11,"with_capacity","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"queue"}}],[11,"push","","",5,{"inputs":[{"name":"boundedqueue"},{"name":"t"}],"output":{"name":"result"}}],[11,"pop","","",5,{"inputs":[{"name":"boundedqueue"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"boundedqueue"}],"output":{"name":"queue"}}],[6,"Slab","","",null,null],[11,"cmp","mio","",6,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"eq","","",6,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"edge","","",6,{"inputs":[],"output":{"name":"pollopt"}}],[11,"empty","","",6,{"inputs":[],"output":{"name":"pollopt"}}],[11,"level","","",6,{"inputs":[],"output":{"name":"pollopt"}}],[11,"oneshot","","",6,{"inputs":[],"output":{"name":"pollopt"}}],[11,"all","","",6,{"inputs":[],"output":{"name":"pollopt"}}],[11,"is_edge","","",6,{"inputs":[{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"is_level","","",6,{"inputs":[{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"is_oneshot","","",6,{"inputs":[{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"bits","","",6,{"inputs":[{"name":"pollopt"}],"output":{"name":"usize"}}],[11,"contains","","",6,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"insert","","",6,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":null}],[11,"remove","","",6,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":null}],[11,"bitor","","",6,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"bitxor","","",6,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"bitand","","",6,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"sub","","",6,{"inputs":[{"name":"pollopt"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"not","","",6,{"inputs":[{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"fmt","","",6,{"inputs":[{"name":"pollopt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",7,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"eq","","",7,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"none","","",7,{"inputs":[],"output":{"name":"eventset"}}],[11,"readable","","",7,{"inputs":[],"output":{"name":"eventset"}}],[11,"writable","","",7,{"inputs":[],"output":{"name":"eventset"}}],[11,"error","","",7,{"inputs":[],"output":{"name":"eventset"}}],[11,"hup","","",7,{"inputs":[],"output":{"name":"eventset"}}],[11,"all","","",7,{"inputs":[],"output":{"name":"eventset"}}],[11,"is_readable","","",7,{"inputs":[{"name":"eventset"}],"output":{"name":"bool"}}],[11,"is_writable","","",7,{"inputs":[{"name":"eventset"}],"output":{"name":"bool"}}],[11,"is_error","","",7,{"inputs":[{"name":"eventset"}],"output":{"name":"bool"}}],[11,"is_hup","","",7,{"inputs":[{"name":"eventset"}],"output":{"name":"bool"}}],[11,"insert","","",7,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":null}],[11,"remove","","",7,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":null}],[11,"bits","","",7,{"inputs":[{"name":"eventset"}],"output":{"name":"usize"}}],[11,"contains","","",7,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"bitor","","",7,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"bitxor","","",7,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"bitand","","",7,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"sub","","",7,{"inputs":[{"name":"eventset"},{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"not","","",7,{"inputs":[{"name":"eventset"}],"output":{"name":"eventset"}}],[11,"fmt","","",7,{"inputs":[{"name":"eventset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"ioevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"ioevent"},{"name":"ioevent"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"ioevent"},{"name":"ioevent"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"ioevent"}],"output":{"name":"ioevent"}}],[11,"new","","Create a new IoEvent.",1,{"inputs":[{"name":"eventset"},{"name":"token"}],"output":{"name":"ioevent"}}],[11,"fmt","","",8,{"inputs":[{"name":"eventloopconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"eventloopconfig"}],"output":{"name":"eventloopconfig"}}],[11,"new","","Creates a new configuration for the event loop with all default options\nspecified.",8,{"inputs":[],"output":{"name":"eventloopconfig"}}],[11,"notify_capacity","","Sets the maximum number of messages that can be buffered on the event\nloop&#39;s notification channel before a send will fail.",8,{"inputs":[{"name":"eventloopconfig"},{"name":"usize"}],"output":{"name":"self"}}],[11,"messages_per_tick","","Sets the maximum number of messages that can be processed on any tick of\nthe event loop.",8,{"inputs":[{"name":"eventloopconfig"},{"name":"usize"}],"output":{"name":"self"}}],[11,"timer_tick_ms","","",8,{"inputs":[{"name":"eventloopconfig"},{"name":"u64"}],"output":{"name":"self"}}],[11,"timer_wheel_size","","",8,{"inputs":[{"name":"eventloopconfig"},{"name":"usize"}],"output":{"name":"self"}}],[11,"timer_capacity","","",8,{"inputs":[{"name":"eventloopconfig"},{"name":"usize"}],"output":{"name":"self"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"eventloopconfig"}}],[11,"fmt","","",9,{"inputs":[{"name":"eventloop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Initializes a new event loop using default configuration settings. The\nevent loop will not be running yet.",9,{"inputs":[],"output":{"name":"result"}}],[11,"configured","","",9,{"inputs":[{"name":"eventloopconfig"}],"output":{"name":"result"}}],[11,"channel","","Returns a sender that allows sending messages to the event loop in a\nthread-safe way, waking up the event loop if needed.",9,{"inputs":[{"name":"eventloop"}],"output":{"name":"sender"}}],[11,"timeout_ms","","Schedules a timeout after the requested time interval. When the\nduration has been reached,\n[Handler::timeout](trait.Handler.html#method.timeout) will be invoked\npassing in the supplied token.",9,{"inputs":[{"name":"eventloop"},{"name":"timeout"},{"name":"u64"}],"output":{"name":"timerresult"}}],[11,"clear_timeout","","If the supplied timeout has not been triggered, cancel it such that it\nwill not be triggered in the future.",9,{"inputs":[{"name":"eventloop"},{"name":"timeout"}],"output":{"name":"bool"}}],[11,"shutdown","","Tells the event loop to exit after it is done handling all events in the\ncurrent iteration.",9,{"inputs":[{"name":"eventloop"}],"output":null}],[11,"is_running","","Indicates whether the event loop is currently running. If it&#39;s not it has either\nstopped or is scheduled to stop on the next tick.",9,{"inputs":[{"name":"eventloop"}],"output":{"name":"bool"}}],[11,"register","","Registers an IO handle with the event loop.",9,{"inputs":[{"name":"eventloop"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","Re-Registers an IO handle with the event loop.",9,{"inputs":[{"name":"eventloop"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"run","","Keep spinning the event loop indefinitely, and notify the handler whenever\nany of the registered handles are ready.",9,{"inputs":[{"name":"eventloop"},{"name":"h"}],"output":{"name":"result"}}],[11,"deregister","","Deregisters an IO handle with the event loop.",9,{"inputs":[{"name":"eventloop"},{"name":"e"}],"output":{"name":"result"}}],[11,"run_once","","Spin the event loop once, with a timeout of one second, and notify the\nhandler if any of the registered handles become ready during that\ntime.",9,{"inputs":[{"name":"eventloop"},{"name":"h"},{"name":"option"}],"output":{"name":"result"}}],[11,"drop","","",9,{"inputs":[{"name":"eventloop"}],"output":null}],[11,"clone","","",10,{"inputs":[{"name":"sender"}],"output":{"name":"sender"}}],[11,"fmt","","",10,{"inputs":[{"name":"sender"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","",10,{"inputs":[{"name":"sender"},{"name":"m"}],"output":{"name":"result"}}],[11,"read_to_end","mio::io","Read all bytes until EOF in this source, placing them into `buf`.",11,{"inputs":[{"name":"read"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",11,{"inputs":[{"name":"read"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",11,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Read`.",11,{"inputs":[{"name":"read"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",11,{"inputs":[{"name":"read"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",11,{"inputs":[{"name":"read"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",11,{"inputs":[{"name":"read"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",11,{"inputs":[{"name":"read"},{"name":"u64"}],"output":{"name":"take"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",12,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",12,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Write`.",12,{"inputs":[{"name":"write"}],"output":{"name":"self"}}],[11,"from_str","mio","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"notifyerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"notifyerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"notifyerror"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"notifyerror"}],"output":{"name":"option"}}],[11,"new","","",13,{"inputs":[],"output":{"name":"result"}}],[11,"register","","",13,{"inputs":[{"name":"poll"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",13,{"inputs":[{"name":"poll"},{"name":"e"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",13,{"inputs":[{"name":"poll"},{"name":"e"}],"output":{"name":"result"}}],[11,"poll","","",13,{"inputs":[{"name":"poll"},{"name":"option"}],"output":{"name":"result"}}],[11,"event","","",13,{"inputs":[{"name":"poll"},{"name":"usize"}],"output":{"name":"ioevent"}}],[11,"events","","",13,{"inputs":[{"name":"poll"}],"output":{"name":"events"}}],[11,"fmt","","",13,{"inputs":[{"name":"poll"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",14,{"inputs":[{"name":"events"}],"output":{"name":"option"}}],[11,"fmt","","",15,{"inputs":[{"name":"selector"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",15,{"inputs":[],"output":{"name":"result"}}],[11,"id","","",15,{"inputs":[{"name":"selector"}],"output":{"name":"usize"}}],[11,"select","","Wait for events from the OS",15,{"inputs":[{"name":"selector"},{"name":"events"},{"name":"option"}],"output":{"name":"result"}}],[11,"register","","Register event interests for the given IO handle with the OS",15,{"inputs":[{"name":"selector"},{"name":"rawfd"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","Register event interests for the given IO handle with the OS",15,{"inputs":[{"name":"selector"},{"name":"rawfd"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","Deregister event interests for the given IO handle with the OS",15,{"inputs":[{"name":"selector"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"drop","","",15,{"inputs":[{"name":"selector"}],"output":null}],[11,"fmt","","",16,{"inputs":[{"name":"io"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_raw_fd","","",16,{"inputs":[{"name":"rawfd"}],"output":{"name":"io"}}],[11,"from","","",16,{"inputs":[{"name":"rawfd"}],"output":{"name":"io"}}],[11,"from_raw_fd","","",16,{"inputs":[{"name":"rawfd"}],"output":{"name":"io"}}],[11,"as_raw_fd","","",16,{"inputs":[{"name":"io"}],"output":{"name":"rawfd"}}],[11,"register","","",16,{"inputs":[{"name":"io"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",16,{"inputs":[{"name":"io"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",16,{"inputs":[{"name":"io"},{"name":"selector"}],"output":{"name":"result"}}],[11,"read","","",16,null],[11,"write","","",16,null],[11,"flush","","",16,{"inputs":[{"name":"io"}],"output":{"name":"result"}}],[11,"drop","","",16,{"inputs":[{"name":"io"}],"output":null}],[11,"from_errno","nix","",17,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"last","","",17,{"inputs":[],"output":{"name":"error"}}],[11,"invalid_argument","","",17,{"inputs":[],"output":{"name":"error"}}],[11,"errno","","",17,{"inputs":[{"name":"error"}],"output":{"name":"errno"}}],[11,"fmt","","",17,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",17,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"from","","",17,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"clone","","",17,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",17,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"get","nix::sys::socket::sockopt","",18,{"inputs":[{"name":"reuseaddr"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set","","",18,{"inputs":[{"name":"reuseaddr"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"reuseaddr"}],"output":{"name":"reuseaddr"}}],[11,"fmt","","",18,{"inputs":[{"name":"reuseaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",19,{"inputs":[{"name":"reuseport"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set","","",19,{"inputs":[{"name":"reuseport"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"reuseport"}],"output":{"name":"reuseport"}}],[11,"fmt","","",19,{"inputs":[{"name":"reuseport"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",20,{"inputs":[{"name":"tcpnodelay"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set","","",20,{"inputs":[{"name":"tcpnodelay"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"tcpnodelay"}],"output":{"name":"tcpnodelay"}}],[11,"fmt","","",20,{"inputs":[{"name":"tcpnodelay"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",21,{"inputs":[{"name":"linger"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set","","",21,{"inputs":[{"name":"linger"},{"name":"i32"},{"name":"linger"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"linger"}],"output":{"name":"linger"}}],[11,"fmt","","",21,{"inputs":[{"name":"linger"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",22,{"inputs":[{"name":"ipaddmembership"},{"name":"i32"},{"name":"ip_mreq"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"ipaddmembership"}],"output":{"name":"ipaddmembership"}}],[11,"fmt","","",22,{"inputs":[{"name":"ipaddmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",23,{"inputs":[{"name":"ipdropmembership"},{"name":"i32"},{"name":"ip_mreq"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"ipdropmembership"}],"output":{"name":"ipdropmembership"}}],[11,"fmt","","",23,{"inputs":[{"name":"ipdropmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",24,{"inputs":[{"name":"ipv6addmembership"},{"name":"i32"},{"name":"ipv6_mreq"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"ipv6addmembership"}],"output":{"name":"ipv6addmembership"}}],[11,"fmt","","",24,{"inputs":[{"name":"ipv6addmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",25,{"inputs":[{"name":"ipv6dropmembership"},{"name":"i32"},{"name":"ipv6_mreq"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"ipv6dropmembership"}],"output":{"name":"ipv6dropmembership"}}],[11,"fmt","","",25,{"inputs":[{"name":"ipv6dropmembership"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",26,{"inputs":[{"name":"ipmulticastttl"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set","","",26,{"inputs":[{"name":"ipmulticastttl"},{"name":"i32"},{"name":"u8"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"ipmulticastttl"}],"output":{"name":"ipmulticastttl"}}],[11,"fmt","","",26,{"inputs":[{"name":"ipmulticastttl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",27,{"inputs":[{"name":"ipmulticastloop"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set","","",27,{"inputs":[{"name":"ipmulticastloop"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"ipmulticastloop"}],"output":{"name":"ipmulticastloop"}}],[11,"fmt","","",27,{"inputs":[{"name":"ipmulticastloop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",28,{"inputs":[{"name":"receivetimeout"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set","","",28,{"inputs":[{"name":"receivetimeout"},{"name":"i32"},{"name":"timeval"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"receivetimeout"}],"output":{"name":"receivetimeout"}}],[11,"fmt","","",28,{"inputs":[{"name":"receivetimeout"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",29,{"inputs":[{"name":"sendtimeout"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set","","",29,{"inputs":[{"name":"sendtimeout"},{"name":"i32"},{"name":"timeval"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"sendtimeout"}],"output":{"name":"sendtimeout"}}],[11,"fmt","","",29,{"inputs":[{"name":"sendtimeout"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",30,{"inputs":[{"name":"broadcast"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set","","",30,{"inputs":[{"name":"broadcast"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"broadcast"}],"output":{"name":"broadcast"}}],[11,"fmt","","",30,{"inputs":[{"name":"broadcast"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",31,{"inputs":[{"name":"oobinline"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set","","",31,{"inputs":[{"name":"oobinline"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"oobinline"}],"output":{"name":"oobinline"}}],[11,"fmt","","",31,{"inputs":[{"name":"oobinline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",32,{"inputs":[{"name":"socketerror"},{"name":"i32"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"socketerror"}],"output":{"name":"socketerror"}}],[11,"fmt","","",32,{"inputs":[{"name":"socketerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",33,{"inputs":[{"name":"keepalive"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set","","",33,{"inputs":[{"name":"keepalive"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"keepalive"}],"output":{"name":"keepalive"}}],[11,"fmt","","",33,{"inputs":[{"name":"keepalive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",34,{"inputs":[{"name":"tcpkeepidle"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set","","",34,{"inputs":[{"name":"tcpkeepidle"},{"name":"i32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"tcpkeepidle"}],"output":{"name":"tcpkeepidle"}}],[11,"fmt","","",34,{"inputs":[{"name":"tcpkeepidle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","nix::sys::socket::addr","",35,{"inputs":[{"name":"addressfamily"}],"output":{"name":"addressfamily"}}],[11,"eq","","",35,{"inputs":[{"name":"addressfamily"},{"name":"addressfamily"}],"output":{"name":"bool"}}],[11,"fmt","","",35,{"inputs":[{"name":"addressfamily"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",35,null],[11,"fmt","","",36,{"inputs":[{"name":"sockaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"hash","","",36,null],[11,"eq","","",36,{"inputs":[{"name":"sockaddr"},{"name":"sockaddr"}],"output":{"name":"bool"}}],[11,"new_inet","","",36,{"inputs":[{"name":"inetaddr"}],"output":{"name":"sockaddr"}}],[11,"new_unix","","",36,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"family","","",36,{"inputs":[{"name":"sockaddr"}],"output":{"name":"addressfamily"}}],[11,"to_str","","",36,{"inputs":[{"name":"sockaddr"}],"output":{"name":"string"}}],[11,"as_ffi_pair","","",36,null],[11,"clone","nix::sys::socket","",37,{"inputs":[{"name":"socktype"}],"output":{"name":"socktype"}}],[11,"eq","","",37,{"inputs":[{"name":"socktype"},{"name":"socktype"}],"output":{"name":"bool"}}],[11,"fmt","","",37,{"inputs":[{"name":"socktype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","nix::sys::socket::addr","",38,{"inputs":[{"name":"inetaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"inetaddr"}],"output":{"name":"inetaddr"}}],[11,"hash","","",38,null],[11,"eq","","",38,{"inputs":[{"name":"inetaddr"},{"name":"inetaddr"}],"output":{"name":"bool"}}],[11,"from_std","","",38,{"inputs":[{"name":"socketaddr"}],"output":{"name":"inetaddr"}}],[11,"new","","",38,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"inetaddr"}}],[11,"ip","","Gets the IP address associated with this socket address.",38,{"inputs":[{"name":"inetaddr"}],"output":{"name":"ipaddr"}}],[11,"port","","Gets the port number associated with this socket address",38,{"inputs":[{"name":"inetaddr"}],"output":{"name":"u16"}}],[11,"to_std","","",38,{"inputs":[{"name":"inetaddr"}],"output":{"name":"socketaddr"}}],[11,"to_str","","",38,{"inputs":[{"name":"inetaddr"}],"output":{"name":"string"}}],[11,"fmt","","",39,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"hash","","",39,null],[11,"eq","","",39,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"new","","",39,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"from_std","","",39,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"any","","",39,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"octets","","",39,null],[11,"to_std","","",39,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"fmt","","",40,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",40,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"from_std","","",40,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Return the eight 16-bit segments that make up this address",40,null],[11,"to_std","","",40,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"clone","","",40,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"new","nix::sys::socket","Create a CmsgSpace&lt;T&gt;. The structure is used only for space, so\nthe fields are uninitialized.",41,{"inputs":[],"output":{"name":"cmsgspace"}}],[11,"new","nix::sys::socket::multicast","",42,{"inputs":[{"name":"ipv4addr"},{"name":"option"}],"output":{"name":"ip_mreq"}}],[11,"fmt","","",42,{"inputs":[{"name":"ip_mreq"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"new","","",43,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","nix::sys::socket","",44,{"inputs":[{"name":"linger"}],"output":{"name":"linger"}}],[11,"fmt","","",44,{"inputs":[{"name":"linger"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"shutdown"}],"output":{"name":"shutdown"}}],[11,"eq","","",45,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"fmt","","",45,{"inputs":[{"name":"shutdown"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","nix::sys::time","",46,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",46,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"option"}}],[11,"lt","","",46,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"le","","",46,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"gt","","",46,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"ge","","",46,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"cmp","","",46,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"ordering"}}],[11,"fmt","","",46,{"inputs":[{"name":"timeval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",46,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"neg","","",46,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"zero","","",46,{"inputs":[],"output":{"name":"timeval"}}],[11,"hours","","",46,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"minutes","","",46,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"seconds","","",46,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"milliseconds","","",46,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"microseconds","","Makes a new `TimeVal` with given number of microseconds.",46,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"num_hours","","",46,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_minutes","","",46,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_seconds","","",46,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","",46,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"num_microseconds","","",46,{"inputs":[{"name":"timeval"}],"output":{"name":"i64"}}],[11,"clone","","",46,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"fmt","","",46,{"inputs":[{"name":"timeval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"div","","",46,{"inputs":[{"name":"timeval"},{"name":"i32"}],"output":{"name":"timeval"}}],[11,"mul","","",46,{"inputs":[{"name":"timeval"},{"name":"i32"}],"output":{"name":"timeval"}}],[11,"sub","","",46,{"inputs":[{"name":"timeval"},{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"from_mut_slice","nix::sys::uio","",47,null],[11,"from_slice","","",47,null],[11,"as_slice","","",47,null],[11,"clone","mio","",48,{"inputs":[{"name":"timeout"}],"output":{"name":"timeout"}}],[11,"fmt","","",49,{"inputs":[{"name":"timererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"cmp","","",2,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"token"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"token"}],"output":{"name":"token"}}],[11,"as_usize","","",2,{"inputs":[{"name":"token"}],"output":{"name":"usize"}}],[11,"from_usize","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"token"}}],[11,"as_usize","","",2,{"inputs":[{"name":"token"}],"output":{"name":"usize"}}],[0,"tcp","","",null,null],[4,"Shutdown","mio::tcp","Possible values which can be passed to the `shutdown` method of `TcpStream`.",null,null],[13,"Read","","Indicates that the reading portion of this stream/socket should be shut\ndown. All currently blocked and future reads will return `Ok(0)`.",50,null],[13,"Write","","Indicates that the writing portion of this stream/socket should be shut\ndown. All currently blocked and future writes will return an error.",50,null],[13,"Both","","Shut down both the reading and writing portions of this stream.",50,null],[3,"TcpStream","","",null,null],[3,"TcpListener","","",null,null],[11,"fmt","","",51,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","Create a new TCP stream an issue a non-blocking connect to the specified\naddress.",51,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given\n`std::net::TcpBuilder`, connecting it to the address specified.",51,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"peer_addr","","",51,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"local_addr","","",51,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"try_clone","","",51,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","",51,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_nodelay","","",51,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_keepalive","","",51,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"take_socket_error","","",51,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",51,null],[11,"write","","",51,null],[11,"flush","","",51,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"register","","",51,{"inputs":[{"name":"tcpstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",51,{"inputs":[{"name":"tcpstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",51,{"inputs":[{"name":"tcpstream"},{"name":"selector"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Convenience method to bind a new TCP listener to the specified address\nto receive new connections.",52,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"from_listener","","Creates a new `TcpListener` from an instance of a\n`std::net::TcpListener` type.",52,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new `TcpStream`.",52,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"local_addr","","",52,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","",52,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"take_socket_error","","",52,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"register","","",52,{"inputs":[{"name":"tcplistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",52,{"inputs":[{"name":"tcplistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",52,{"inputs":[{"name":"tcplistener"},{"name":"selector"}],"output":{"name":"result"}}],[11,"accept","","",52,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",51,{"inputs":[{"name":"tcpstream"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",51,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcpstream"}}],[11,"as_raw_fd","","",52,{"inputs":[{"name":"tcplistener"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",52,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcplistener"}}],[0,"udp","mio","",null,null],[3,"UdpSocket","mio::udp","",null,null],[11,"fmt","","",53,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"v4","","Returns a new, unbound, non-blocking, IPv4 UDP socket",53,{"inputs":[],"output":{"name":"result"}}],[11,"v6","","Returns a new, unbound, non-blocking, IPv6 UDP socket",53,{"inputs":[],"output":{"name":"result"}}],[11,"bound","","",53,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"bind","","",53,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"local_addr","","",53,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","",53,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"send_to","","",53,null],[11,"recv_from","","",53,null],[11,"set_broadcast","","",53,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_multicast_loop","","",53,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"join_multicast","","",53,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"leave_multicast","","",53,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_multicast_time_to_live","","",53,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"register","","",53,{"inputs":[{"name":"udpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",53,{"inputs":[{"name":"udpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",53,{"inputs":[{"name":"udpsocket"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",53,{"inputs":[{"name":"udpsocket"}],"output":{"name":"udpsocket"}}],[11,"as_raw_fd","","",53,{"inputs":[{"name":"udpsocket"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",53,{"inputs":[{"name":"rawfd"}],"output":{"name":"udpsocket"}}],[0,"unix","mio","",null,null],[3,"PipeReader","mio::unix","",null,null],[3,"PipeWriter","","",null,null],[3,"UnixListener","","",null,null],[3,"UnixSocket","","",null,null],[3,"UnixStream","","",null,null],[3,"EventedFd","","",null,null],[12,"0","","",54,null],[5,"pipe","","",null,{"inputs":[],"output":{"name":"result"}}],[0,"prelude","mio","",null,null],[3,"EventLoop","mio::prelude","Single threaded IO event loop.",null,null],[8,"TryRead","","",null,null],[11,"try_read_buf","","",55,{"inputs":[{"name":"tryread"},{"name":"b"}],"output":{"name":"result"}}],[10,"try_read","","",55,null],[8,"TryWrite","","",null,null],[11,"try_write_buf","","",56,{"inputs":[{"name":"trywrite"},{"name":"b"}],"output":{"name":"result"}}],[10,"try_write","","",56,null],[6,"TimerResult","mio","",null,null],[8,"Handler","","",null,null],[16,"Timeout","","",57,null],[16,"Message","","",57,null],[11,"ready","","Invoked when the socket represented by `token` is ready to be operated\non. `events` indicates the specific operations that are\nready to be performed.",57,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"token"},{"name":"eventset"}],"output":null}],[11,"notify","","Invoked when a message has been received via the event loop&#39;s channel.",57,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"message"}],"output":null}],[11,"timeout","","Invoked when a timeout has completed.",57,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"timeout"}],"output":null}],[11,"interrupted","","Invoked when `EventLoop` has been interrupted by a signal interrupt.",57,{"inputs":[{"name":"handler"},{"name":"eventloop"}],"output":null}],[11,"tick","","Invoked at the end of an event loop tick.",57,{"inputs":[{"name":"handler"},{"name":"eventloop"}],"output":null}],[8,"TryRead","","",null,null],[11,"try_read_buf","","",55,{"inputs":[{"name":"tryread"},{"name":"b"}],"output":{"name":"result"}}],[10,"try_read","","",55,null],[8,"TryWrite","","",null,null],[11,"try_write_buf","","",56,{"inputs":[{"name":"trywrite"},{"name":"b"}],"output":{"name":"result"}}],[10,"try_write","","",56,null],[8,"Evented","","A value that may be registered with an `EventLoop`",null,null],[8,"TryAccept","","",null,null],[16,"Output","","",58,null],[10,"accept","","",58,{"inputs":[{"name":"tryaccept"}],"output":{"name":"result"}}],[11,"ready","","Invoked when the socket represented by `token` is ready to be operated\non. `events` indicates the specific operations that are\nready to be performed.",57,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"token"},{"name":"eventset"}],"output":null}],[11,"notify","","Invoked when a message has been received via the event loop&#39;s channel.",57,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"message"}],"output":null}],[11,"timeout","","Invoked when a timeout has completed.",57,{"inputs":[{"name":"handler"},{"name":"eventloop"},{"name":"timeout"}],"output":null}],[11,"interrupted","","Invoked when `EventLoop` has been interrupted by a signal interrupt.",57,{"inputs":[{"name":"handler"},{"name":"eventloop"}],"output":null}],[11,"tick","","Invoked at the end of an event loop tick.",57,{"inputs":[{"name":"handler"},{"name":"eventloop"}],"output":null}],[11,"try_read_buf","mio::prelude","",55,{"inputs":[{"name":"tryread"},{"name":"b"}],"output":{"name":"result"}}],[11,"try_write_buf","","",56,{"inputs":[{"name":"trywrite"},{"name":"b"}],"output":{"name":"result"}}],[11,"fmt","mio::tcp","",51,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","Create a new TCP stream an issue a non-blocking connect to the specified\naddress.",51,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given\n`std::net::TcpBuilder`, connecting it to the address specified.",51,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"peer_addr","","",51,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"local_addr","","",51,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"try_clone","","",51,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","",51,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_nodelay","","",51,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_keepalive","","",51,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"take_socket_error","","",51,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",51,null],[11,"write","","",51,null],[11,"flush","","",51,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"register","","",51,{"inputs":[{"name":"tcpstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",51,{"inputs":[{"name":"tcpstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",51,{"inputs":[{"name":"tcpstream"},{"name":"selector"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Convenience method to bind a new TCP listener to the specified address\nto receive new connections.",52,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"from_listener","","Creates a new `TcpListener` from an instance of a\n`std::net::TcpListener` type.",52,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new `TcpStream`.",52,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"local_addr","","",52,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","",52,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"take_socket_error","","",52,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"register","","",52,{"inputs":[{"name":"tcplistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",52,{"inputs":[{"name":"tcplistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",52,{"inputs":[{"name":"tcplistener"},{"name":"selector"}],"output":{"name":"result"}}],[11,"accept","","",52,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",51,{"inputs":[{"name":"tcpstream"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",51,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcpstream"}}],[11,"as_raw_fd","","",52,{"inputs":[{"name":"tcplistener"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",52,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcplistener"}}],[11,"fmt","mio::udp","",53,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"v4","","Returns a new, unbound, non-blocking, IPv4 UDP socket",53,{"inputs":[],"output":{"name":"result"}}],[11,"v6","","Returns a new, unbound, non-blocking, IPv6 UDP socket",53,{"inputs":[],"output":{"name":"result"}}],[11,"bound","","",53,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"bind","","",53,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"local_addr","","",53,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","",53,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"send_to","","",53,null],[11,"recv_from","","",53,null],[11,"set_broadcast","","",53,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_multicast_loop","","",53,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"join_multicast","","",53,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"leave_multicast","","",53,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_multicast_time_to_live","","",53,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"register","","",53,{"inputs":[{"name":"udpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",53,{"inputs":[{"name":"udpsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",53,{"inputs":[{"name":"udpsocket"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",53,{"inputs":[{"name":"udpsocket"}],"output":{"name":"udpsocket"}}],[11,"as_raw_fd","","",53,{"inputs":[{"name":"udpsocket"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",53,{"inputs":[{"name":"rawfd"}],"output":{"name":"udpsocket"}}],[11,"fmt","mio::unix","",59,{"inputs":[{"name":"unixsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"stream","","Returns a new, unbound, non-blocking Unix domain socket",59,{"inputs":[],"output":{"name":"result"}}],[11,"connect","","Connect the socket to the specified address",59,{"inputs":[{"name":"unixsocket"},{"name":"p"}],"output":{"name":"result"}}],[11,"bind","","Bind the socket to the specified address",59,{"inputs":[{"name":"unixsocket"},{"name":"p"}],"output":{"name":"result"}}],[11,"listen","","Listen for incoming requests",59,{"inputs":[{"name":"unixsocket"},{"name":"usize"}],"output":{"name":"result"}}],[11,"try_clone","","",59,{"inputs":[{"name":"unixsocket"}],"output":{"name":"result"}}],[11,"register","","",59,{"inputs":[{"name":"unixsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",59,{"inputs":[{"name":"unixsocket"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",59,{"inputs":[{"name":"unixsocket"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",59,{"inputs":[{"name":"unixsocket"}],"output":{"name":"unixsocket"}}],[11,"fmt","","",60,{"inputs":[{"name":"unixstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","",60,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"try_clone","","",60,{"inputs":[{"name":"unixstream"}],"output":{"name":"result"}}],[11,"read_recv_fd","","",60,null],[11,"try_read_recv_fd","","",60,null],[11,"try_read_buf_recv_fd","","",60,{"inputs":[{"name":"unixstream"},{"name":"b"}],"output":{"name":"result"}}],[11,"write_send_fd","","",60,null],[11,"try_write_send_fd","","",60,null],[11,"try_write_buf_send_fd","","",60,{"inputs":[{"name":"unixstream"},{"name":"b"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"read","","",60,null],[11,"write","","",60,null],[11,"flush","","",60,{"inputs":[{"name":"unixstream"}],"output":{"name":"result"}}],[11,"register","","",60,{"inputs":[{"name":"unixstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",60,{"inputs":[{"name":"unixstream"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",60,{"inputs":[{"name":"unixstream"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",60,{"inputs":[{"name":"unixsocket"}],"output":{"name":"unixstream"}}],[11,"fmt","","",61,{"inputs":[{"name":"unixlistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",61,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"accept","","",61,{"inputs":[{"name":"unixlistener"}],"output":{"name":"result"}}],[11,"try_clone","","",61,{"inputs":[{"name":"unixlistener"}],"output":{"name":"result"}}],[11,"register","","",61,{"inputs":[{"name":"unixlistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",61,{"inputs":[{"name":"unixlistener"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",61,{"inputs":[{"name":"unixlistener"},{"name":"selector"}],"output":{"name":"result"}}],[11,"accept","","",61,{"inputs":[{"name":"unixlistener"}],"output":{"name":"result"}}],[11,"from","","",61,{"inputs":[{"name":"unixsocket"}],"output":{"name":"unixlistener"}}],[11,"fmt","","",62,{"inputs":[{"name":"pipereader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",62,null],[11,"register","","",62,{"inputs":[{"name":"pipereader"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",62,{"inputs":[{"name":"pipereader"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",62,{"inputs":[{"name":"pipereader"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",62,{"inputs":[{"name":"io"}],"output":{"name":"pipereader"}}],[11,"fmt","","",63,{"inputs":[{"name":"pipewriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",63,null],[11,"flush","","",63,{"inputs":[{"name":"pipewriter"}],"output":{"name":"result"}}],[11,"register","","",63,{"inputs":[{"name":"pipewriter"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",63,{"inputs":[{"name":"pipewriter"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",63,{"inputs":[{"name":"pipewriter"},{"name":"selector"}],"output":{"name":"result"}}],[11,"from","","",63,{"inputs":[{"name":"io"}],"output":{"name":"pipewriter"}}],[11,"as_raw_fd","","",59,{"inputs":[{"name":"unixsocket"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",59,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixsocket"}}],[11,"as_raw_fd","","",60,{"inputs":[{"name":"unixstream"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",60,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixstream"}}],[11,"as_raw_fd","","",61,{"inputs":[{"name":"unixlistener"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",61,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixlistener"}}],[11,"as_raw_fd","","",62,{"inputs":[{"name":"pipereader"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",62,{"inputs":[{"name":"rawfd"}],"output":{"name":"pipereader"}}],[11,"as_raw_fd","","",63,{"inputs":[{"name":"pipewriter"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",63,{"inputs":[{"name":"rawfd"}],"output":{"name":"pipewriter"}}],[11,"fmt","","",54,{"inputs":[{"name":"eventedfd"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"register","","",54,{"inputs":[{"name":"eventedfd"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",54,{"inputs":[{"name":"eventedfd"},{"name":"selector"},{"name":"token"},{"name":"eventset"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",54,{"inputs":[{"name":"eventedfd"},{"name":"selector"}],"output":{"name":"result"}}]],"paths":[[3,"Ipv4Addr"],[3,"IoEvent"],[3,"Token"],[4,"IpAddr"],[4,"NotifyError"],[3,"BoundedQueue"],[3,"PollOpt"],[3,"EventSet"],[3,"EventLoopConfig"],[3,"EventLoop"],[3,"Sender"],[8,"Read"],[8,"Write"],[3,"Poll"],[3,"Events"],[3,"Selector"],[3,"Io"],[4,"Error"],[3,"ReuseAddr"],[3,"ReusePort"],[3,"TcpNoDelay"],[3,"Linger"],[3,"IpAddMembership"],[3,"IpDropMembership"],[3,"Ipv6AddMembership"],[3,"Ipv6DropMembership"],[3,"IpMulticastTtl"],[3,"IpMulticastLoop"],[3,"ReceiveTimeout"],[3,"SendTimeout"],[3,"Broadcast"],[3,"OobInline"],[3,"SocketError"],[3,"KeepAlive"],[3,"TcpKeepIdle"],[4,"AddressFamily"],[4,"SockAddr"],[4,"SockType"],[4,"InetAddr"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"CmsgSpace"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"linger"],[4,"Shutdown"],[3,"TimeVal"],[3,"IoVec"],[3,"Timeout"],[3,"TimerError"],[4,"Shutdown"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"EventedFd"],[8,"TryRead"],[8,"TryWrite"],[8,"Handler"],[8,"TryAccept"],[3,"UnixSocket"],[3,"UnixStream"],[3,"UnixListener"],[3,"PipeReader"],[3,"PipeWriter"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library\nimplementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where\nnanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month,\nday, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time\nvalue, including any adjustment for Daylight Saving Time. This is the\nnumber of seconds east of UTC. For example, for U.S. Pacific Daylight\nTime, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10&lt;sup&gt;9&lt;/sup&gt; - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"duration"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"duration"}],"output":{"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"outofrangeerror"}],"output":{"name":"outofrangeerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"outofrangeerror"}],"output":{"name":"str"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"timespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",6,{"inputs":[{"name":"precisetime"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"fmt","","",7,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"tm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"tm"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"tm"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"clone","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["miow"] = {"doc":"","items":[],"paths":[]};
searchIndex["net2"] = {"doc":"Extensions to `std::net` networking types.","items":[[3,"TcpBuilder","net2","An &quot;in progress&quot; TCP socket which has not yet been connected or listened.",null,null],[3,"UdpBuilder","","An &quot;in progress&quot; UDP socket which has not yet been connected.",null,null],[11,"new_v4","","Constructs a new TcpBuilder with the `AF_INET` domain, the `SOCK_STREAM`\ntype, and with a protocol argument of 0.",0,{"inputs":[],"output":{"name":"result"}}],[11,"new_v6","","Constructs a new TcpBuilder with the `AF_INET6` domain, the `SOCK_STREAM`\ntype, and with a protocol argument of 0.",0,{"inputs":[],"output":{"name":"result"}}],[11,"bind","","Binds this socket to the specified address.",0,{"inputs":[{"name":"tcpbuilder"},{"name":"t"}],"output":{"name":"result"}}],[11,"listen","","Mark a socket as ready to accept incoming connection requests using\naccept()",0,{"inputs":[{"name":"tcpbuilder"},{"name":"i32"}],"output":{"name":"result"}}],[11,"connect","","Initiate a connection on this socket to the specified address.",0,{"inputs":[{"name":"tcpbuilder"},{"name":"t"}],"output":{"name":"result"}}],[11,"to_tcp_stream","","Converts this builder into a `TcpStream`",0,{"inputs":[{"name":"tcpbuilder"}],"output":{"name":"result"}}],[11,"to_tcp_listener","","Converts this builder into a `TcpListener`",0,{"inputs":[{"name":"tcpbuilder"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"tcpbuilder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_v4","","Constructs a new UdpBuilder with the `AF_INET` domain, the `SOCK_DGRAM`\ntype, and with a protocol argument of 0.",1,{"inputs":[],"output":{"name":"result"}}],[11,"new_v6","","Constructs a new UdpBuilder with the `AF_INET6` domain, the `SOCK_DGRAM`\ntype, and with a protocol argument of 0.",1,{"inputs":[],"output":{"name":"result"}}],[11,"bind","","Binds this socket to the specified address.",1,{"inputs":[{"name":"udpbuilder"},{"name":"t"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"udpbuilder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set_nodelay","std::net::tcp","",2,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"nodelay","","",2,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_keepalive","","",2,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"keepalive","","",2,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_keepalive_ms","","",2,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"keepalive_ms","","",2,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_read_timeout_ms","","",2,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout_ms","","",2,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_write_timeout_ms","","",2,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"write_timeout_ms","","",2,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",2,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",2,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",2,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"write_timeout","","",2,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_ttl","","",2,{"inputs":[{"name":"tcpstream"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","",2,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_only_v6","","",2,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","",2,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"connect","","",2,{"inputs":[{"name":"tcpstream"},{"name":"t"}],"output":{"name":"result"}}],[11,"take_error","","",2,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_nonblocking","","",2,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_broadcast","std::net::udp","",3,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"broadcast","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_multicast_loop_v4","","",3,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v4","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_multicast_ttl_v4","","",3,{"inputs":[{"name":"udpsocket"},{"name":"u32"}],"output":{"name":"result"}}],[11,"multicast_ttl_v4","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_multicast_loop_v6","","",3,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v6","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_ttl","","",3,{"inputs":[{"name":"udpsocket"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_only_v6","","",3,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"join_multicast_v4","","",3,{"inputs":[{"name":"udpsocket"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"join_multicast_v6","","",3,{"inputs":[{"name":"udpsocket"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"leave_multicast_v4","","",3,{"inputs":[{"name":"udpsocket"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"leave_multicast_v6","","",3,{"inputs":[{"name":"udpsocket"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"set_read_timeout_ms","","",3,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout_ms","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_write_timeout_ms","","",3,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"write_timeout_ms","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",3,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",3,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"write_timeout","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"take_error","","",3,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"connect","","",3,{"inputs":[{"name":"udpsocket"},{"name":"a"}],"output":{"name":"result"}}],[11,"send","","",3,null],[11,"recv","","",3,null],[11,"set_nonblocking","","",3,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_ttl","std::net::tcp","",4,{"inputs":[{"name":"tcplistener"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","",4,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"set_only_v6","","",4,{"inputs":[{"name":"tcplistener"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","",4,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"take_error","","",4,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"set_nonblocking","","",4,{"inputs":[{"name":"tcplistener"},{"name":"bool"}],"output":{"name":"result"}}],[11,"ttl","net2","Sets the value for the `IP_TTL` option on this socket.",0,{"inputs":[{"name":"tcpbuilder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",0,{"inputs":[{"name":"tcpbuilder"},{"name":"bool"}],"output":{"name":"result"}}],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",0,{"inputs":[{"name":"tcpbuilder"},{"name":"bool"}],"output":{"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",0,{"inputs":[{"name":"tcpbuilder"}],"output":{"name":"result"}}],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",1,{"inputs":[{"name":"udpbuilder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",1,{"inputs":[{"name":"udpbuilder"},{"name":"bool"}],"output":{"name":"result"}}],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",1,{"inputs":[{"name":"udpbuilder"},{"name":"bool"}],"output":{"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",1,{"inputs":[{"name":"udpbuilder"}],"output":{"name":"result"}}],[11,"from_raw_fd","","",0,{"inputs":[{"name":"c_int"}],"output":{"name":"tcpbuilder"}}],[11,"as_raw_fd","","",0,{"inputs":[{"name":"tcpbuilder"}],"output":{"name":"c_int"}}],[11,"from_raw_fd","","",1,{"inputs":[{"name":"c_int"}],"output":{"name":"udpbuilder"}}],[11,"as_raw_fd","","",1,{"inputs":[{"name":"udpbuilder"}],"output":{"name":"c_int"}}],[0,"unix","","Unix-specific extensions to the `std::net` types.",null,null],[8,"UnixTcpBuilderExt","net2::unix","Unix-specific extensions for the `TcpBuilder` type in this library.",null,null],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",5,{"inputs":[{"name":"unixtcpbuilderext"},{"name":"bool"}],"output":{"name":"result"}}],[8,"UnixUdpBuilderExt","","Unix-specific extensions for the `UdpBuilder` type in this library.",null,null],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",6,{"inputs":[{"name":"unixudpbuilderext"},{"name":"bool"}],"output":{"name":"result"}}],[11,"reuse_port","net2","",0,{"inputs":[{"name":"tcpbuilder"},{"name":"bool"}],"output":{"name":"result"}}],[11,"reuse_port","","",1,{"inputs":[{"name":"udpbuilder"},{"name":"bool"}],"output":{"name":"result"}}],[8,"TcpStreamExt","","Extension methods for the standard [`TcpStream` type][link] in `std::net`.",null,null],[10,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",7,{"inputs":[{"name":"tcpstreamext"},{"name":"bool"}],"output":{"name":"result"}}],[10,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",7,{"inputs":[{"name":"tcpstreamext"}],"output":{"name":"result"}}],[10,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",7,{"inputs":[{"name":"tcpstreamext"},{"name":"option"}],"output":{"name":"result"}}],[10,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so\nthe amount of milliseconds between them.",7,{"inputs":[{"name":"tcpstreamext"}],"output":{"name":"result"}}],[10,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",7,{"inputs":[{"name":"tcpstreamext"},{"name":"option"}],"output":{"name":"result"}}],[10,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so\nthe duration of time between them.",7,{"inputs":[{"name":"tcpstreamext"}],"output":{"name":"result"}}],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",7,{"inputs":[{"name":"tcpstreamext"},{"name":"option"}],"output":{"name":"result"}}],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",7,{"inputs":[{"name":"tcpstreamext"},{"name":"option"}],"output":{"name":"result"}}],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",7,{"inputs":[{"name":"tcpstreamext"}],"output":{"name":"result"}}],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",7,{"inputs":[{"name":"tcpstreamext"}],"output":{"name":"result"}}],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",7,{"inputs":[{"name":"tcpstreamext"},{"name":"option"}],"output":{"name":"result"}}],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",7,{"inputs":[{"name":"tcpstreamext"},{"name":"option"}],"output":{"name":"result"}}],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",7,{"inputs":[{"name":"tcpstreamext"}],"output":{"name":"result"}}],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",7,{"inputs":[{"name":"tcpstreamext"}],"output":{"name":"result"}}],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",7,{"inputs":[{"name":"tcpstreamext"},{"name":"u32"}],"output":{"name":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",7,{"inputs":[{"name":"tcpstreamext"}],"output":{"name":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",7,{"inputs":[{"name":"tcpstreamext"},{"name":"bool"}],"output":{"name":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",7,{"inputs":[{"name":"tcpstreamext"}],"output":{"name":"result"}}],[10,"connect","","Executes a `connect` operation on this socket, establishing a connection\nto the host specified by `addr`.",7,{"inputs":[{"name":"tcpstreamext"},{"name":"t"}],"output":{"name":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",7,{"inputs":[{"name":"tcpstreamext"}],"output":{"name":"result"}}],[10,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",7,{"inputs":[{"name":"tcpstreamext"},{"name":"bool"}],"output":{"name":"result"}}],[8,"TcpListenerExt","","Extension methods for the standard [`TcpListener` type][link] in `std::net`.",null,null],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",8,{"inputs":[{"name":"tcplistenerext"},{"name":"u32"}],"output":{"name":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",8,{"inputs":[{"name":"tcplistenerext"}],"output":{"name":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",8,{"inputs":[{"name":"tcplistenerext"},{"name":"bool"}],"output":{"name":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",8,{"inputs":[{"name":"tcplistenerext"}],"output":{"name":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",8,{"inputs":[{"name":"tcplistenerext"}],"output":{"name":"result"}}],[10,"set_nonblocking","","Moves this TCP listener into or out of nonblocking mode.",8,{"inputs":[{"name":"tcplistenerext"},{"name":"bool"}],"output":{"name":"result"}}],[8,"UdpSocketExt","","Extension methods for the standard [`UdpSocket` type][link] in `std::net`.",null,null],[10,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",9,{"inputs":[{"name":"udpsocketext"},{"name":"bool"}],"output":{"name":"result"}}],[10,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",9,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",9,{"inputs":[{"name":"udpsocketext"},{"name":"bool"}],"output":{"name":"result"}}],[10,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",9,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",9,{"inputs":[{"name":"udpsocketext"},{"name":"u32"}],"output":{"name":"result"}}],[10,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",9,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",9,{"inputs":[{"name":"udpsocketext"},{"name":"bool"}],"output":{"name":"result"}}],[10,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",9,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",9,{"inputs":[{"name":"udpsocketext"},{"name":"u32"}],"output":{"name":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",9,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",9,{"inputs":[{"name":"udpsocketext"},{"name":"bool"}],"output":{"name":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",9,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",9,{"inputs":[{"name":"udpsocketext"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[10,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",9,{"inputs":[{"name":"udpsocketext"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[10,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",9,{"inputs":[{"name":"udpsocketext"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[10,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",9,{"inputs":[{"name":"udpsocketext"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",9,{"inputs":[{"name":"udpsocketext"},{"name":"option"}],"output":{"name":"result"}}],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",9,{"inputs":[{"name":"udpsocketext"},{"name":"option"}],"output":{"name":"result"}}],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",9,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",9,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",9,{"inputs":[{"name":"udpsocketext"},{"name":"option"}],"output":{"name":"result"}}],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",9,{"inputs":[{"name":"udpsocketext"},{"name":"option"}],"output":{"name":"result"}}],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",9,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",9,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",9,{"inputs":[{"name":"udpsocketext"}],"output":{"name":"result"}}],[10,"connect","","Connects this UDP socket to a remote address, allowing the `send` and\n`recv` syscalls to be used to send data and also applies filters to only\nreceive data from the specified address.",9,{"inputs":[{"name":"udpsocketext"},{"name":"a"}],"output":{"name":"result"}}],[10,"send","","Sends data on the socket to the remote address to which it is connected.",9,null],[10,"recv","","Receives data on the socket from the remote address to which it is\nconnected.",9,null],[10,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",9,{"inputs":[{"name":"udpsocketext"},{"name":"bool"}],"output":{"name":"result"}}]],"paths":[[3,"TcpBuilder"],[3,"UdpBuilder"],[3,"TcpStream"],[3,"UdpSocket"],[3,"TcpListener"],[8,"UnixTcpBuilderExt"],[8,"UnixUdpBuilderExt"],[8,"TcpStreamExt"],[8,"TcpListenerExt"],[8,"UdpSocketExt"]]};
searchIndex["context"] = {"doc":"This project provides an easy interface to the famous **Boost.Context** library\nand thus the building blocks for higher-level abstractions, like coroutines,\ncooperative threads (userland threads) or an equivalent to the C# keyword &quot;yield&quot;.","items":[[0,"context","context","Provides the `Context` and `Transfer` types for\nsaving and restoring the current state of execution.",null,null],[3,"Context","context::context","A `Context` stores a `ContextFn`&#39;s state of execution, for it to be resumed later.",null,null],[3,"Transfer","","Contains the previously active `Context` and the `data` passed to resume the current one and\nis used as the return value by `Context::resume()` and `Context::resume_ontop()`",null,null],[12,"context","","The previously executed `Context` which yielded to resume the current one.",0,null],[12,"data","","The `data` which was passed to `Context::resume()` or\n`Context::resume_ontop()` to resume the current `Context`.",0,null],[6,"ContextFn","","Functions of this signature are used as the entry point for a new `Context`.",null,null],[6,"ResumeOntopFn","","Functions of this signature are used as the callback while resuming ontop of a `Context`.",null,null],[11,"new","","Creates a new `Context` prepared to execute `f` at the beginning of `stack`.",1,{"inputs":[{"name":"stack"},{"name":"contextfn"}],"output":{"name":"context"}}],[11,"resume","","Yields the execution to another `Context`.",1,{"inputs":[{"name":"context"},{"name":"usize"}],"output":{"name":"transfer"}}],[11,"resume_ontop","","Yields the execution to another `Context` and executes a function &quot;ontop&quot; of it&#39;s stack.",1,{"inputs":[{"name":"context"},{"name":"usize"},{"name":"resumeontopfn"}],"output":{"name":"transfer"}}],[11,"fmt","","",1,{"inputs":[{"name":"context"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"transfer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new `Transfer` struct with the members set to their respective arguments.",0,{"inputs":[{"name":"context"},{"name":"usize"}],"output":{"name":"transfer"}}],[0,"stack","context","Provides utilities to allocate memory suitable as stack memory for `Context`.",null,null],[3,"Stack","context::stack","Represents any kind of stack memory.",null,null],[3,"FixedSizeStack","","A very simple and straightforward implementation of `Stack`.",null,null],[3,"ProtectedFixedSizeStack","","A more secure, but slightly slower version of `FixedSizeStack`.",null,null],[4,"StackError","","Error type returned by stack allocation methods.",null,null],[13,"ExceedsMaximumSize","","Contains the maximum amount of memory allowed to be allocated as stack space.",2,null],[13,"IoError","","Returned if some kind of I/O error happens during allocation.",2,null],[11,"fmt","","",2,{"inputs":[{"name":"stackerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"stack"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a (non-owning) representation of some stack memory.",3,null],[11,"top","","Returns the top of the stack from which on it grows downwards towards bottom().",3,null],[11,"bottom","","Returns the bottom of the stack and thus it&#39;s end.",3,null],[11,"len","","Returns the size of the stack between top() and bottom().",3,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"min_size","","Returns the minimal stack size allowed by the current platform.",3,{"inputs":[],"output":{"name":"usize"}}],[11,"max_size","","Returns the maximum stack size allowed by the current platform.",3,{"inputs":[],"output":{"name":"usize"}}],[11,"default_size","","Returns a implementation defined default stack size.",3,{"inputs":[],"output":{"name":"usize"}}],[11,"fmt","","",4,{"inputs":[{"name":"fixedsizestack"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Allocates a new stack of **at least** `size` bytes.",4,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"deref","","",4,{"inputs":[{"name":"fixedsizestack"}],"output":{"name":"stack"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"fixedsizestack"}}],[11,"drop","","",4,{"inputs":[{"name":"fixedsizestack"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"protectedfixedsizestack"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Allocates a new stack of **at least** `size` bytes + one additional guard page.",5,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"deref","","",5,{"inputs":[{"name":"protectedfixedsizestack"}],"output":{"name":"stack"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"protectedfixedsizestack"}}],[11,"drop","","",5,{"inputs":[{"name":"protectedfixedsizestack"}],"output":null}]],"paths":[[3,"Transfer"],[3,"Context"],[4,"StackError"],[3,"Stack"],[3,"FixedSizeStack"],[3,"ProtectedFixedSizeStack"]]};
searchIndex["num_cpus"] = {"doc":"Replaces the deprecated functionality of std::os::num_cpus.","items":[[5,"get","num_cpus","Returns the number of CPUs of the current machine.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"utimbuf","libc","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[3,"winsize","","",null,null],[12,"ws_row","","",12,null],[12,"ws_col","","",12,null],[12,"ws_xpixel","","",12,null],[12,"ws_ypixel","","",12,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",13,null],[12,"sa_data","","",13,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",14,null],[12,"sin_port","","",14,null],[12,"sin_addr","","",14,null],[12,"sin_zero","","",14,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",15,null],[12,"sin6_port","","",15,null],[12,"sin6_flowinfo","","",15,null],[12,"sin6_addr","","",15,null],[12,"sin6_scope_id","","",15,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",16,null],[12,"sun_path","","",16,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",17,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",18,null],[12,"ai_family","","",18,null],[12,"ai_socktype","","",18,null],[12,"ai_protocol","","",18,null],[12,"ai_addrlen","","",18,null],[12,"ai_addr","","",18,null],[12,"ai_canonname","","",18,null],[12,"ai_next","","",18,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",19,null],[12,"nl_pid","","",19,null],[12,"nl_groups","","",19,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",20,null],[12,"sll_protocol","","",20,null],[12,"sll_ifindex","","",20,null],[12,"sll_hatype","","",20,null],[12,"sll_pkttype","","",20,null],[12,"sll_halen","","",20,null],[12,"sll_addr","","",20,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",21,null],[12,"tm_min","","",21,null],[12,"tm_hour","","",21,null],[12,"tm_mday","","",21,null],[12,"tm_mon","","",21,null],[12,"tm_year","","",21,null],[12,"tm_wday","","",21,null],[12,"tm_yday","","",21,null],[12,"tm_isdst","","",21,null],[12,"tm_gmtoff","","",21,null],[12,"tm_zone","","",21,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",22,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",23,null],[12,"dli_fbase","","",23,null],[12,"dli_sname","","",23,null],[12,"dli_saddr","","",23,null],[3,"epoll_event","","",null,null],[12,"events","","",24,null],[12,"u64","","",24,null],[3,"utsname","","",null,null],[12,"sysname","","",25,null],[12,"nodename","","",25,null],[12,"release","","",25,null],[12,"version","","",25,null],[12,"machine","","",25,null],[12,"domainname","","",25,null],[3,"dirent","","",null,null],[12,"d_ino","","",26,null],[12,"d_off","","",26,null],[12,"d_reclen","","",26,null],[12,"d_type","","",26,null],[12,"d_name","","",26,null],[3,"dirent64","","",null,null],[12,"d_ino","","",27,null],[12,"d_off","","",27,null],[12,"d_reclen","","",27,null],[12,"d_type","","",27,null],[12,"d_name","","",27,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",28,null],[12,"rlim_max","","",28,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",29,null],[12,"gl_pathv","","",29,null],[12,"gl_offs","","",29,null],[12,"gl_flags","","",29,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",30,null],[12,"ifa_name","","",30,null],[12,"ifa_flags","","",30,null],[12,"ifa_addr","","",30,null],[12,"ifa_netmask","","",30,null],[12,"ifa_ifu","","",30,null],[12,"ifa_data","","",30,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",31,null],[12,"pw_passwd","","",31,null],[12,"pw_uid","","",31,null],[12,"pw_gid","","",31,null],[12,"pw_gecos","","",31,null],[12,"pw_dir","","",31,null],[12,"pw_shell","","",31,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",32,null],[12,"f_frsize","","",32,null],[12,"f_blocks","","",32,null],[12,"f_bfree","","",32,null],[12,"f_bavail","","",32,null],[12,"f_files","","",32,null],[12,"f_ffree","","",32,null],[12,"f_favail","","",32,null],[12,"f_fsid","","",32,null],[12,"f_flag","","",32,null],[12,"f_namemax","","",32,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",33,null],[12,"dqb_bsoftlimit","","",33,null],[12,"dqb_curspace","","",33,null],[12,"dqb_ihardlimit","","",33,null],[12,"dqb_isoftlimit","","",33,null],[12,"dqb_curinodes","","",33,null],[12,"dqb_btime","","",33,null],[12,"dqb_itime","","",33,null],[12,"dqb_valid","","",33,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",34,null],[12,"ssi_errno","","",34,null],[12,"ssi_code","","",34,null],[12,"ssi_pid","","",34,null],[12,"ssi_uid","","",34,null],[12,"ssi_fd","","",34,null],[12,"ssi_tid","","",34,null],[12,"ssi_band","","",34,null],[12,"ssi_overrun","","",34,null],[12,"ssi_trapno","","",34,null],[12,"ssi_status","","",34,null],[12,"ssi_int","","",34,null],[12,"ssi_ptr","","",34,null],[12,"ssi_utime","","",34,null],[12,"ssi_stime","","",34,null],[12,"ssi_addr","","",34,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",35,null],[12,"mq_maxmsg","","",35,null],[12,"mq_msgsize","","",35,null],[12,"mq_curmsgs","","",35,null],[3,"cpu_set_t","","",null,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",36,null],[12,"sa_mask","","",36,null],[12,"sa_flags","","",36,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",37,null],[12,"ss_flags","","",37,null],[12,"ss_size","","",37,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",38,null],[12,"si_errno","","",38,null],[12,"si_code","","",38,null],[12,"_pad","","",38,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",39,null],[12,"gl_pathv","","",39,null],[12,"gl_offs","","",39,null],[12,"gl_flags","","",39,null],[3,"ucred","","",null,null],[12,"pid","","",40,null],[12,"uid","","",40,null],[12,"gid","","",40,null],[3,"statfs","","",null,null],[12,"f_type","","",41,null],[12,"f_bsize","","",41,null],[12,"f_blocks","","",41,null],[12,"f_bfree","","",41,null],[12,"f_bavail","","",41,null],[12,"f_files","","",41,null],[12,"f_ffree","","",41,null],[12,"f_fsid","","",41,null],[12,"f_namelen","","",41,null],[12,"f_frsize","","",41,null],[3,"msghdr","","",null,null],[12,"msg_name","","",42,null],[12,"msg_namelen","","",42,null],[12,"msg_iov","","",42,null],[12,"msg_iovlen","","",42,null],[12,"msg_control","","",42,null],[12,"msg_controllen","","",42,null],[12,"msg_flags","","",42,null],[3,"termios","","",null,null],[12,"c_iflag","","",43,null],[12,"c_oflag","","",43,null],[12,"c_cflag","","",43,null],[12,"c_lflag","","",43,null],[12,"c_line","","",43,null],[12,"c_cc","","",43,null],[12,"c_ispeed","","",43,null],[12,"c_ospeed","","",43,null],[3,"flock","","",null,null],[12,"l_type","","",44,null],[12,"l_whence","","",44,null],[12,"l_start","","",44,null],[12,"l_len","","",44,null],[12,"l_pid","","",44,null],[3,"ipc_perm","","",null,null],[12,"__key","","",45,null],[12,"uid","","",45,null],[12,"gid","","",45,null],[12,"cuid","","",45,null],[12,"cgid","","",45,null],[12,"mode","","",45,null],[12,"__seq","","",45,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",46,null],[12,"shm_segsz","","",46,null],[12,"shm_atime","","",46,null],[12,"shm_dtime","","",46,null],[12,"shm_ctime","","",46,null],[12,"shm_cpid","","",46,null],[12,"shm_lpid","","",46,null],[12,"shm_nattch","","",46,null],[3,"sigset_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",47,null],[12,"st_ino","","",47,null],[12,"st_nlink","","",47,null],[12,"st_mode","","",47,null],[12,"st_uid","","",47,null],[12,"st_gid","","",47,null],[12,"st_rdev","","",47,null],[12,"st_size","","",47,null],[12,"st_blksize","","",47,null],[12,"st_blocks","","",47,null],[12,"st_atime","","",47,null],[12,"st_atime_nsec","","",47,null],[12,"st_mtime","","",47,null],[12,"st_mtime_nsec","","",47,null],[12,"st_ctime","","",47,null],[12,"st_ctime_nsec","","",47,null],[3,"stat64","","",null,null],[12,"st_dev","","",48,null],[12,"st_ino","","",48,null],[12,"st_nlink","","",48,null],[12,"st_mode","","",48,null],[12,"st_uid","","",48,null],[12,"st_gid","","",48,null],[12,"st_rdev","","",48,null],[12,"st_size","","",48,null],[12,"st_blksize","","",48,null],[12,"st_blocks","","",48,null],[12,"st_atime","","",48,null],[12,"st_atime_nsec","","",48,null],[12,"st_mtime","","",48,null],[12,"st_mtime_nsec","","",48,null],[12,"st_ctime","","",48,null],[12,"st_ctime_nsec","","",48,null],[3,"pthread_attr_t","","",null,null],[3,"mcontext_t","","",null,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",49,null],[12,"uc_link","","",49,null],[12,"uc_stack","","",49,null],[12,"uc_mcontext","","",49,null],[12,"uc_sigmask","","",49,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_gettime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fstat64","","",null,null],[5,"stat64","","",null,null],[5,"open64","","",null,null],[5,"creat64","","",null,null],[5,"lseek64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"mmap64","","",null,null],[5,"lstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"readdir64_r","","",null,null],[5,"getrlimit64","","",null,null],[5,"setrlimit64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"unshare","","",null,null],[5,"sethostname","","",null,null],[5,"setns","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"getnameinfo","","",null,null],[5,"eventfd","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",50,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",50,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",50,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",50,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",50,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",50,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",50,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",50,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",50,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",50,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",50,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",50,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",50,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",50,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",50,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",50,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",50,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",50,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",50,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",50,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",50,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",50,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",50,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",50,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"default","","",50,{"inputs":[],"output":{"name":"option"}}],[11,"clone","","",50,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"eq","","",50,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",50,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",50,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",50,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",50,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",50,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"cmp","","",50,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"fmt","","",50,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",50,null],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",51,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",51,null],[11,"clone","libc","",47,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",48,{"inputs":[{"name":"stat64"}],"output":{"name":"stat64"}}],[11,"clone","","",52,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",53,{"inputs":[{"name":"mcontext_t"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",49,{"inputs":[{"name":"ucontext_t"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",54,{"inputs":[{"name":"sigset_t"}],"output":{"name":"sigset_t"}}],[11,"clone","","",36,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",37,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",38,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",39,{"inputs":[{"name":"glob64_t"}],"output":{"name":"glob64_t"}}],[11,"clone","","",40,{"inputs":[{"name":"ucred"}],"output":{"name":"ucred"}}],[11,"clone","","",41,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",42,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",43,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","","",44,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",45,{"inputs":[{"name":"ipc_perm"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",46,{"inputs":[{"name":"shmid_ds"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",26,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",27,{"inputs":[{"name":"dirent64"}],"output":{"name":"dirent64"}}],[11,"clone","","",28,{"inputs":[{"name":"rlimit64"}],"output":{"name":"rlimit64"}}],[11,"clone","","",29,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",30,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",55,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",56,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",57,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",58,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",31,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",32,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",33,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",34,{"inputs":[{"name":"signalfd_siginfo"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",59,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","","",35,{"inputs":[{"name":"mq_attr"}],"output":{"name":"mq_attr"}}],[11,"clone","","",60,{"inputs":[{"name":"cpu_set_t"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",13,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",14,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",15,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",16,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",17,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",18,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",19,{"inputs":[{"name":"sockaddr_nl"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",20,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",61,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",21,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",22,{"inputs":[{"name":"sched_param"}],"output":{"name":"sched_param"}}],[11,"clone","","",23,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",24,{"inputs":[{"name":"epoll_event"}],"output":{"name":"epoll_event"}}],[11,"clone","","",25,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","","",0,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",5,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",6,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",8,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",10,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","","",11,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[11,"clone","","",12,{"inputs":[{"name":"winsize"}],"output":{"name":"winsize"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"CBAUD","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"EXTPROC","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"FIONREAD","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"stat"],[3,"stat64"],[3,"ucontext_t"],[4,"Option"],[8,"Clone"],[3,"pthread_attr_t"],[3,"mcontext_t"],[3,"sigset_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[0,"error","bitflags::__core","Traits for working with Errors.",null,null],[8,"Error","bitflags::__core::error","Base functionality for all errors in Rust.",null,null],[10,"description","","A short description of the error.",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","The lower-level cause of this error, if any.",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[0,"prelude","bitflags::__core","The Rust Prelude.",null,null],[0,"v1","bitflags::__core::prelude","The first version of the prelude of The Rust Standard Library.",null,null],[8,"FnOnce","bitflags::__core::prelude::v1","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",1,null],[10,"call_once","","This is called when the call operator is used.",1,null],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",2,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",2,null],[10,"into_iter","","Creates an iterator from a value.",2,null],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[11,"new","alloc::boxed","Allocates memory on the heap and then places `x` into it.",3,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",3,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",3,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",3,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",3,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"as_mut","","",3,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_ref","","",3,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",3,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow","","",3,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"clone","","",3,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"call_once","","",3,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",3,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"next_back","","",3,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"deref_mut","","",3,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref","","",3,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"fmt","","",3,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",3,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"box"}}],[11,"finalize","","",3,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[3,"Box","bitflags::__core::prelude::v1","A pointer type for heap allocation.",null,null],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",4,{"inputs":[{"name":"asmut"}],"output":{"name":"t"}}],[8,"Send","","Types that can be transferred across thread boundaries.",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",5,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",5,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",5,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",5,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",5,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",5,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",5,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",5,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",5,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",5,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",5,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",5,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",5,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",5,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",5,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",5,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",5,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",5,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",5,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",5,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",5,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",5,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",5,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",5,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"eq","","",5,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"fmt","","",5,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",5,null],[4,"Option","bitflags::__core::prelude::v1","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",5,null],[13,"Some","","Some value `T`",5,null],[11,"from_iter","core::result","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",6,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",6,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",6,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",6,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",6,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"is_ok","","Returns true if the result is `Ok`",6,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",6,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",6,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",6,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",6,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",6,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",6,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",6,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",6,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",6,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",6,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",6,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",6,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",6,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",6,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",6,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"clone","","",6,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"fmt","","",6,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,null],[4,"Result","bitflags::__core::prelude::v1","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",6,null],[13,"Err","","Contains the error value",6,null],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",7,null],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",8,{"inputs":[{"name":"ord"},{"name":"self"}],"output":{"name":"ordering"}}],[5,"drop","","Disposes of a value.",null,null],[11,"new","collections::string","Creates a new empty `String`.",9,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",9,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",9,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",9,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",9,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",9,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",9,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",9,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",9,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",9,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_mut_str","","Extracts a string slice containing the entire string.",9,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",9,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",9,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",9,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",9,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",9,null],[11,"push","","Appends the given `char` to the end of this `String`.",9,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",9,null],[11,"truncate","","Shortens this `String` to the specified length.",9,null],[11,"pop","","Removes the last character from the string buffer and returns it.",9,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",9,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into this `String` at a byte position.",9,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",9,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",9,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",9,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates this `String`, removing all contents.",9,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",9,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",9,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"write_str","","",9,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",9,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"into","","",9,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"from","","",9,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"as_ref","","",9,null],[11,"as_ref","","",9,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deref_mut","","",9,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref","","",9,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"index_mut","","",9,{"inputs":[{"name":"string"},{"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",9,{"inputs":[{"name":"string"},{"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",9,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",9,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",9,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",9,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",9,{"inputs":[{"name":"string"},{"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index","","",9,{"inputs":[{"name":"string"},{"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index","","",9,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",9,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",9,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",9,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"add","","",9,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"hash","","",9,null],[11,"fmt","","",9,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"string"}}],[11,"eq","","",9,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"extend","","",9,null],[11,"extend","","",9,null],[11,"extend","","",9,null],[11,"extend","","",9,null],[11,"from_iter","","",9,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",9,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",9,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"clone","","",9,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",9,null],[11,"partial_cmp","","",9,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"borrow","","",9,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[3,"String","bitflags::__core::prelude::v1","A UTF-8 encoded, growable string.",null,null],[8,"SliceConcatExt","","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",10,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",10,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a\ngiven separator between each.",10,null],[10,"connect","","",10,null],[8,"PartialEq","","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",11,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",11,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",12,null],[8,"Drop","","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a &#39;destructor&#39;.",null,null],[10,"drop","","A method called when the value goes out of scope.",13,null],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",14,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",15,null],[10,"next","","Advances the iterator and returns the next value.",15,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",15,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",15,{"inputs":[{"name":"iterator"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",15,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",15,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",15,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",15,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",15,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"map"}}],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",15,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",15,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",15,{"inputs":[{"name":"iterator"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can look at the `next()` element without\nconsuming it.",15,{"inputs":[{"name":"iterator"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",15,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",15,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",15,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",15,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",15,{"inputs":[{"name":"iterator"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",15,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first `None`.",15,{"inputs":[{"name":"iterator"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",15,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",15,{"inputs":[{"name":"iterator"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",15,{"inputs":[{"name":"iterator"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",15,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",15,{"inputs":[{"name":"iterator"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",15,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",15,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",15,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",15,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",15,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",15,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",15,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",15,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",15,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator&#39;s direction.",15,{"inputs":[{"name":"iterator"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",15,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",15,{"inputs":[{"name":"iterator"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",15,{"inputs":[{"name":"iterator"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",15,{"inputs":[{"name":"iterator"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",15,{"inputs":[{"name":"iterator"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",15,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",15,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",15,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",15,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",15,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",15,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",15,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",15,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[8,"Clone","","A common trait for cloning an object.",null,null],[10,"clone","","Returns a copy of the value.",16,{"inputs":[{"name":"clone"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",16,null],[8,"Sync","","Types that can be safely shared between threads when aliased.",null,null],[8,"ToOwned","","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","",17,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",17,null],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`).",null,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","An iterator able to yield elements from both ends.",18,{"inputs":[{"name":"doubleendediterator"}],"output":{"name":"option"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",19,{"inputs":[{"name":"into"}],"output":{"name":"t"}}],[8,"Default","","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the &quot;default value&quot; for a type.",20,{"inputs":[],"output":{"name":"self"}}],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",21,null],[8,"Sized","","Types with a constant size known at compile-time.",null,null],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",22,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",22,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",22,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",22,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",22,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"AsRef","","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",23,{"inputs":[{"name":"asref"}],"output":{"name":"t"}}],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",24,{"inputs":[{"name":"tostring"}],"output":{"name":"string"}}],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",25,{"inputs":[{"name":"exactsizeiterator"}],"output":{"name":"usize"}}],[11,"from","collections::vec","",26,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","","",26,null],[11,"as_mut","","",26,null],[11,"as_ref","","",26,null],[11,"as_mut","","",26,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",26,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",26,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",26,{"inputs":[],"output":{"name":"vec"}}],[11,"drop","","",26,null],[11,"cmp","","",26,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"eq","","",26,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"extend","","",26,null],[11,"extend","","",26,null],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",26,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",26,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"deref_mut","","",26,null],[11,"deref","","",26,null],[11,"index_mut","","",26,null],[11,"index_mut","","",26,null],[11,"index_mut","","",26,null],[11,"index_mut","","",26,null],[11,"index_mut","","",26,null],[11,"index_mut","","",26,null],[11,"index","","",26,null],[11,"index","","",26,null],[11,"index","","",26,null],[11,"index","","",26,null],[11,"index","","",26,null],[11,"index","","",26,null],[11,"index_mut","","",26,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",26,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",26,null],[11,"clone","","",26,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",26,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",26,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",26,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",26,null],[11,"new","","Constructs a new, empty `Vec&lt;T&gt;`.",26,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",26,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",26,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",26,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",26,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",26,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",26,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",26,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",26,null],[11,"as_slice","","Extracts a slice containing the entire vector.",26,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",26,null],[11,"set_len","","Sets the length of a vector.",26,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",26,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",26,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",26,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",26,null],[11,"push","","Appends an element to the back of a collection.",26,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",26,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",26,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",26,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",26,null],[11,"len","","Returns the number of elements in the vector.",26,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",26,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",26,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"borrow_mut","","",26,null],[11,"borrow","","",26,null],[11,"from","","",26,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[3,"Vec","bitflags::__core::prelude::v1","A contiguous growable array type, written `Vec&lt;T&gt;` but pronounced &#39;vector.&#39;",null,null],[0,"f32","bitflags::__core","The 32-bit floating point type.",null,null],[17,"INFINITY","bitflags::__core::f32","",null,null],[17,"MIN_POSITIVE","","Smallest positive, normalized f32 value",null,null],[17,"EPSILON","","",null,null],[17,"NAN","","",null,null],[17,"MANTISSA_DIGITS","","",null,null],[17,"RADIX","","",null,null],[17,"MIN_EXP","","",null,null],[17,"MAX","","Largest finite f32 value",null,null],[17,"MIN","","Smallest finite f32 value",null,null],[17,"MAX_EXP","","",null,null],[17,"MAX_10_EXP","","",null,null],[17,"DIGITS","","",null,null],[17,"MIN_10_EXP","","",null,null],[17,"NEG_INFINITY","","",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","bitflags::__core::f32::consts","Archimedes&#39; constant",null,null],[17,"FRAC_PI_2","","pi/2.0",null,null],[17,"FRAC_PI_3","","pi/3.0",null,null],[17,"FRAC_PI_4","","pi/4.0",null,null],[17,"FRAC_PI_6","","pi/6.0",null,null],[17,"FRAC_PI_8","","pi/8.0",null,null],[17,"FRAC_1_PI","","1.0/pi",null,null],[17,"FRAC_2_PI","","2.0/pi",null,null],[17,"FRAC_2_SQRT_PI","","2.0/sqrt(pi)",null,null],[17,"SQRT_2","","sqrt(2.0)",null,null],[17,"FRAC_1_SQRT_2","","1.0/sqrt(2.0)",null,null],[17,"E","","Euler&#39;s number",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2.0)",null,null],[17,"LN_10","","ln(10.0)",null,null],[0,"f64","bitflags::__core","The 64-bit floating point type.",null,null],[17,"MIN_EXP","bitflags::__core::f64","",null,null],[17,"INFINITY","","",null,null],[17,"NAN","","",null,null],[17,"MIN","","Smallest finite f64 value",null,null],[17,"MIN_POSITIVE","","Smallest positive, normalized f64 value",null,null],[17,"MAX_EXP","","",null,null],[17,"RADIX","","",null,null],[17,"NEG_INFINITY","","",null,null],[17,"MIN_10_EXP","","",null,null],[17,"MAX","","Largest finite f64 value",null,null],[17,"MAX_10_EXP","","",null,null],[17,"MANTISSA_DIGITS","","",null,null],[17,"DIGITS","","",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","bitflags::__core::f64::consts","Archimedes&#39; constant",null,null],[17,"FRAC_PI_2","","pi/2.0",null,null],[17,"FRAC_PI_3","","pi/3.0",null,null],[17,"FRAC_PI_4","","pi/4.0",null,null],[17,"FRAC_PI_6","","pi/6.0",null,null],[17,"FRAC_PI_8","","pi/8.0",null,null],[17,"FRAC_1_PI","","1.0/pi",null,null],[17,"FRAC_2_PI","","2.0/pi",null,null],[17,"FRAC_2_SQRT_PI","","2.0/sqrt(pi)",null,null],[17,"SQRT_2","","sqrt(2.0)",null,null],[17,"FRAC_1_SQRT_2","","1.0/sqrt(2.0)",null,null],[17,"E","","Euler&#39;s number",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2.0)",null,null],[17,"LN_10","","ln(10.0)",null,null],[17,"EPSILON","bitflags::__core::f64","",null,null],[0,"ascii","bitflags::__core","Operations on ASCII strings and characters.",null,null],[8,"AsciiExt","bitflags::__core::ascii","Extension methods for ASCII-subset only operations on string slices.",null,null],[16,"Owned","","Container type for copied ASCII characters.",27,null],[10,"is_ascii","","Checks if the value is within the ASCII range.",27,{"inputs":[{"name":"asciiext"}],"output":{"name":"bool"}}],[10,"to_ascii_uppercase","","Makes a copy of the string in ASCII upper case.",27,null],[10,"to_ascii_lowercase","","Makes a copy of the string in ASCII lower case.",27,null],[10,"eq_ignore_ascii_case","","Checks that two strings are an ASCII case-insensitive match.",27,{"inputs":[{"name":"asciiext"},{"name":"self"}],"output":{"name":"bool"}}],[10,"make_ascii_uppercase","","Converts this type to its ASCII upper case equivalent in-place.",27,null],[10,"make_ascii_lowercase","","Converts this type to its ASCII lower case equivalent in-place.",27,null],[11,"next_back","std::ascii","",28,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[3,"EscapeDefault","bitflags::__core::ascii","An iterator over the escaped version of a byte, constructed via\n`std::ascii::escape_default`.",null,null],[5,"escape_default","","Returns an iterator that produces an escaped version of a `u8`.",null,{"inputs":[{"name":"u8"}],"output":{"name":"escapedefault"}}],[0,"num","bitflags::__core","Additional functionality for numerics.",null,null],[11,"clone","core::num","",29,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",29,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"FpCategory","bitflags::__core::num","A classification of floating point numbers.",null,null],[13,"Nan","","&quot;Not a Number&quot;, often obtained by dividing by zero",29,null],[13,"Infinite","","Positive or negative infinity",29,null],[13,"Zero","","Positive or negative zero",29,null],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`)",29,null],[13,"Normal","","A regular floating point number",29,null],[3,"ParseFloatError","","An error which can be returned when parsing a float.",null,null],[11,"fmt","core::num","",30,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"eq","","",30,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[3,"ParseIntError","bitflags::__core::num","An error which can be returned when parsing an integer.",null,null],[8,"One","","Types that have a &quot;one&quot; value.",null,null],[10,"one","","The &quot;one&quot; (usually, multiplicative identity) for this type.",31,{"inputs":[],"output":{"name":"self"}}],[11,"bitand_assign","core::num","",32,null],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",32,null],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",32,null],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",32,null],[11,"rem","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",32,null],[11,"div","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",32,null],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",32,null],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",32,null],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",32,null],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",32,null],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",32,null],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",32,null],[11,"rem","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",32,null],[11,"div","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",32,null],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",32,null],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",32,null],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",32,null],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",32,null],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",32,null],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",32,null],[11,"rem","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",32,null],[11,"div","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",32,null],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",32,null],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",32,null],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",32,null],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",32,null],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",32,null],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",32,null],[11,"rem","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",32,null],[11,"div","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",32,null],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",32,null],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",32,null],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",32,null],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",32,null],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",32,null],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",32,null],[11,"rem","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",32,null],[11,"div","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",32,null],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",32,null],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",32,null],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",32,null],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",32,null],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",32,null],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",32,null],[11,"rem","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",32,null],[11,"div","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",32,null],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",32,null],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",32,null],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",32,null],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",32,null],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",32,null],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",32,null],[11,"rem","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",32,null],[11,"div","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",32,null],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",32,null],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",32,null],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",32,null],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",32,null],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",32,null],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",32,null],[11,"rem","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",32,null],[11,"div","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",32,null],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",32,null],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",32,null],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",32,null],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",32,null],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",32,null],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",32,null],[11,"rem","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",32,null],[11,"div","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",32,null],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",32,null],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",32,null],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",32,null],[11,"bitand","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",32,null],[11,"bitor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",32,null],[11,"bitxor","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",32,null],[11,"rem","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",32,null],[11,"div","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",32,null],[11,"mul","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",32,null],[11,"sub","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",32,null],[11,"add","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",32,null],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",32,null],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",32,null],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",32,null],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",32,null],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",32,null],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",32,null],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",32,null],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",32,null],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",32,null],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",32,null],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",32,null],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",32,null],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",32,null],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",32,null],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",32,null],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",32,null],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",32,null],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",32,null],[11,"shr","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",32,null],[11,"shl","","",32,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"eq","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"cmp","","",32,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"clone","","",32,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"fmt","","",32,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",32,{"inputs":[],"output":{"name":"wrapping"}}],[3,"Wrapping","bitflags::__core::num","Provides intentionally-wrapped arithmetic on `T`.",null,null],[12,"0","","",32,null],[8,"Zero","","Types that have a &quot;zero&quot; value.",null,null],[10,"zero","","The &quot;zero&quot; (usually, additive identity) for this type.",33,{"inputs":[],"output":{"name":"self"}}],[0,"thread","bitflags::__core","Native threads.",null,null],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",34,{"inputs":[],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",34,{"inputs":[{"name":"builder"},{"name":"string"}],"output":{"name":"builder"}}],[11,"stack_size","","Sets the size of the stack for the new thread.",34,{"inputs":[{"name":"builder"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",34,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"name":"result"}}],[3,"Builder","bitflags::__core::thread","Thread configuration. Provides detailed control over the properties\nand behavior of new threads.",null,null],[5,"spawn","","Spawns a new thread, returning a `JoinHandle` for it.",null,{"inputs":[{"name":"f"}],"output":{"name":"joinhandle"}}],[5,"current","","Gets a handle to the thread that invokes it.",null,{"inputs":[],"output":{"name":"thread"}}],[5,"yield_now","","Cooperatively gives up a timeslice to the OS scheduler.",null,null],[5,"panicking","","Determines whether the current thread is unwinding because of panic.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"sleep_ms","","Puts the current thread to sleep for the specified amount of time.",null,null],[5,"sleep","","Puts the current thread to sleep for the specified amount of time.",null,null],[5,"park","","Blocks unless or until the current thread&#39;s token is made available.",null,null],[5,"park_timeout_ms","","Blocks unless or until the current thread&#39;s token is made available or\nthe specified duration has been reached (may wake spuriously).",null,null],[5,"park_timeout","","Blocks unless or until the current thread&#39;s token is made available or\nthe specified duration has been reached (may wake spuriously).",null,null],[11,"new","std::thread","",35,{"inputs":[{"name":"option"}],"output":{"name":"thread"}}],[11,"fmt","","",35,{"inputs":[{"name":"thread"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unpark","","Atomically makes the handle&#39;s token available if it is not already.",35,null],[11,"name","","Gets the thread&#39;s name.",35,{"inputs":[{"name":"thread"}],"output":{"name":"option"}}],[11,"clone","","",35,{"inputs":[{"name":"thread"}],"output":{"name":"thread"}}],[3,"Thread","bitflags::__core::thread","A handle to a thread.",null,null],[6,"Result","","",null,null],[11,"thread","std::thread","Extracts a handle to the underlying thread",36,{"inputs":[{"name":"joinhandle"}],"output":{"name":"thread"}}],[11,"join","","Waits for the associated thread to finish.",36,{"inputs":[{"name":"joinhandle"}],"output":{"name":"result"}}],[3,"JoinHandle","bitflags::__core::thread","An owned permission to join on a thread (block on its termination).",null,null],[11,"eq","std::thread::local","",37,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"localkeystate"}],"output":{"name":"localkeystate"}}],[4,"LocalKeyState","bitflags::__core::thread","Indicator of the state of a thread local storage key.",null,null],[13,"Uninitialized","","All keys are in this state whenever a thread starts. Keys will\ntransition to the `Valid` state once the first call to `with` happens\nand the initialization expression succeeds.",37,null],[13,"Valid","","Once a key has been accessed successfully, it will enter the `Valid`\nstate. Keys in the `Valid` state will remain so until the thread exits,\nat which point the destructor will be run and the key will enter the\n`Destroyed` state.",37,null],[13,"Destroyed","","When a thread exits, the destructors for keys will be run (if\nnecessary). While a destructor is running, and possibly after a\ndestructor has run, a key is in the `Destroyed` state.",37,null],[11,"set","std::thread::scoped_tls","Inserts a value into this scoped thread local storage slot for a\nduration of a closure.",38,{"inputs":[{"name":"scopedkey"},{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[11,"with","","Gets a value out of this scoped variable.",38,{"inputs":[{"name":"scopedkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",38,{"inputs":[{"name":"scopedkey"}],"output":{"name":"bool"}}],[3,"ScopedKey","bitflags::__core::thread","Type representing a thread local storage key corresponding to a reference\nto the type parameter `T`.",null,null],[11,"new","std::thread::scoped_tls::imp","",39,{"inputs":[],"output":{"name":"keyinner"}}],[11,"set","","",39,null],[11,"get","","",39,null],[3,"KeyInner","bitflags::__core::thread","",null,null],[11,"new","std::thread::local::elf","",40,{"inputs":[],"output":{"name":"key"}}],[11,"get","","",40,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[3,"Key","bitflags::__core::thread","",null,null],[11,"with","std::thread::local","Acquires a reference to the value in this TLS key.",41,{"inputs":[{"name":"localkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"state","","Query the current state of this key.",41,{"inputs":[{"name":"localkey"}],"output":{"name":"localkeystate"}}],[3,"LocalKey","bitflags::__core::thread","A thread local storage key which owns its contents.",null,null],[11,"new","std::thread::local::os","",42,{"inputs":[],"output":{"name":"key"}}],[11,"get","","",42,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[3,"Key","bitflags::__core::thread","",null,null],[0,"collections","bitflags::__core","Collection types.",null,null],[0,"hash_map","bitflags::__core::collections","A hashmap",null,null],[4,"Entry","bitflags::__core::collections::hash_map","A view into a single location in a map, which may be vacant or occupied.",null,null],[13,"Occupied","","An occupied Entry.",43,null],[13,"Vacant","","A vacant Entry.",43,null],[3,"RandomState","","`RandomState` is the default state for `HashMap` types.",null,null],[3,"OccupiedEntry","","A view into a single occupied location in a HashMap.",null,null],[3,"IterMut","","HashMap mutable values iterator.",null,null],[3,"VacantEntry","","A view into a single empty location in a HashMap.",null,null],[3,"Keys","","HashMap keys iterator.",null,null],[3,"Drain","","HashMap drain iterator.",null,null],[3,"IntoIter","","HashMap move iterator.",null,null],[3,"ValuesMut","","Mutable HashMap values iterator.",null,null],[3,"Values","","HashMap values iterator.",null,null],[3,"Iter","","HashMap iterator.",null,null],[3,"HashMap","","A hash map implementation which uses linear probing with Robin\nHood bucket stealing.",null,null],[0,"hash_set","bitflags::__core::collections","A hashset",null,null],[3,"Difference","bitflags::__core::collections::hash_set","Difference iterator",null,null],[3,"Intersection","","Intersection iterator",null,null],[3,"HashSet","","An implementation of a hash set using the underlying representation of a\nHashMap where the value is ().",null,null],[3,"Union","","Set union iterator.",null,null],[3,"Iter","","HashSet iterator",null,null],[3,"Drain","","HashSet drain iterator",null,null],[3,"SymmetricDifference","","Symmetric difference iterator.",null,null],[3,"IntoIter","","HashSet move iterator",null,null],[11,"fmt","collections::vec_deque","",44,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"extend","","",44,null],[11,"extend","","",44,null],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",44,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",44,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"index_mut","","",44,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index","","",44,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"hash","","",44,null],[11,"cmp","","",44,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"eq","","",44,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",44,null],[11,"new","","Creates an empty `VecDeque`.",44,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",44,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",44,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",44,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",44,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",44,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",44,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",44,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",44,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",44,null],[11,"iter","","Returns a front-to-back iterator.",44,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",44,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",44,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",44,null],[11,"len","","Returns the number of elements in the `VecDeque`.",44,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",44,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",44,{"inputs":[{"name":"vecdeque"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",44,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",44,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",44,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",44,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",44,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",44,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",44,null],[11,"push_back","","Appends an element to the back of a buffer",44,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",44,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",44,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",44,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",44,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",44,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",44,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",44,null],[11,"retain","","Retains only the elements specified by the predicate.",44,null],[11,"default","","",44,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"drop","","",44,null],[11,"clone","","",44,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[3,"VecDeque","bitflags::__core::collections","`VecDeque` is a growable ring buffer, which can be used as a double-ended\nqueue efficiently.",null,null],[11,"extend","collections::binary_heap","",45,null],[11,"extend","","",45,null],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",45,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",45,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"from","","",45,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",45,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",45,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",45,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",45,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",45,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",45,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",45,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",45,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",45,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",45,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",45,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",45,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",45,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",45,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",45,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",45,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",45,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",45,null],[11,"fmt","","",45,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",45,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"clone","","",45,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",45,null],[3,"BinaryHeap","bitflags::__core::collections","A priority queue implemented with a binary heap.",null,null],[3,"HashMap","","A hash map implementation which uses linear probing with Robin\nHood bucket stealing.",null,null],[3,"HashSet","","An implementation of a hash set using the underlying representation of a\nHashMap where the value is ().",null,null],[11,"clone","collections","",46,{"inputs":[{"name":"bound"}],"output":{"name":"bound"}}],[11,"fmt","","",46,{"inputs":[{"name":"bound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",46,null],[11,"eq","","",46,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[4,"Bound","bitflags::__core::collections","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",46,null],[13,"Excluded","","An exclusive bound.",46,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",46,null],[0,"vec_deque","","VecDeque is a double-ended queue, which is implemented with the help of a\ngrowing ring buffer.",null,null],[3,"VecDeque","bitflags::__core::collections::vec_deque","`VecDeque` is a growable ring buffer, which can be used as a double-ended\nqueue efficiently.",null,null],[11,"next_back","collections::vec_deque","",47,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",47,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"clone","","",47,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[3,"Iter","bitflags::__core::collections::vec_deque","`VecDeque` iterator.",null,null],[11,"next_back","collections::vec_deque","",48,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",48,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[3,"IterMut","bitflags::__core::collections::vec_deque","`VecDeque` mutable iterator.",null,null],[11,"next_back","collections::vec_deque","",49,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",49,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"clone","","",49,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[3,"IntoIter","bitflags::__core::collections::vec_deque","A by-value VecDeque iterator",null,null],[11,"next_back","collections::vec_deque","",50,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"next","","",50,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"drop","","",50,null],[3,"Drain","bitflags::__core::collections::vec_deque","A draining VecDeque iterator",null,null],[0,"linked_list","bitflags::__core::collections","A doubly-linked list with owned nodes.",null,null],[11,"hash","collections::linked_list","",51,null],[11,"fmt","","",51,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"cmp","","",51,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",51,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"eq","","",51,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"extend","","",51,null],[11,"extend","","",51,null],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",51,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",51,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"drop","","",51,null],[11,"new","","Creates an empty `LinkedList`.",51,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",51,null],[11,"iter","","Provides a forward iterator.",51,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",51,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",51,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",51,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",51,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",51,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",51,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",51,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",51,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",51,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",51,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",51,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",51,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",51,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"front_place","","Returns a place for insertion at the front of the list.",51,{"inputs":[{"name":"linkedlist"}],"output":{"name":"frontplace"}}],[11,"back_place","","Returns a place for insertion at the back of the list.",51,{"inputs":[{"name":"linkedlist"}],"output":{"name":"backplace"}}],[11,"default","","",51,{"inputs":[],"output":{"name":"linkedlist"}}],[3,"LinkedList","bitflags::__core::collections::linked_list","A doubly-linked list.",null,null],[11,"next_back","collections::linked_list","",52,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",52,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"clone","","",52,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[3,"Iter","bitflags::__core::collections::linked_list","An iterator over references to the items of a `LinkedList`.",null,null],[11,"insert_next","collections::linked_list","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",53,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",53,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",53,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",53,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[3,"IterMut","bitflags::__core::collections::linked_list","An iterator over mutable references to the items of a `LinkedList`.",null,null],[11,"next_back","collections::linked_list","",54,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",54,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"clone","","",54,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[3,"IntoIter","bitflags::__core::collections::linked_list","An iterator over the items of a `LinkedList`.",null,null],[11,"finalize","collections::linked_list","",55,null],[11,"pointer","","",55,null],[11,"make_place","","",55,{"inputs":[{"name":"frontplace"}],"output":{"name":"frontplace"}}],[3,"FrontPlace","bitflags::__core::collections::linked_list","A place for insertion at the front of a `LinkedList`.",null,null],[11,"finalize","collections::linked_list","",56,null],[11,"pointer","","",56,null],[11,"make_place","","",56,{"inputs":[{"name":"backplace"}],"output":{"name":"backplace"}}],[3,"BackPlace","bitflags::__core::collections::linked_list","A place for insertion at the back of a `LinkedList`.",null,null],[11,"iter","collections::btree::map","Gets an iterator over the entries of the map, sorted by key.",57,{"inputs":[{"name":"btreemap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",57,{"inputs":[{"name":"btreemap"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",57,{"inputs":[{"name":"btreemap"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map, in order by key.",57,{"inputs":[{"name":"btreemap"}],"output":{"name":"values"}}],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",57,{"inputs":[{"name":"btreemap"}],"output":{"name":"valuesmut"}}],[11,"len","","Returns the number of elements in the map.",57,{"inputs":[{"name":"btreemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",57,{"inputs":[{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"index","","",57,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"fmt","","",57,{"inputs":[{"name":"btreemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",57,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"eq","","",57,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"default","","",57,{"inputs":[],"output":{"name":"btreemap"}}],[11,"hash","","",57,null],[11,"extend","","",57,null],[11,"extend","","",57,null],[11,"from_iter","","",57,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"into_iter","","",57,{"inputs":[{"name":"btreemap"}],"output":{"name":"intoiter"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",57,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",57,null],[11,"get","","Returns a reference to the value corresponding to the key.",57,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",57,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",57,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",57,{"inputs":[{"name":"btreemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",57,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",57,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",57,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",57,{"inputs":[{"name":"btreemap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"clone","","",57,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"drop","","",57,null],[3,"BTreeMap","bitflags::__core::collections","A map based on a B-Tree.",null,null],[11,"fmt","collections::btree::set","",58,{"inputs":[{"name":"btreeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",58,{"inputs":[],"output":{"name":"btreeset"}}],[11,"extend","","",58,null],[11,"extend","","",58,null],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",58,{"inputs":[{"name":"btreeset"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",58,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",58,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",58,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",58,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",58,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",58,{"inputs":[{"name":"btreeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",58,{"inputs":[{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",58,null],[11,"contains","","Returns `true` if the set contains a value.",58,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",58,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",58,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",58,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",58,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",58,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",58,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",58,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",58,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",58,{"inputs":[{"name":"btreeset"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",58,{"inputs":[{"name":"btreeset"}],"output":{"name":"iter"}}],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",58,{"inputs":[],"output":{"name":"btreeset"}}],[11,"clone","","",58,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"hash","","",58,null],[11,"eq","","",58,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"cmp","","",58,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",58,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",58,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",58,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",58,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",58,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[3,"BTreeSet","bitflags::__core::collections","A set based on a B-Tree.",null,null],[0,"btree_set","","",null,null],[3,"BTreeSet","bitflags::__core::collections::btree_set","A set based on a B-Tree.",null,null],[11,"next","collections::btree::set","",59,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"clone","","",59,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[3,"SymmetricDifference","bitflags::__core::collections::btree_set","A lazy iterator producing elements in the set symmetric difference (in-order).",null,null],[11,"len","collections::btree::set","",60,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",60,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",60,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[3,"IntoIter","bitflags::__core::collections::btree_set","An owning iterator over a BTreeSet&#39;s items.",null,null],[11,"len","collections::btree::set","",61,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next_back","","",61,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",61,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"clone","","",61,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[3,"Iter","bitflags::__core::collections::btree_set","An iterator over a BTreeSet&#39;s items.",null,null],[11,"next","collections::btree::set","",62,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"clone","","",62,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[3,"Union","bitflags::__core::collections::btree_set","A lazy iterator producing elements in the set union (in-order).",null,null],[11,"next","collections::btree::set","",63,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"clone","","",63,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[3,"Difference","bitflags::__core::collections::btree_set","A lazy iterator producing elements in the set difference (in-order).",null,null],[11,"next","collections::btree::set","",64,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"clone","","",64,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[3,"Intersection","bitflags::__core::collections::btree_set","A lazy iterator producing elements in the set intersection (in-order).",null,null],[11,"next_back","collections::btree::set","",65,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",65,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",65,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[3,"Range","bitflags::__core::collections::btree_set","An iterator over a sub-range of BTreeSet&#39;s items.",null,null],[3,"LinkedList","bitflags::__core::collections","A doubly-linked list.",null,null],[0,"btree_map","","",null,null],[11,"key","collections::btree::map","Gets a reference to the key in the entry.",66,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"k"}}],[11,"get","","Gets a reference to the value in the entry.",66,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",66,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",66,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",66,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",66,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[3,"OccupiedEntry","bitflags::__core::collections::btree_map","An occupied Entry.",null,null],[11,"len","collections::btree::map","",67,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next_back","","",67,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",67,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[3,"IterMut","bitflags::__core::collections::btree_map","A mutable iterator over a BTreeMap&#39;s entries.",null,null],[11,"key","collections::btree::map","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",68,{"inputs":[{"name":"vacantentry"}],"output":{"name":"k"}}],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",68,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[3,"VacantEntry","bitflags::__core::collections::btree_map","A vacant Entry.",null,null],[11,"len","collections::btree::map","",69,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",69,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",69,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"drop","","",69,null],[3,"IntoIter","bitflags::__core::collections::btree_map","An owning iterator over a BTreeMap&#39;s entries.",null,null],[11,"clone","collections::btree::map","",70,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"len","","",70,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"next_back","","",70,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"next","","",70,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[3,"Keys","bitflags::__core::collections::btree_map","An iterator over a BTreeMap&#39;s keys.",null,null],[11,"clone","collections::btree::map","",71,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"len","","",71,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next_back","","",71,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",71,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[3,"Iter","bitflags::__core::collections::btree_map","An iterator over a BTreeMap&#39;s entries.",null,null],[11,"clone","collections::btree::map","",72,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next_back","","",72,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",72,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[3,"Range","bitflags::__core::collections::btree_map","An iterator over a sub-range of BTreeMap&#39;s entries.",null,null],[11,"clone","collections::btree::map","",73,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"len","","",73,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"next_back","","",73,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"next","","",73,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[3,"Values","bitflags::__core::collections::btree_map","An iterator over a BTreeMap&#39;s values.",null,null],[3,"BTreeMap","","A map based on a B-Tree.",null,null],[11,"len","collections::btree::map","",74,{"inputs":[{"name":"valuesmut"}],"output":{"name":"usize"}}],[11,"next_back","","",74,{"inputs":[{"name":"valuesmut"}],"output":{"name":"option"}}],[11,"next","","",74,{"inputs":[{"name":"valuesmut"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[3,"ValuesMut","bitflags::__core::collections::btree_map","A mutable iterator over a BTreeMap&#39;s values.",null,null],[11,"next_back","collections::btree::map","",75,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"next","","",75,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[3,"RangeMut","bitflags::__core::collections::btree_map","A mutable iterator over a sub-range of BTreeMap&#39;s entries.",null,null],[11,"or_insert","collections::btree::map","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",76,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",76,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[4,"Entry","bitflags::__core::collections::btree_map","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",76,null],[13,"Occupied","","An occupied Entry",76,null],[0,"binary_heap","bitflags::__core::collections","A priority queue implemented with a binary heap.",null,null],[3,"BinaryHeap","bitflags::__core::collections::binary_heap","A priority queue implemented with a binary heap.",null,null],[11,"next_back","collections::binary_heap","",77,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",77,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"clone","","",77,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[3,"Iter","bitflags::__core::collections::binary_heap","`BinaryHeap` iterator.",null,null],[11,"next_back","collections::binary_heap","",78,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",78,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[3,"IntoIter","bitflags::__core::collections::binary_heap","An iterator that moves out of a `BinaryHeap`.",null,null],[11,"next_back","collections::binary_heap","",79,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"next","","",79,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[3,"Drain","bitflags::__core::collections::binary_heap","An iterator that drains a `BinaryHeap`.",null,null],[0,"env","bitflags::__core","Inspection and manipulation of the process&#39;s environment.",null,null],[5,"current_dir","bitflags::__core::env","Returns the current working directory as a `PathBuf`.",null,{"inputs":[],"output":{"name":"result"}}],[5,"set_current_dir","","Changes the current working directory to the specified path, returning\nwhether the change was completed successfully or not.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[3,"Vars","","An iterator over a snapshot of the environment variables of this process.",null,null],[3,"VarsOs","","An iterator over a snapshot of the environment variables of this process.",null,null],[5,"vars","","Returns an iterator of (variable, value) pairs of strings, for all the\nenvironment variables of the current process.",null,{"inputs":[],"output":{"name":"vars"}}],[5,"vars_os","","Returns an iterator of (variable, value) pairs of OS strings, for all the\nenvironment variables of the current process.",null,{"inputs":[],"output":{"name":"varsos"}}],[5,"var","","Fetches the environment variable `key` from the current process.",null,{"inputs":[{"name":"k"}],"output":{"name":"result"}}],[5,"var_os","","Fetches the environment variable `key` from the current process, returning\n`None` if the variable isn&#39;t set.",null,{"inputs":[{"name":"k"}],"output":{"name":"option"}}],[4,"VarError","","Possible errors from the `env::var` method.",null,null],[13,"NotPresent","","The specified environment variable was not present in the current\nprocess&#39;s environment.",80,null],[13,"NotUnicode","","The specified environment variable was found, but it did not contain\nvalid unicode data. The found data is returned as a payload of this\nvariant.",80,null],[5,"set_var","","Sets the environment variable `k` to the value `v` for the currently running\nprocess.",null,null],[5,"remove_var","","Removes an environment variable from the environment of the currently running process.",null,null],[3,"SplitPaths","","An iterator over `PathBuf` instances for parsing an environment variable\naccording to platform-specific conventions.",null,null],[5,"split_paths","","Parses input according to platform conventions for the `PATH`\nenvironment variable.",null,{"inputs":[{"name":"t"}],"output":{"name":"splitpaths"}}],[3,"JoinPathsError","","Error type returned from `std::env::join_paths` when paths fail to be\njoined.",null,null],[5,"join_paths","","Joins a collection of `Path`s appropriately for the `PATH`\nenvironment variable.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"home_dir","","Returns the path of the current user&#39;s home directory if known.",null,{"inputs":[],"output":{"name":"option"}}],[5,"temp_dir","","Returns the path of a temporary directory.",null,{"inputs":[],"output":{"name":"pathbuf"}}],[5,"current_exe","","Returns the full filesystem path of the current running executable.",null,{"inputs":[],"output":{"name":"result"}}],[3,"Args","","An iterator over the arguments of a process, yielding a `String` value\nfor each argument.",null,null],[3,"ArgsOs","","An iterator over the arguments of a process, yielding an `OsString` value\nfor each argument.",null,null],[5,"args","","Returns the arguments which this program was started with (normally passed\nvia the command line).",null,{"inputs":[],"output":{"name":"args"}}],[5,"args_os","","Returns the arguments which this program was started with (normally passed\nvia the command line).",null,{"inputs":[],"output":{"name":"argsos"}}],[0,"consts","","Constants associated with the current target",null,null],[17,"ARCH","bitflags::__core::env::consts","A string describing the architecture of the CPU that is currently\nin use.",null,null],[17,"FAMILY","","The family of the operating system. Example value is `unix`.",null,null],[17,"OS","","A string describing the specific operating system in use.\nExample value is `linux`.",null,null],[17,"DLL_PREFIX","","Specifies the filename prefix used for shared libraries on this\nplatform. Example value is `lib`.",null,null],[17,"DLL_SUFFIX","","Specifies the filename suffix used for shared libraries on this\nplatform. Example value is `.so`.",null,null],[17,"DLL_EXTENSION","","Specifies the file extension used for shared libraries on this\nplatform that goes after the dot. Example value is `so`.",null,null],[17,"EXE_SUFFIX","","Specifies the filename suffix used for executable binaries on this\nplatform. Example value is `.exe`.",null,null],[17,"EXE_EXTENSION","","Specifies the file extension, if any, used for executable binaries\non this platform. Example value is `exe`.",null,null],[0,"ffi","bitflags::__core","Utilities related to FFI bindings.",null,null],[3,"OsString","bitflags::__core::ffi","A type that can represent owned, mutable platform-native strings, but is\ncheaply inter-convertible with Rust strings.",null,null],[3,"OsStr","","Slices into OS strings (see `OsString`).",null,null],[3,"CString","","A type representing an owned C-compatible string",null,null],[3,"CStr","","Representation of a borrowed C string.",null,null],[3,"NulError","","An error returned from `CString::new` to indicate that a nul byte was found\nin the vector provided.",null,null],[3,"IntoStringError","","An error returned from `CString::into_string` to indicate that a UTF-8 error\nwas encountered during the conversion.",null,null],[0,"fs","bitflags::__core","Filesystem manipulation operations.",null,null],[3,"File","bitflags::__core::fs","A reference to an open file on the filesystem.",null,null],[3,"Metadata","","Metadata information about a file.",null,null],[3,"ReadDir","","Iterator over the entries in a directory.",null,null],[3,"DirEntry","","Entries returned by the `ReadDir` iterator.",null,null],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",null,null],[3,"Permissions","","Representation of the various permissions on a file.",null,null],[3,"FileType","","An structure representing a type of file with accessors for each file type.",null,null],[3,"DirBuilder","","A builder used to create directories in various manners.",null,null],[5,"remove_file","","Removes a file from the filesystem.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"metadata","","Given a path, query the file system to get information about a file,\ndirectory, etc.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"symlink_metadata","","Query the metadata about a file without following symlinks.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"rename","","Rename a file or directory to a new name, replacing the original file if\n`to` already exists.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"copy","","Copies the contents of one file to another. This function will also\ncopy the permission bits of the original file to the destination file.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"hard_link","","Creates a new hard link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"soft_link","","Creates a new symbolic link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"read_link","","Reads a symbolic link, returning the file that the link points to.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"canonicalize","","Returns the canonical form of a path with all intermediate components\nnormalized and symbolic links resolved.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"create_dir","","Creates a new, empty directory at the provided path",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"create_dir_all","","Recursively create a directory and all of its parent components if they\nare missing.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"remove_dir","","Removes an existing, empty directory.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"remove_dir_all","","Removes a directory at this path, after removing all its contents. Use\ncarefully!",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"read_dir","","Returns an iterator over the entries within a directory.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"set_permissions","","Changes the permissions found on a file or a directory.",null,{"inputs":[{"name":"p"},{"name":"permissions"}],"output":{"name":"result"}}],[0,"io","bitflags::__core","Traits, helpers, and type definitions for core I/O functionality.",null,null],[0,"prelude","bitflags::__core::io","The I/O Prelude",null,null],[8,"Seek","bitflags::__core::io::prelude","The `Seek` trait provides a cursor which can be moved within a stream of\nbytes.",null,null],[10,"seek","","Seek to an offset, in bytes, in a stream.",81,{"inputs":[{"name":"seek"},{"name":"seekfrom"}],"output":{"name":"result"}}],[8,"BufRead","","A `BufRead` is a type of `Read`er which has an internal buffer, allowing it\nto perform extra ways of reading.",null,null],[10,"fill_buf","","Fills the internal buffer of this object, returning the buffer contents.",82,{"inputs":[{"name":"bufread"}],"output":{"name":"result"}}],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to `read`.",82,null],[11,"read_until","","Read all bytes into `buf` until the delimiter `byte` is reached.",82,{"inputs":[{"name":"bufread"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","Read all bytes until a newline (the 0xA byte) is reached, and append\nthem to the provided buffer.",82,{"inputs":[{"name":"bufread"},{"name":"string"}],"output":{"name":"result"}}],[11,"split","","Returns an iterator over the contents of this reader split on the byte\n`byte`.",82,{"inputs":[{"name":"bufread"},{"name":"u8"}],"output":{"name":"split"}}],[11,"lines","","Returns an iterator over the lines of this reader.",82,{"inputs":[{"name":"bufread"}],"output":{"name":"lines"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",83,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",83,{"inputs":[{"name":"write"}],"output":{"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",83,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",83,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Write`.",83,{"inputs":[{"name":"write"}],"output":{"name":"self"}}],[8,"Read","","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.",84,null],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",84,{"inputs":[{"name":"read"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",84,{"inputs":[{"name":"read"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",84,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Read`.",84,{"inputs":[{"name":"read"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",84,{"inputs":[{"name":"read"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",84,{"inputs":[{"name":"read"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",84,{"inputs":[{"name":"read"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",84,{"inputs":[{"name":"read"},{"name":"u64"}],"output":{"name":"take"}}],[8,"Read","bitflags::__core::io","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.",84,null],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",84,{"inputs":[{"name":"read"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",84,{"inputs":[{"name":"read"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",84,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Read`.",84,{"inputs":[{"name":"read"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",84,{"inputs":[{"name":"read"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",84,{"inputs":[{"name":"read"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",84,{"inputs":[{"name":"read"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",84,{"inputs":[{"name":"read"},{"name":"u64"}],"output":{"name":"take"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",83,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",83,{"inputs":[{"name":"write"}],"output":{"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",83,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",83,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Write`.",83,{"inputs":[{"name":"write"}],"output":{"name":"self"}}],[8,"Seek","","The `Seek` trait provides a cursor which can be moved within a stream of\nbytes.",null,null],[10,"seek","","Seek to an offset, in bytes, in a stream.",81,{"inputs":[{"name":"seek"},{"name":"seekfrom"}],"output":{"name":"result"}}],[4,"SeekFrom","","Enumeration of possible methods to seek within an I/O object.",null,null],[13,"Start","","Set the offset to the provided number of bytes.",85,null],[13,"End","","Set the offset to the size of this object plus the specified number of\nbytes.",85,null],[13,"Current","","Set the offset to the current position plus the specified number of\nbytes.",85,null],[8,"BufRead","","A `BufRead` is a type of `Read`er which has an internal buffer, allowing it\nto perform extra ways of reading.",null,null],[10,"fill_buf","","Fills the internal buffer of this object, returning the buffer contents.",82,{"inputs":[{"name":"bufread"}],"output":{"name":"result"}}],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to `read`.",82,null],[11,"read_until","","Read all bytes into `buf` until the delimiter `byte` is reached.",82,{"inputs":[{"name":"bufread"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","Read all bytes until a newline (the 0xA byte) is reached, and append\nthem to the provided buffer.",82,{"inputs":[{"name":"bufread"},{"name":"string"}],"output":{"name":"result"}}],[11,"split","","Returns an iterator over the contents of this reader split on the byte\n`byte`.",82,{"inputs":[{"name":"bufread"},{"name":"u8"}],"output":{"name":"split"}}],[11,"lines","","Returns an iterator over the lines of this reader.",82,{"inputs":[{"name":"bufread"}],"output":{"name":"lines"}}],[3,"Chain","","Adaptor to chain together two readers.",null,null],[3,"Take","","Reader adaptor which limits the bytes read from an underlying reader.",null,null],[3,"Bytes","","An iterator over `u8` values of a reader.",null,null],[3,"Chars","","An iterator over the `char`s of a reader.",null,null],[4,"CharsError","","An enumeration of possible errors that can be generated from the `Chars`\nadapter.",null,null],[13,"NotUtf8","","Variant representing that the underlying stream was read successfully\nbut it did not contain valid utf8 data.",86,null],[13,"Other","","Variant representing that an I/O error occurred.",86,null],[3,"Split","","An iterator over the contents of an instance of `BufRead` split on a\nparticular byte.",null,null],[3,"Lines","","An iterator over the lines of an instance of `BufRead`.",null,null],[3,"StderrLock","","A locked reference to the `Stderr` handle.",null,null],[3,"Cursor","","A `Cursor` wraps another type and provides it with a\n[`Seek`](trait.Seek.html) implementation.",null,null],[5,"empty","","Constructs a new handle to an empty reader.",null,{"inputs":[],"output":{"name":"empty"}}],[3,"Stdin","","A handle to the standard input stream of a process.",null,null],[5,"stdout","","Constructs a new handle to the standard output of the current process.",null,{"inputs":[],"output":{"name":"stdout"}}],[3,"BufWriter","","Wraps a writer and buffers its output.",null,null],[6,"Result","","",null,null],[5,"repeat","","Creates an instance of a reader that infinitely repeats one byte.",null,{"inputs":[{"name":"u8"}],"output":{"name":"repeat"}}],[3,"StdoutLock","","A locked reference to the `Stdout` handle.",null,null],[3,"LineWriter","","Wraps a writer and buffers output to it, flushing whenever a newline\n(`0x0a`, `&#39;\\n&#39;`) is detected.",null,null],[3,"Stdout","","A handle to the global standard output stream of the current process.",null,null],[3,"Repeat","","A reader which yields one byte over and over and over and over and over and...",null,null],[5,"stderr","","Constructs a new handle to the standard error of the current process.",null,{"inputs":[],"output":{"name":"stderr"}}],[4,"ErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",87,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",87,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",87,null],[13,"ConnectionReset","","The connection was reset by the remote server.",87,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",87,null],[13,"NotConnected","","The network operation failed because it was not connected yet.",87,null],[13,"AddrInUse","","A socket address could not be bound because the address is already in\nuse elsewhere.",87,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not\nlocal.",87,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",87,null],[13,"AlreadyExists","","An entity already exists, often a file.",87,null],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was\nrequested to not occur.",87,null],[13,"InvalidInput","","A parameter was incorrect.",87,null],[13,"InvalidData","","Data not valid for the operation were encountered.",87,null],[13,"TimedOut","","The I/O operation&#39;s timeout expired, causing it to be canceled.",87,null],[13,"WriteZero","","An error returned when an operation could not be completed because a\ncall to `write` returned `Ok(0)`.",87,null],[13,"Interrupted","","This operation was interrupted.",87,null],[13,"Other","","Any I/O error not part of this list.",87,null],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an\n&quot;end of file&quot; was reached prematurely.",87,null],[3,"Stderr","","A handle to the standard error stream of a process.",null,null],[5,"sink","","Creates an instance of a writer which will successfully consume all data.",null,{"inputs":[],"output":{"name":"sink"}}],[5,"stdin","","Constructs a new handle to the standard input of the current process.",null,{"inputs":[],"output":{"name":"stdin"}}],[3,"BufReader","","The `BufReader` struct adds buffering to any reader.",null,null],[5,"copy","","Copies the entire contents of a reader into a writer.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"result"}}],[3,"IntoInnerError","","An error returned by `into_inner` which combines an error that\nhappened while writing out the buffer, and the buffered writer object\nwhich may be used to recover from the condition.",null,null],[3,"Empty","","A reader which is always at EOF.",null,null],[3,"Error","","The error type for I/O operations of the `Read`, `Write`, `Seek`, and\nassociated traits.",null,null],[3,"StdinLock","","A locked reference to the `Stdin` handle.",null,null],[3,"Sink","","A writer which will move data into the void.",null,null],[0,"net","bitflags::__core","Networking primitives for TCP/UDP communication.",null,null],[4,"Shutdown","bitflags::__core::net","Possible values which can be passed to the `shutdown` method of `TcpStream`.",null,null],[13,"Read","","Indicates that the reading portion of this stream/socket should be shut\ndown. All currently blocked and future reads will return `Ok(0)`.",88,null],[13,"Write","","Indicates that the writing portion of this stream/socket should be shut\ndown. All currently blocked and future writes will return an error.",88,null],[13,"Both","","Shut down both the reading and writing portions of this stream.",88,null],[3,"LookupHost","","An iterator over `SocketAddr` values returned from a host lookup operation.",null,null],[5,"lookup_host","","Resolve the host specified by `host` as a number of `SocketAddr` instances.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[4,"IpAddr","","An IP address, either an IPv4 or IPv6 address.",null,null],[13,"V4","","Representation of an IPv4 address.",89,null],[13,"V6","","Representation of an IPv6 address.",89,null],[8,"ToSocketAddrs","","A trait for objects which can be converted or resolved to one or more\n`SocketAddr` values.",null,null],[16,"Iter","","Returned iterator over socket addresses which this type may correspond\nto.",90,null],[10,"to_socket_addrs","","Converts this object to an iterator of resolved `SocketAddr`s.",90,{"inputs":[{"name":"tosocketaddrs"}],"output":{"name":"result"}}],[3,"AddrParseError","","An error returned when parsing an IP address or a socket address.",null,null],[3,"Incoming","","An infinite iterator over the connections from a `TcpListener`.",null,null],[4,"Ipv6MulticastScope","","",null,null],[13,"InterfaceLocal","","",91,null],[13,"LinkLocal","","",91,null],[13,"RealmLocal","","",91,null],[13,"AdminLocal","","",91,null],[13,"SiteLocal","","",91,null],[13,"OrganizationLocal","","",91,null],[13,"Global","","",91,null],[3,"SocketAddrV4","","An IPv4 socket address which is a (ip, port) combination.",null,null],[3,"Ipv4Addr","","Representation of an IPv4 address.",null,null],[3,"UdpSocket","","A User Datagram Protocol socket.",null,null],[4,"SocketAddr","","Representation of a socket address for networking applications.",null,null],[13,"V4","","An IPv4 socket address which is a (ip, port) combination.",92,null],[13,"V6","","An IPv6 socket address",92,null],[3,"Ipv6Addr","","Representation of an IPv6 address.",null,null],[3,"SocketAddrV6","","An IPv6 socket address.",null,null],[3,"TcpListener","","A structure representing a socket server.",null,null],[3,"TcpStream","","A structure which represents a TCP stream between a local socket and a\nremote socket.",null,null],[0,"os","bitflags::__core","OS-specific functionality.",null,null],[0,"linux","bitflags::__core::os","Linux-specific definitions",null,null],[0,"raw","bitflags::__core::os::linux","Linux-specific raw type definitions",null,null],[6,"dev_t","bitflags::__core::os::linux::raw","",null,null],[6,"mode_t","","",null,null],[6,"pthread_t","","",null,null],[6,"off_t","","",null,null],[6,"time_t","","",null,null],[6,"nlink_t","","",null,null],[6,"ino_t","","",null,null],[6,"blkcnt_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",93,null],[12,"st_ino","","",93,null],[12,"st_nlink","","",93,null],[12,"st_mode","","",93,null],[12,"st_uid","","",93,null],[12,"st_gid","","",93,null],[12,"__pad0","","",93,null],[12,"st_rdev","","",93,null],[12,"st_size","","",93,null],[12,"st_blksize","","",93,null],[12,"st_blocks","","",93,null],[12,"st_atime","","",93,null],[12,"st_atime_nsec","","",93,null],[12,"st_mtime","","",93,null],[12,"st_mtime_nsec","","",93,null],[12,"st_ctime","","",93,null],[12,"st_ctime_nsec","","",93,null],[12,"__unused","","",93,null],[6,"blksize_t","","",null,null],[0,"fs","bitflags::__core::os::linux","",null,null],[8,"MetadataExt","bitflags::__core::os::linux::fs","OS-specific extension methods for `fs::Metadata`",null,null],[10,"as_raw_stat","","Gain a reference to the underlying `stat` structure which contains\nthe raw information returned by the OS.",94,{"inputs":[{"name":"metadataext"}],"output":{"name":"stat"}}],[10,"st_dev","","",94,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"st_ino","","",94,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"st_mode","","",94,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"st_nlink","","",94,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"st_uid","","",94,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"st_gid","","",94,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"st_rdev","","",94,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"st_size","","",94,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"st_atime","","",94,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"st_atime_nsec","","",94,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"st_mtime","","",94,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"st_mtime_nsec","","",94,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"st_ctime","","",94,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"st_ctime_nsec","","",94,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"st_blksize","","",94,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"st_blocks","","",94,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[0,"raw","bitflags::__core::os","Raw OS-specific types for the current platform/architecture",null,null],[6,"c_char","bitflags::__core::os::raw","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[4,"c_void","","Type used to construct void pointers for use with C.",null,null],[0,"ext","bitflags::__core::os","Experimental extensions to `std` for Unix platforms.",null,null],[0,"io","bitflags::__core::os::ext","Unix-specific extensions to general I/O primitives",null,null],[6,"RawFd","bitflags::__core::os::ext::io","",null,null],[8,"AsRawFd","","A trait to extract the raw unix file descriptor from an underlying\nobject.",null,null],[10,"as_raw_fd","","Extracts the raw file descriptor.",95,{"inputs":[{"name":"asrawfd"}],"output":{"name":"i32"}}],[8,"FromRawFd","","A trait to express the ability to construct an object from a raw file\ndescriptor.",null,null],[10,"from_raw_fd","","Constructs a new instances of `Self` from the given raw file\ndescriptor.",96,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[8,"IntoRawFd","","A trait to express the ability to consume an object and acquire ownership of\nits raw file descriptor.",null,null],[10,"into_raw_fd","","Consumes this object, returning the raw underlying file descriptor.",97,{"inputs":[{"name":"intorawfd"}],"output":{"name":"i32"}}],[0,"ffi","bitflags::__core::os::ext","Unix-specific extension to the primitives in the `std::ffi` module",null,null],[8,"OsStringExt","bitflags::__core::os::ext::ffi","Unix-specific extensions to `OsString`.",null,null],[10,"from_vec","","Creates an `OsString` from a byte vector.",98,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[10,"into_vec","","Yields the underlying byte vector of this `OsString`.",98,{"inputs":[{"name":"osstringext"}],"output":{"name":"vec"}}],[8,"OsStrExt","","Unix-specific extensions to `OsStr`.",null,null],[10,"from_bytes","","",99,null],[10,"as_bytes","","Gets the underlying byte view of the `OsStr` slice.",99,null],[0,"fs","bitflags::__core::os::ext","Unix-specific extensions to primitives in the `std::fs` module.",null,null],[8,"PermissionsExt","bitflags::__core::os::ext::fs","Unix-specific extensions to `Permissions`",null,null],[10,"mode","","Returns the underlying raw `mode_t` bits that are the standard Unix\npermissions for this file.",100,{"inputs":[{"name":"permissionsext"}],"output":{"name":"u32"}}],[10,"set_mode","","Sets the underlying raw bits for this set of permissions.",100,null],[10,"from_mode","","Creates a new instance of `Permissions` from the given set of Unix\npermission bits.",100,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[8,"OpenOptionsExt","","Unix-specific extensions to `OpenOptions`",null,null],[10,"mode","","Sets the mode bits that a new file will be created with.",101,{"inputs":[{"name":"openoptionsext"},{"name":"u32"}],"output":{"name":"self"}}],[10,"custom_flags","","Pass custom flags to the `flags` agument of `open`.",101,{"inputs":[{"name":"openoptionsext"},{"name":"i32"}],"output":{"name":"self"}}],[8,"MetadataExt","","",null,null],[10,"dev","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"ino","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"mode","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"nlink","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"uid","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"gid","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"rdev","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"size","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"atime","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"atime_nsec","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"mtime","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"mtime_nsec","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"ctime","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"ctime_nsec","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"blksize","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"blocks","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[8,"FileTypeExt","","Add special unix types (block/char device, fifo and socket)",null,null],[10,"is_block_device","","Returns whether this file type is a block device.",103,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[10,"is_char_device","","Returns whether this file type is a char device.",103,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[10,"is_fifo","","Returns whether this file type is a fifo.",103,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[10,"is_socket","","Returns whether this file type is a socket.",103,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[8,"DirEntryExt","","Unix-specific extension methods for `fs::DirEntry`",null,null],[10,"ino","","Returns the underlying `d_ino` field in the contained `dirent`\nstructure.",104,{"inputs":[{"name":"direntryext"}],"output":{"name":"u64"}}],[5,"symlink","","Creates a new symbolic link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[8,"DirBuilderExt","","An extension trait for `fs::DirBuilder` for unix-specific options.",null,null],[10,"mode","","Sets the mode to create new directories with. This option defaults to\n0o777.",105,{"inputs":[{"name":"dirbuilderext"},{"name":"u32"}],"output":{"name":"self"}}],[0,"process","bitflags::__core::os::ext","Unix-specific extensions to primitives in the `std::process` module.",null,null],[8,"CommandExt","bitflags::__core::os::ext::process","Unix-specific extensions to the `std::process::Command` builder",null,null],[10,"uid","","Sets the child process&#39;s user id. This translates to a\n`setuid` call in the child process. Failure in the `setuid`\ncall will cause the spawn to fail.",106,{"inputs":[{"name":"commandext"},{"name":"u32"}],"output":{"name":"command"}}],[10,"gid","","Similar to `uid`, but sets the group id of the child process. This has\nthe same semantics as the `uid` field.",106,{"inputs":[{"name":"commandext"},{"name":"u32"}],"output":{"name":"command"}}],[10,"session_leader","","Create a new session (cf. `setsid(2)`) for the child process. This means\nthat the child is the leader of a new process group. The parent process\nremains the child reaper of the new process.",106,{"inputs":[{"name":"commandext"},{"name":"bool"}],"output":{"name":"command"}}],[10,"before_exec","","Schedules a closure to be run just before the `exec` function is\ninvoked.",106,{"inputs":[{"name":"commandext"},{"name":"f"}],"output":{"name":"command"}}],[10,"exec","","Performs all the required setup by this `Command`, followed by calling\nthe `execvp` syscall.",106,{"inputs":[{"name":"commandext"}],"output":{"name":"error"}}],[8,"ExitStatusExt","","Unix-specific extensions to `std::process::ExitStatus`",null,null],[10,"signal","","If the process was terminated by a signal, returns that signal.",107,{"inputs":[{"name":"exitstatusext"}],"output":{"name":"option"}}],[0,"raw","bitflags::__core::os::ext","Unix-specific primitives available on all unix platforms",null,null],[6,"uid_t","bitflags::__core::os::ext::raw","",null,null],[6,"gid_t","","",null,null],[6,"pid_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"off_t","","",null,null],[6,"pthread_t","","",null,null],[6,"ino_t","","",null,null],[6,"mode_t","","",null,null],[6,"dev_t","","",null,null],[6,"blksize_t","","",null,null],[6,"time_t","","",null,null],[6,"nlink_t","","",null,null],[0,"thread","bitflags::__core::os::ext","Unix-specific extensions to primitives in the `std::thread` module.",null,null],[6,"RawPthread","bitflags::__core::os::ext::thread","",null,null],[8,"JoinHandleExt","","Unix-specific extensions to `std::thread::JoinHandle`",null,null],[10,"as_pthread_t","","Extracts the raw pthread_t without taking ownership",108,{"inputs":[{"name":"joinhandleext"}],"output":{"name":"u64"}}],[10,"into_pthread_t","","Consumes the thread, returning the raw pthread_t",108,{"inputs":[{"name":"joinhandleext"}],"output":{"name":"u64"}}],[0,"net","bitflags::__core::os::ext","Unix-specific networking functionality",null,null],[3,"SocketAddr","bitflags::__core::os::ext::net","An address associated with a Unix socket.",null,null],[3,"UnixStream","","A Unix stream socket.",null,null],[3,"UnixListener","","A structure representing a Unix domain socket server.",null,null],[3,"Incoming","","An iterator over incoming connections to a `UnixListener`.",null,null],[3,"UnixDatagram","","A Unix datagram socket.",null,null],[0,"prelude","bitflags::__core::os::ext","A prelude for conveniently writing platform-specific code.",null,null],[8,"CommandExt","bitflags::__core::os::ext::prelude","Unix-specific extensions to the `std::process::Command` builder",null,null],[10,"uid","","Sets the child process&#39;s user id. This translates to a\n`setuid` call in the child process. Failure in the `setuid`\ncall will cause the spawn to fail.",106,{"inputs":[{"name":"commandext"},{"name":"u32"}],"output":{"name":"command"}}],[10,"gid","","Similar to `uid`, but sets the group id of the child process. This has\nthe same semantics as the `uid` field.",106,{"inputs":[{"name":"commandext"},{"name":"u32"}],"output":{"name":"command"}}],[10,"session_leader","","Create a new session (cf. `setsid(2)`) for the child process. This means\nthat the child is the leader of a new process group. The parent process\nremains the child reaper of the new process.",106,{"inputs":[{"name":"commandext"},{"name":"bool"}],"output":{"name":"command"}}],[10,"before_exec","","Schedules a closure to be run just before the `exec` function is\ninvoked.",106,{"inputs":[{"name":"commandext"},{"name":"f"}],"output":{"name":"command"}}],[10,"exec","","Performs all the required setup by this `Command`, followed by calling\nthe `execvp` syscall.",106,{"inputs":[{"name":"commandext"}],"output":{"name":"error"}}],[8,"OsStringExt","","Unix-specific extensions to `OsString`.",null,null],[10,"from_vec","","Creates an `OsString` from a byte vector.",98,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[10,"into_vec","","Yields the underlying byte vector of this `OsString`.",98,{"inputs":[{"name":"osstringext"}],"output":{"name":"vec"}}],[8,"PermissionsExt","","Unix-specific extensions to `Permissions`",null,null],[10,"mode","","Returns the underlying raw `mode_t` bits that are the standard Unix\npermissions for this file.",100,{"inputs":[{"name":"permissionsext"}],"output":{"name":"u32"}}],[10,"set_mode","","Sets the underlying raw bits for this set of permissions.",100,null],[10,"from_mode","","Creates a new instance of `Permissions` from the given set of Unix\npermission bits.",100,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[8,"OpenOptionsExt","","Unix-specific extensions to `OpenOptions`",null,null],[10,"mode","","Sets the mode bits that a new file will be created with.",101,{"inputs":[{"name":"openoptionsext"},{"name":"u32"}],"output":{"name":"self"}}],[10,"custom_flags","","Pass custom flags to the `flags` agument of `open`.",101,{"inputs":[{"name":"openoptionsext"},{"name":"i32"}],"output":{"name":"self"}}],[8,"JoinHandleExt","","Unix-specific extensions to `std::thread::JoinHandle`",null,null],[10,"as_pthread_t","","Extracts the raw pthread_t without taking ownership",108,{"inputs":[{"name":"joinhandleext"}],"output":{"name":"u64"}}],[10,"into_pthread_t","","Consumes the thread, returning the raw pthread_t",108,{"inputs":[{"name":"joinhandleext"}],"output":{"name":"u64"}}],[8,"FromRawFd","","A trait to express the ability to construct an object from a raw file\ndescriptor.",null,null],[10,"from_raw_fd","","Constructs a new instances of `Self` from the given raw file\ndescriptor.",96,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[8,"MetadataExt","","",null,null],[10,"dev","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"ino","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"mode","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"nlink","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"uid","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"gid","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"rdev","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"size","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"atime","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"atime_nsec","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"mtime","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"mtime_nsec","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"ctime","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"ctime_nsec","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"blksize","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"blocks","","",102,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[8,"FileTypeExt","","Add special unix types (block/char device, fifo and socket)",null,null],[10,"is_block_device","","Returns whether this file type is a block device.",103,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[10,"is_char_device","","Returns whether this file type is a char device.",103,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[10,"is_fifo","","Returns whether this file type is a fifo.",103,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[10,"is_socket","","Returns whether this file type is a socket.",103,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[8,"ExitStatusExt","","Unix-specific extensions to `std::process::ExitStatus`",null,null],[10,"signal","","If the process was terminated by a signal, returns that signal.",107,{"inputs":[{"name":"exitstatusext"}],"output":{"name":"option"}}],[6,"RawFd","","",null,null],[8,"AsRawFd","","A trait to extract the raw unix file descriptor from an underlying\nobject.",null,null],[10,"as_raw_fd","","Extracts the raw file descriptor.",95,{"inputs":[{"name":"asrawfd"}],"output":{"name":"i32"}}],[8,"DirEntryExt","","Unix-specific extension methods for `fs::DirEntry`",null,null],[10,"ino","","Returns the underlying `d_ino` field in the contained `dirent`\nstructure.",104,{"inputs":[{"name":"direntryext"}],"output":{"name":"u64"}}],[8,"OsStrExt","","Unix-specific extensions to `OsStr`.",null,null],[10,"from_bytes","","",99,null],[10,"as_bytes","","Gets the underlying byte view of the `OsStr` slice.",99,null],[8,"IntoRawFd","","A trait to express the ability to consume an object and acquire ownership of\nits raw file descriptor.",null,null],[10,"into_raw_fd","","Consumes this object, returning the raw underlying file descriptor.",97,{"inputs":[{"name":"intorawfd"}],"output":{"name":"i32"}}],[0,"panic","bitflags::__core","Panic support in the standard library",null,null],[5,"set_handler","bitflags::__core::panic","",null,null],[5,"take_handler","","",null,{"inputs":[],"output":{"name":"box"}}],[8,"UnwindSafe","","A marker trait which represents &quot;panic safe&quot; types in Rust.",null,null],[8,"RecoverSafe","","Deprecated, renamed to UnwindSafe",null,null],[8,"RefUnwindSafe","","A marker trait representing types where a shared reference is considered\nrecover safe.",null,null],[3,"AssertUnwindSafe","","A simple wrapper around a type to assert that it is panic safe.",null,null],[12,"0","","",109,null],[3,"AssertRecoverSafe","","Deprecated, renamed to `AssertUnwindSafe`",null,null],[12,"0","","",110,null],[5,"catch_unwind","","Invokes a closure, capturing the cause of an unwinding panic if one occurs.",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"recover","","Deprecated, renamed to `catch_unwind`",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"resume_unwind","","Triggers a panic without invoking the panic handler.",null,null],[5,"propagate","","Deprecated, use resume_unwind instead",null,null],[3,"PanicInfo","","A struct providing information about a panic.",null,null],[5,"take_hook","","Unregisters the current panic hook, returning it.",null,{"inputs":[],"output":{"name":"box"}}],[3,"Location","","A struct containing information about the location of a panic.",null,null],[5,"set_hook","","Registers a custom panic hook, replacing any that was previously registered.",null,null],[0,"path","bitflags::__core","Cross-platform path manipulation.",null,null],[4,"Prefix","bitflags::__core::path","Path prefixes (Windows only).",null,null],[13,"Verbatim","","Prefix `\\\\?\\`, together with the given component immediately following it.",111,null],[13,"VerbatimUNC","","Prefix `\\\\?\\UNC\\`, with the &quot;server&quot; and &quot;share&quot; components following it.",111,null],[13,"VerbatimDisk","","Prefix like `\\\\?\\C:\\`, for the given drive letter",111,null],[13,"DeviceNS","","Prefix `\\\\.\\`, together with the given component immediately following it.",111,null],[13,"UNC","","Prefix `\\\\server\\share`, with the given &quot;server&quot; and &quot;share&quot; components.",111,null],[13,"Disk","","Prefix `C:` for the given disk drive.",111,null],[5,"is_separator","","Determines whether the character is one of the permitted path\nseparators for the current platform.",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"MAIN_SEPARATOR","","The primary separator for the current platform",null,null],[3,"PrefixComponent","","A Windows path prefix, e.g. `C:` or `\\\\server\\share`.",null,null],[4,"Component","","A single component of a path.",null,null],[13,"Prefix","","A Windows path prefix, e.g. `C:` or `\\\\server\\share`.",112,null],[13,"RootDir","","The root directory component, appears after any prefix and before anything else",112,null],[13,"CurDir","","A reference to the current directory, i.e. `.`",112,null],[13,"ParentDir","","A reference to the parent directory, i.e. `..`",112,null],[13,"Normal","","A normal component, i.e. `a` and `b` in `a/b`",112,null],[3,"Components","","The core iterator giving the components of a path.",null,null],[3,"Iter","","An iterator over the components of a path, as `OsStr` slices.",null,null],[3,"PathBuf","","An owned, mutable path (akin to `String`).",null,null],[3,"Path","","A slice of a path (akin to `str`).",null,null],[3,"StripPrefixError","","An error returned from the `Path::strip_prefix` method indicating that the\nprefix was not found in `self`.",null,null],[3,"Display","","Helper struct for safely printing paths with `format!()` and `{}`",null,null],[0,"process","bitflags::__core","Working with processes.",null,null],[3,"Child","bitflags::__core::process","Representation of a running or exited child process.",null,null],[12,"stdin","","The handle for writing to the child&#39;s stdin, if it has been captured",113,null],[12,"stdout","","The handle for reading from the child&#39;s stdout, if it has been captured",113,null],[12,"stderr","","The handle for reading from the child&#39;s stderr, if it has been captured",113,null],[3,"ChildStdin","","A handle to a child process&#39;s stdin",null,null],[3,"ChildStdout","","A handle to a child process&#39;s stdout",null,null],[3,"ChildStderr","","A handle to a child process&#39;s stderr",null,null],[3,"Command","","The `Command` type acts as a process builder, providing fine-grained control\nover how a new process should be spawned. A default configuration can be\ngenerated using `Command::new(program)`, where `program` gives a path to the\nprogram to be executed. Additional builder methods allow the configuration\nto be changed (for example, by adding arguments) prior to spawning:",null,null],[3,"Output","","The output of a finished process.",null,null],[12,"status","","The status (exit code) of the process.",114,null],[12,"stdout","","The data that the process wrote to stdout.",114,null],[12,"stderr","","The data that the process wrote to stderr.",114,null],[3,"Stdio","","Describes what to do with a standard I/O stream for a child process.",null,null],[3,"ExitStatus","","Describes the result of a process after it has terminated.",null,null],[5,"exit","","Terminates the current process with the specified exit code.",null,null],[0,"sync","bitflags::__core","Useful synchronization primitives.",null,null],[0,"mpsc","bitflags::__core::sync","Multi-producer, single-consumer FIFO queue communication primitives.",null,null],[3,"Receiver","bitflags::__core::sync::mpsc","The receiving-half of Rust&#39;s channel type. This half can only be owned by\none thread",null,null],[3,"Iter","","An iterator over messages on a receiver, this iterator will block\nwhenever `next` is called, waiting for a new message, and `None` will be\nreturned when the corresponding channel has hung up.",null,null],[3,"IntoIter","","An owning iterator over messages on a receiver, this iterator will block\nwhenever `next` is called, waiting for a new message, and `None` will be\nreturned when the corresponding channel has hung up.",null,null],[3,"Sender","","The sending-half of Rust&#39;s asynchronous channel type. This half can only be\nowned by one thread, but it can be cloned to send to other threads.",null,null],[3,"SyncSender","","The sending-half of Rust&#39;s synchronous channel type. This half can only be\nowned by one thread, but it can be cloned to send to other threads.",null,null],[3,"SendError","","An error returned from the `send` function on channels.",null,null],[12,"0","","",115,null],[3,"RecvError","","An error returned from the `recv` function on a `Receiver`.",null,null],[4,"TryRecvError","","This enumeration is the list of the possible reasons that `try_recv` could\nnot return data when called.",null,null],[13,"Empty","","This channel is currently empty, but the sender(s) have not yet\ndisconnected, so data may yet become available.",116,null],[13,"Disconnected","","This channel&#39;s sending half has become disconnected, and there will\nnever be any more data received on this channel",116,null],[4,"TrySendError","","This enumeration is the list of the possible error outcomes for the\n`SyncSender::try_send` method.",null,null],[13,"Full","","The data could not be sent on the channel because it would require that\nthe callee block to send the data.",117,null],[13,"Disconnected","","This channel&#39;s receiving half has disconnected, so the data could not be\nsent. The data is returned back to the callee in this case.",117,null],[5,"channel","","Creates a new asynchronous channel, returning the sender/receiver halves.",null,null],[5,"sync_channel","","Creates a new synchronous, bounded channel.",null,null],[3,"Handle","","A handle to a receiver which is currently a member of a `Select` set of\nreceivers.  This handle is used to keep the receiver in the set as well as\ninteract with the underlying receiver.",null,null],[3,"Select","","The &quot;receiver set&quot; of the select interface. This structure is used to manage\na set of receivers which are being selected over.",null,null],[3,"RwLock","bitflags::__core::sync","A reader-writer lock",null,null],[3,"Barrier","","A barrier enables multiple threads to synchronize the beginning\nof some computation.",null,null],[0,"atomic","","Atomic types",null,null],[11,"fmt","core::sync::atomic","",118,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `AtomicBool`.",118,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",118,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",118,null],[11,"swap","","Stores a value into the bool, returning the old value.",118,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",118,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",118,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",118,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",118,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",118,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",118,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",118,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"default","","",118,{"inputs":[],"output":{"name":"atomicbool"}}],[3,"AtomicBool","bitflags::__core::sync::atomic","A boolean type which can be safely shared between threads.",null,null],[11,"fmt","core::sync::atomic","",119,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `AtomicIsize`.",119,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",119,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",119,null],[11,"swap","","Stores a value into the isize, returning the old value.",119,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",119,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the `isize` if the current value is the same as the `current` value.",119,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `isize` if the current value is the same as the `current` value.",119,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",119,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",119,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",119,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",119,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",119,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"default","","",119,{"inputs":[],"output":{"name":"atomicisize"}}],[3,"AtomicIsize","bitflags::__core::sync::atomic","A signed integer type which can be safely shared between threads.",null,null],[11,"fmt","core::sync::atomic","",120,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `AtomicUsize`.",120,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",120,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",120,null],[11,"swap","","Stores a value into the usize, returning the old value.",120,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",120,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the `usize` if the current value is the same as the `current` value.",120,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `usize` if the current value is the same as the `current` value.",120,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",120,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",120,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",120,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",120,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",120,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"default","","",120,{"inputs":[],"output":{"name":"atomicusize"}}],[3,"AtomicUsize","bitflags::__core::sync::atomic","An unsigned integer type which can be safely shared between threads.",null,null],[11,"fmt","core::sync::atomic","",121,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `AtomicPtr`.",121,null],[11,"load","","Loads a value from the pointer.",121,null],[11,"store","","Stores a value into the pointer.",121,null],[11,"swap","","Stores a value into the pointer, returning the old value.",121,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",121,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",121,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",121,null],[11,"default","","",121,{"inputs":[],"output":{"name":"atomicptr"}}],[3,"AtomicPtr","bitflags::__core::sync::atomic","A raw pointer type which can be safely shared between threads.",null,null],[11,"clone","core::sync::atomic","",122,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"fmt","","",122,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Ordering","bitflags::__core::sync::atomic","Atomic memory orderings",null,null],[13,"Relaxed","","No ordering constraints, only atomic operations. Corresponds to LLVM&#39;s\n`Monotonic` ordering.",122,null],[13,"Release","","When coupled with a store, all previous writes become visible\nto another thread that performs a load with `Acquire` ordering\non the same value.",122,null],[13,"Acquire","","When coupled with a load, all subsequent loads will see data\nwritten before a store with `Release` ordering on the same value\nin another thread.",122,null],[13,"AcqRel","","When coupled with a load, uses `Acquire` ordering, and with a store\n`Release` ordering.",122,null],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all\nsequentially consistent operations in the same order.",122,null],[17,"ATOMIC_BOOL_INIT","","An `AtomicBool` initialized to `false`.",null,null],[17,"ATOMIC_ISIZE_INIT","","An `AtomicIsize` initialized to `0`.",null,null],[17,"ATOMIC_USIZE_INIT","","An `AtomicUsize` initialized to `0`.",null,null],[5,"fence","","An atomic fence.",null,null],[3,"RwLockReadGuard","bitflags::__core::sync","RAII structure used to release the shared read access of a lock when\ndropped.",null,null],[3,"WaitTimeoutResult","","A type indicating whether a timed wait on a condition variable returned\ndue to a time out or not.",null,null],[4,"TryLockError","","An enumeration of possible errors which can occur while calling the\n`try_lock` method.",null,null],[13,"Poisoned","","The lock could not be acquired because another thread failed while holding\nthe lock.",123,null],[13,"WouldBlock","","The lock could not be acquired at this time because the operation would\notherwise block.",123,null],[6,"TryLockResult","","",null,null],[3,"PoisonError","","A type of error which can be returned whenever a lock is acquired.",null,null],[3,"Once","","A synchronization primitive which can be used to run a one-time global\ninitialization. Useful for one-time initialization for FFI or related\nfunctionality. This type can only be constructed with the `ONCE_INIT`\nvalue.",null,null],[11,"as_ref","alloc::arc","",124,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"borrow","","",124,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"from","","",124,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"hash","","",124,null],[11,"default","","",124,{"inputs":[],"output":{"name":"arc"}}],[11,"fmt","","",124,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",124,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Partial comparison for two `Arc&lt;T&gt;`s.",124,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Arc&lt;T&gt;`s.",124,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Arc&lt;T&gt;`s.",124,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Arc&lt;T&gt;`s.",124,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Arc&lt;T&gt;`s.",124,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"eq","","Equality for two `Arc&lt;T&gt;`s.",124,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Arc&lt;T&gt;`s.",124,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"drop","","Drops the `Arc&lt;T&gt;`.",124,null],[11,"get_mut","","Returns a mutable reference to the contained value if the `Arc&lt;T&gt;` has\none strong reference and no weak references.",124,{"inputs":[{"name":"arc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Arc&lt;T&gt;`.\nIf the `Arc&lt;T&gt;` has more than one strong reference, or any weak\nreferences, the inner data is cloned.",124,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"deref","","",124,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"clone","","Makes a clone of the `Arc&lt;T&gt;`.",124,{"inputs":[{"name":"arc"}],"output":{"name":"arc"}}],[11,"downgrade","","Downgrades the `Arc&lt;T&gt;` to a `Weak&lt;T&gt;` reference.",124,{"inputs":[{"name":"arc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",124,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",124,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"new","","Constructs a new `Arc&lt;T&gt;`.",124,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Arc&lt;T&gt;` has exactly one strong reference.",124,{"inputs":[{"name":"arc"}],"output":{"name":"result"}}],[3,"Arc","bitflags::__core::sync","An atomically reference counted wrapper for shared state.",null,null],[17,"RW_LOCK_INIT","","Constant initialization for a statically-initialized rwlock.",null,null],[3,"Condvar","","A Condition Variable",null,null],[6,"LockResult","","",null,null],[3,"StaticMutex","","The static mutex type is provided to allow for static allocation of mutexes.",null,null],[17,"MUTEX_INIT","","Static initialization of a mutex. This constant can be used to initialize\nother mutex constants.",null,null],[3,"BarrierWaitResult","","A result returned from wait.",null,null],[11,"new","alloc::arc","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",125,{"inputs":[],"output":{"name":"weak"}}],[11,"drop","","Drops the `Weak&lt;T&gt;`.",125,null],[11,"fmt","","",125,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","Makes a clone of the `Weak&lt;T&gt;`.",125,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",125,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[3,"Weak","bitflags::__core::sync","A weak pointer to an `Arc`.",null,null],[17,"ONCE_INIT","","Initialization value for static `Once` values.",null,null],[3,"MutexGuard","","An RAII implementation of a &quot;scoped lock&quot; of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.",null,null],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when\ndropped.",null,null],[3,"Mutex","","A mutual exclusion primitive useful for protecting shared data",null,null],[3,"StaticCondvar","","Statically allocated condition variables.",null,null],[3,"StaticRwLock","","Structure representing a statically allocated RwLock.",null,null],[17,"CONDVAR_INIT","","Constant initializer for a statically allocated condition variable.",null,null],[0,"time","bitflags::__core","Temporal quantification.",null,null],[3,"Instant","bitflags::__core::time","A measurement of a monotonically increasing clock.\n Opaque and useful only with `Duration`.",null,null],[3,"SystemTime","","A measurement of the system clock, useful for talking to\nexternal entities like the file system or other processes.",null,null],[3,"SystemTimeError","","An error returned from the `duration_since` method on `SystemTime`,\nused to learn about why how far in the opposite direction a timestamp lies.",null,null],[17,"UNIX_EPOCH","","An anchor in time which can be used to create new `SystemTime` instances or\nlearn about where in time a `SystemTime` lies.",null,null],[3,"Duration","","A duration type to represent a span of time, typically used for system\ntimeouts.",null,null],[11,"next_u64","bitflags::__core::__rand","Return the next random u64.",126,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",126,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",126,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",126,null],[11,"gen","","Return a random value of a `Rand` type.",126,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",126,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",126,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",126,{"inputs":[{"name":"rng"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",126,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",126,null],[11,"shuffle","","Shuffle a mutable slice in place.",126,null],[0,"i64","bitflags::__core","The 64-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i64","",null,null],[17,"MAX","","",null,null],[0,"clone","bitflags::__core","The `Clone` trait for types that cannot be &#39;implicitly copied&#39;.",null,null],[8,"Clone","bitflags::__core::clone","A common trait for cloning an object.",null,null],[10,"clone","","Returns a copy of the value.",16,{"inputs":[{"name":"clone"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",16,null],[0,"intrinsics","bitflags::__core","rustc compiler intrinsics.",null,null],[5,"atomic_cxchg","bitflags::__core::intrinsics","",null,null],[5,"atomic_cxchg_acq","","",null,null],[5,"atomic_cxchg_rel","","",null,null],[5,"atomic_cxchg_acqrel","","",null,null],[5,"atomic_cxchg_relaxed","","",null,null],[5,"atomic_cxchg_failrelaxed","","",null,null],[5,"atomic_cxchg_failacq","","",null,null],[5,"atomic_cxchg_acq_failrelaxed","","",null,null],[5,"atomic_cxchg_acqrel_failrelaxed","","",null,null],[5,"atomic_cxchgweak","","",null,null],[5,"atomic_cxchgweak_acq","","",null,null],[5,"atomic_cxchgweak_rel","","",null,null],[5,"atomic_cxchgweak_acqrel","","",null,null],[5,"atomic_cxchgweak_relaxed","","",null,null],[5,"atomic_cxchgweak_failrelaxed","","",null,null],[5,"atomic_cxchgweak_failacq","","",null,null],[5,"atomic_cxchgweak_acq_failrelaxed","","",null,null],[5,"atomic_cxchgweak_acqrel_failrelaxed","","",null,null],[5,"atomic_load","","",null,null],[5,"atomic_load_acq","","",null,null],[5,"atomic_load_relaxed","","",null,null],[5,"atomic_load_unordered","","",null,null],[5,"atomic_store","","",null,null],[5,"atomic_store_rel","","",null,null],[5,"atomic_store_relaxed","","",null,null],[5,"atomic_store_unordered","","",null,null],[5,"atomic_xchg","","",null,null],[5,"atomic_xchg_acq","","",null,null],[5,"atomic_xchg_rel","","",null,null],[5,"atomic_xchg_acqrel","","",null,null],[5,"atomic_xchg_relaxed","","",null,null],[5,"atomic_xadd","","",null,null],[5,"atomic_xadd_acq","","",null,null],[5,"atomic_xadd_rel","","",null,null],[5,"atomic_xadd_acqrel","","",null,null],[5,"atomic_xadd_relaxed","","",null,null],[5,"atomic_xsub","","",null,null],[5,"atomic_xsub_acq","","",null,null],[5,"atomic_xsub_rel","","",null,null],[5,"atomic_xsub_acqrel","","",null,null],[5,"atomic_xsub_relaxed","","",null,null],[5,"atomic_and","","",null,null],[5,"atomic_and_acq","","",null,null],[5,"atomic_and_rel","","",null,null],[5,"atomic_and_acqrel","","",null,null],[5,"atomic_and_relaxed","","",null,null],[5,"atomic_nand","","",null,null],[5,"atomic_nand_acq","","",null,null],[5,"atomic_nand_rel","","",null,null],[5,"atomic_nand_acqrel","","",null,null],[5,"atomic_nand_relaxed","","",null,null],[5,"atomic_or","","",null,null],[5,"atomic_or_acq","","",null,null],[5,"atomic_or_rel","","",null,null],[5,"atomic_or_acqrel","","",null,null],[5,"atomic_or_relaxed","","",null,null],[5,"atomic_xor","","",null,null],[5,"atomic_xor_acq","","",null,null],[5,"atomic_xor_rel","","",null,null],[5,"atomic_xor_acqrel","","",null,null],[5,"atomic_xor_relaxed","","",null,null],[5,"atomic_max","","",null,null],[5,"atomic_max_acq","","",null,null],[5,"atomic_max_rel","","",null,null],[5,"atomic_max_acqrel","","",null,null],[5,"atomic_max_relaxed","","",null,null],[5,"atomic_min","","",null,null],[5,"atomic_min_acq","","",null,null],[5,"atomic_min_rel","","",null,null],[5,"atomic_min_acqrel","","",null,null],[5,"atomic_min_relaxed","","",null,null],[5,"atomic_umin","","",null,null],[5,"atomic_umin_acq","","",null,null],[5,"atomic_umin_rel","","",null,null],[5,"atomic_umin_acqrel","","",null,null],[5,"atomic_umin_relaxed","","",null,null],[5,"atomic_umax","","",null,null],[5,"atomic_umax_acq","","",null,null],[5,"atomic_umax_rel","","",null,null],[5,"atomic_umax_acqrel","","",null,null],[5,"atomic_umax_relaxed","","",null,null],[5,"atomic_fence","","",null,null],[5,"atomic_fence_acq","","",null,null],[5,"atomic_fence_rel","","",null,null],[5,"atomic_fence_acqrel","","",null,null],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",null,null],[5,"atomic_singlethreadfence_acq","","",null,null],[5,"atomic_singlethreadfence_rel","","",null,null],[5,"atomic_singlethreadfence_acqrel","","",null,null],[5,"abort","","Aborts the execution of the process.",null,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable,\nenabling further optimizations.",null,null],[5,"assume","","Informs the optimizer that a condition is always true.\nIf the condition is false, the behavior is undefined.",null,null],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",null,null],[5,"size_of","","The size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"move_val_init","","Moves a value to an uninitialized memory location.",null,null],[5,"min_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"pref_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"type_name","","Gets a static string slice containing the name of a type.",null,{"inputs":[],"output":{"name":"str"}}],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This\nfunction will return the same value for a type regardless of whichever\ncrate it is invoked in.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"init_dropped","","Creates a value initialized to so that its drop flag,\nif any, says that it has been dropped.",null,{"inputs":[],"output":{"name":"t"}}],[5,"init","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninit","","Creates an uninitialized value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"forget","","Moves a value out of scope without running drop glue.",null,null],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"return_address","","Gives the address for the return value of the enclosing function.",null,null],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop\nglue; returns `false` if the actual type provided for `T`\nimplements `Copy`.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"offset","","Calculates the offset from a pointer.",null,null],[5,"arith_offset","","Calculates the offset from a pointer, potentially wrapping.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"copy","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::&lt;T&gt;()`\nbytes of memory starting at `dst` to `val`.",null,null],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`",null,null],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`",null,null],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\nsize of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`.",null,null],[5,"volatile_load","","Perform a volatile load from the `src` pointer.",null,null],[5,"volatile_store","","Perform a volatile store to the `dst` pointer.",null,null],[5,"sqrtf32","","Returns the square root of an `f32`",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sqrtf64","","Returns the square root of an `f64`",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powif32","","Raises an `f32` to an integer power.",null,{"inputs":[{"name":"f32"},{"name":"i32"}],"output":{"name":"f32"}}],[5,"powif64","","Raises an `f64` to an integer power.",null,{"inputs":[{"name":"f64"},{"name":"i32"}],"output":{"name":"f64"}}],[5,"sinf32","","Returns the sine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sinf64","","Returns the sine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"cosf32","","Returns the cosine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"cosf64","","Returns the cosine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powf32","","Raises an `f32` to an `f32` power.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"powf64","","Raises an `f64` to an `f64` power.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"expf32","","Returns the exponential of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"expf64","","Returns the exponential of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"exp2f32","","Returns 2 raised to the power of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"exp2f64","","Returns 2 raised to the power of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"logf32","","Returns the natural logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"logf64","","Returns the natural logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log10f32","","Returns the base 10 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log10f64","","Returns the base 10 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log2f32","","Returns the base 2 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log2f64","","Returns the base 2 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fmaf32","","Returns `a * b + c` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"fmaf64","","Returns `a * b + c` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"fabsf32","","Returns the absolute value of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"fabsf64","","Returns the absolute value of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"truncf32","","Returns the integer part of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"truncf64","","Returns the integer part of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"nearbyintf32","","Returns the nearest integer to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"nearbyintf64","","Returns the nearest integer to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fadd_fast","","Float addition that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fsub_fast","","Float subtraction that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fmul_fast","","Float multiplication that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fdiv_fast","","Float division that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"frem_fast","","Float remainder that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"ctpop","","Returns the number of bits set in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"ctlz","","Returns the number of leading bits unset in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"cttz","","Returns the number of trailing bits unset in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"bswap","","Reverses the bytes in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"add_with_overflow","","Performs checked integer addition.",null,null],[5,"sub_with_overflow","","Performs checked integer subtraction",null,null],[5,"mul_with_overflow","","Performs checked integer multiplication",null,null],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined behavior\nwhere y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting in\nundefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_add","","Returns (a + b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_sub","","Returns (a - b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_mul","","Returns (a * b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"discriminant_value","","Returns the value of the discriminant for the variant in &#39;v&#39;,\ncast to a `u64`; if `T` has no discriminant, returns 0.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"try","","Rust&#39;s &quot;try catch&quot; construct which invokes the function pointer `f` with\nthe data pointer `data`.",null,null],[0,"fmt","bitflags::__core","Utilities for formatting and printing strings",null,null],[5,"format","bitflags::__core::fmt","The format function takes a precompiled format string and a list of\narguments, to return the resulting formatted string.",null,{"inputs":[{"name":"arguments"}],"output":{"name":"string"}}],[8,"UpperExp","","Format trait for the `E` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",127,{"inputs":[{"name":"upperexp"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerExp","","Format trait for the `e` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",128,{"inputs":[{"name":"lowerexp"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",129,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Pointer","","Format trait for the `p` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",130,{"inputs":[{"name":"pointer"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",131,{"inputs":[{"name":"write"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","Writes a `char` into this writer, returning whether the write succeeded.",131,{"inputs":[{"name":"write"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",131,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[8,"Debug","","Format trait for the `?` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",132,{"inputs":[{"name":"debug"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt","",133,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",133,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",133,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",133,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",133,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",133,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",133,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",133,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",133,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",133,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",133,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",133,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",133,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",133,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",133,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",133,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",133,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",133,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",133,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",133,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",133,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[3,"Formatter","bitflags::__core::fmt","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits.",null,null],[11,"entry","core::fmt::builders","Adds a new entry to the map output.",134,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",134,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",134,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[3,"DebugMap","bitflags::__core::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[11,"fmt","core::fmt","",135,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",135,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",135,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Error","bitflags::__core::fmt","The error type which is returned from formatting a message into a stream.",null,null],[11,"entry","core::fmt::builders","Adds a new entry to the set output.",136,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",136,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",136,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[3,"DebugSet","bitflags::__core::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[6,"Result","","",null,null],[11,"field","core::fmt::builders","Adds a new field to the generated tuple struct output.",137,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",137,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[3,"DebugTuple","bitflags::__core::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",138,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",138,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[3,"DebugStruct","bitflags::__core::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[11,"fmt","core::fmt","",139,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",139,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[3,"Arguments","bitflags::__core::fmt","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification.",null,null],[5,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[8,"UpperHex","","Format trait for the `X` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",140,{"inputs":[{"name":"upperhex"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Binary","","Format trait for the `b` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",141,{"inputs":[{"name":"binary"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerHex","","Format trait for the `x` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",142,{"inputs":[{"name":"lowerhex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"entry","core::fmt::builders","Adds a new entry to the list output.",143,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",143,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",143,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[3,"DebugList","bitflags::__core::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[8,"Octal","","Format trait for the `o` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",144,{"inputs":[{"name":"octal"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"any","bitflags::__core","This module implements the `Any` trait, which enables dynamic typing\nof any `&#39;static` type through runtime reflection.",null,null],[8,"Any","bitflags::__core::any","A type to emulate dynamic typing.",null,null],[10,"get_type_id","","Gets the `TypeId` of `self`.",145,{"inputs":[{"name":"any"}],"output":{"name":"typeid"}}],[11,"of","core::any","Returns the `TypeId` of the type this generic function has been\ninstantiated with",146,{"inputs":[],"output":{"name":"typeid"}}],[11,"clone","","",146,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"eq","","",146,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"fmt","","",146,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",146,null],[3,"TypeId","bitflags::__core::any","A `TypeId` represents a globally unique identifier for a type.",null,null],[0,"cell","bitflags::__core","Shareable mutable containers.",null,null],[11,"eq","core::cell","",147,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"default","","",147,{"inputs":[],"output":{"name":"cell"}}],[11,"clone","","",147,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"new","","Creates a new `Cell` containing the given value.",147,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",147,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",147,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",147,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"fmt","","",147,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Cell","bitflags::__core::cell","A mutable memory location that admits only `Copy` data.",null,null],[11,"eq","core::cell","",148,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"default","","",148,{"inputs":[],"output":{"name":"refcell"}}],[11,"clone","","",148,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"borrow_state","","Query the current state of this `RefCell`",148,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",148,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",148,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",148,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"new","","Creates a new `RefCell` containing `value`.",148,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",148,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"fmt","","",148,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RefCell","bitflags::__core::cell","A mutable memory location with dynamically checked borrow rules",null,null],[11,"clone","core::cell","",149,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"eq","","",149,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"fmt","","",149,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"BorrowState","bitflags::__core::cell","An enumeration of values returned from the `state` method on a `RefCell&lt;T&gt;`.",null,null],[13,"Reading","","The cell is currently being read, there is at least one active `borrow`.",149,null],[13,"Writing","","The cell is currently being written to, there is an active `borrow_mut`.",149,null],[13,"Unused","","There are no outstanding borrows on this cell.",149,null],[11,"clone","core::cell","Copies a `Ref`.",150,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",150,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",150,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",150,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"fmt","","",150,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Ref","bitflags::__core::cell","Wraps a borrowed reference to a value in a `RefCell` box.\nA wrapper type for an immutably borrowed value from a `RefCell&lt;T&gt;`.",null,null],[11,"deref_mut","core::cell","",151,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref","","",151,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",151,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",151,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"fmt","","",151,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RefMut","bitflags::__core::cell","A wrapper type for a mutably borrowed value from a `RefCell&lt;T&gt;`.",null,null],[11,"get","core::cell","Gets a mutable pointer to the wrapped value.",152,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",152,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",152,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"fmt","","",152,{"inputs":[{"name":"unsafecell"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"UnsafeCell","bitflags::__core::cell","The core primitive for interior mutability in Rust.",null,null],[0,"option","bitflags::__core","Optional values.",null,null],[4,"Option","bitflags::__core::option","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",5,null],[13,"Some","","Some value `T`",5,null],[11,"clone","core::option","",153,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next_back","","",153,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",153,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",153,null],[11,"fmt","","",153,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Iter","bitflags::__core::option","An iterator over a reference of the contained item in an Option.",null,null],[11,"next_back","core::option","",154,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",154,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",154,null],[11,"fmt","","",154,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"IterMut","bitflags::__core::option","An iterator over a mutable reference of the contained item in an Option.",null,null],[11,"next_back","core::option","",155,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",155,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",155,null],[11,"clone","","",155,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"fmt","","",155,{"inputs":[{"name":"intoiter"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"IntoIter","bitflags::__core::option","An iterator over the item contained inside an Option.",null,null],[0,"raw","bitflags::__core","Contains struct definitions for the layout of compiler built-in types.",null,null],[11,"clone","core::raw","",156,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[3,"Slice","bitflags::__core::raw","The representation of a slice like `&amp;[T]`.",null,null],[12,"data","","",156,null],[12,"len","","",156,null],[11,"clone","core::raw","",157,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[3,"TraitObject","bitflags::__core::raw","The representation of a trait object like `&amp;SomeTrait`.",null,null],[12,"data","","",157,null],[12,"vtable","","",157,null],[8,"Repr","","This trait is meant to map equivalences between raw structs and their\ncorresponding rust values.",null,null],[11,"repr","","This function &quot;unwraps&quot; a rust value (without consuming it) into its raw\nstruct representation. This can be used to read/write different values\nfor the struct. This is a safe method because by default it does not\nenable write-access to the fields of the return value in safe code.",158,{"inputs":[{"name":"repr"}],"output":{"name":"t"}}],[0,"str","bitflags::__core","Unicode string slices.",null,null],[6,"Utf16Units","bitflags::__core::str","",null,null],[11,"clone","collections::str","",159,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"encodeutf16"}}],[11,"next","","",159,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",159,null],[3,"EncodeUtf16","bitflags::__core::str","External iterator for a string&#39;s UTF-16 code units.",null,null],[11,"as_str","core::str","View the underlying data as a subslice of the original data.",160,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"next_back","","",160,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"next","","",160,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",160,null],[11,"clone","","",160,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"fmt","","",160,{"inputs":[{"name":"charindices"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"CharIndices","bitflags::__core::str","Iterator for a string&#39;s characters and their byte offsets.",null,null],[11,"clone","core::str","",161,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"next","","",161,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"fmt","","",161,{"inputs":[{"name":"rsplitn"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RSplitN","bitflags::__core::str","Created with the method [`rsplitn()`].",null,null],[11,"next_back","core::str","",162,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",162,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next","","",162,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"fmt","","",162,{"inputs":[{"name":"rsplit"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RSplit","bitflags::__core::str","Created with the method [`rsplit()`].",null,null],[11,"next_back","core::str","",163,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",163,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",163,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"fmt","","",163,{"inputs":[{"name":"splitterminator"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"SplitTerminator","bitflags::__core::str","Created with the method [`split_terminator()`].",null,null],[11,"next_back","core::str","",164,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",164,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next","","",164,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"fmt","","",164,{"inputs":[{"name":"rmatches"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RMatches","bitflags::__core::str","Created with the method [`rmatches()`].",null,null],[11,"next_back","core::str","",165,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",165,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next","","",165,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"fmt","","",165,{"inputs":[{"name":"rmatchindices"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RMatchIndices","bitflags::__core::str","Created with the method [`rmatch_indices()`].",null,null],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a\nstring.",null,null],[16,"Err","","The associated error which can be returned from parsing.",166,null],[10,"from_str","","Parses a string `s` to return a value of this type.",166,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8.",null,null],[11,"len","core::str","",167,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"next_back","","",167,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"next","","",167,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",167,null],[11,"count","","",167,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",167,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",167,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",167,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"fmt","","",167,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Bytes","bitflags::__core::str","External iterator for a string&#39;s bytes.\nUse with the `std::iter` module.",null,null],[11,"next_back","core::str","",168,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"next","","",168,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",168,null],[11,"clone","","",168,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"fmt","","",168,{"inputs":[{"name":"linesany"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"LinesAny","bitflags::__core::str","Created with the method [`lines_any()`].",null,null],[11,"next_back","core::str","",169,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"next","","",169,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",169,null],[11,"clone","","",169,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"fmt","","",169,{"inputs":[{"name":"lines"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Lines","bitflags::__core::str","Created with the method [`lines()`].",null,null],[11,"fmt","core::str","",170,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",170,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"eq","","",170,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",170,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"clone","","",170,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",170,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Utf8Error","bitflags::__core::str","Errors which can occur when attempting to interpret a sequence of `u8`\nas a string.",null,null],[11,"fmt","core::str","",171,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",171,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",171,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"eq","","",171,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[3,"ParseBoolError","bitflags::__core::str","An error returned when parsing a `bool` from a string fails.",null,null],[11,"next_back","core::str","",172,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",172,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next","","",172,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"fmt","","",172,{"inputs":[{"name":"rsplitterminator"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RSplitTerminator","bitflags::__core::str","Created with the method [`rsplit_terminator()`].",null,null],[11,"clone","core::str","",173,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"fmt","","",173,{"inputs":[{"name":"charrange"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"CharRange","bitflags::__core::str","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string.",null,null],[12,"ch","","Current `char`",173,null],[12,"next","","Index of the first byte of the next `char`",173,null],[11,"next_back","core::str","",174,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",174,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",174,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"fmt","","",174,{"inputs":[{"name":"matches"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Matches","bitflags::__core::str","Created with the method [`matches()`].",null,null],[11,"clone","core::str","",175,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",175,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"fmt","","",175,{"inputs":[{"name":"splitn"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"SplitN","bitflags::__core::str","Created with the method [`splitn()`].",null,null],[11,"next_back","core::str","",176,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",176,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",176,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"fmt","","",176,{"inputs":[{"name":"matchindices"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"MatchIndices","bitflags::__core::str","Created with the method [`match_indices()`].",null,null],[11,"next_back","core::str","",177,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",177,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",177,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"fmt","","",177,{"inputs":[{"name":"split"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Split","bitflags::__core::str","Created with the method [`split()`].",null,null],[11,"as_str","core::str","View the underlying data as a subslice of the original data.",178,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"next_back","","",178,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"next","","",178,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",178,null],[11,"clone","","",178,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"fmt","","",178,{"inputs":[{"name":"chars"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Chars","bitflags::__core::str","Iterator for the char (representing *Unicode Scalar Values*) of a string",null,null],[11,"next_back","rustc_unicode::u_str","",179,{"inputs":[{"name":"splitwhitespace"}],"output":{"name":"option"}}],[11,"next","","",179,{"inputs":[{"name":"splitwhitespace"}],"output":{"name":"option"}}],[3,"SplitWhitespace","bitflags::__core::str","An iterator over the non-whitespace substrings of a string,\nseparated by any amount of whitespace.",null,null],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","bitflags::__core::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",180,null],[10,"into_searcher","","Constructs the associated searcher from\n`self` and the `haystack` to search in.",180,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",180,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",180,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",180,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"clone","core::str::pattern","",181,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"eq","","",181,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",181,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"fmt","","",181,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"SearchStep","bitflags::__core::str::pattern","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at\n`haystack[a..b]`.",181,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match\nof the pattern.",181,null],[13,"Done","","Expresses that every byte of the haystack has been visted, ending\nthe iteration.",181,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlaying string to be searched in",182,{"inputs":[{"name":"searcher"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",182,{"inputs":[{"name":"searcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",182,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()`",182,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",183,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",183,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",183,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher`\ncan be used for a `DoubleEndedIterator` implementation.",null,null],[11,"next_back","core::str::pattern","",184,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",184,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",184,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"haystack","","",184,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",184,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",184,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",184,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",184,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"fmt","","",184,{"inputs":[{"name":"charsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"CharSearcher","bitflags::__core::str::pattern","Associated type for `&lt;char as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[11,"next_back","core::str::pattern","",185,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",185,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",185,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"haystack","","",185,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",185,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",185,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",185,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",185,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"fmt","","",185,{"inputs":[{"name":"charslicesearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"CharSliceSearcher","bitflags::__core::str::pattern","Associated type for `&lt;&amp;[char] as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[11,"next_back","core::str::pattern","",186,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",186,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",186,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"haystack","","",186,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",186,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",186,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",186,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",186,{"inputs":[{"name":"charpredicatesearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",186,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[3,"CharPredicateSearcher","bitflags::__core::str::pattern","Associated type for `&lt;F as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[11,"next_back","core::str::pattern","",187,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",187,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"haystack","","",187,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",187,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",187,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"clone","","",187,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",187,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"StrSearcher","bitflags::__core::str::pattern","Associated type for `&lt;&amp;str as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[0,"marker","bitflags::__core","Primitive traits and marker types representing basic &#39;kinds&#39; of types.",null,null],[8,"Send","bitflags::__core::marker","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile-time.",null,null],[8,"Unsize","","Types that can be &quot;unsized&quot; to a dynamically sized type.",null,null],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`).",null,null],[8,"Sync","","Types that can be safely shared between threads when aliased.",null,null],[11,"fmt","core::marker","",188,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",188,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"clone","","",188,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"cmp","","",188,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",188,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"eq","","",188,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"hash","","",188,null],[3,"PhantomData","bitflags::__core::marker","`PhantomData&lt;T&gt;` allows you to describe that a type acts as if it stores a value of type `T`,\neven though it does not. This allows you to inform the compiler about certain safety properties\nof your code.",null,null],[8,"Reflect","","Types that can be reflected over.",null,null],[0,"u16","bitflags::__core","The 16-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u16","",null,null],[17,"MAX","","",null,null],[0,"rc","bitflags::__core","Thread-local reference-counted boxes (the `Rc&lt;T&gt;` type).",null,null],[11,"downgrade","alloc::rc","Downgrades the `Rc&lt;T&gt;` to a `Weak&lt;T&gt;` reference.",189,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",189,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",189,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak&lt;T&gt;` values that share\nthe same inner value.",189,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc&lt;T&gt;` has\none strong reference and no weak references.",189,{"inputs":[{"name":"rc"}],"output":{"name":"option"}}],[11,"new","","Constructs a new `Rc&lt;T&gt;`.",189,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc&lt;T&gt;` has exactly one strong reference.",189,{"inputs":[{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",189,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"as_ref","","",189,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"borrow","","",189,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"from","","",189,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"fmt","","",189,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",189,null],[11,"cmp","","Comparison for two `Rc&lt;T&gt;`s.",189,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Partial comparison for two `Rc&lt;T&gt;`s.",189,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc&lt;T&gt;`s.",189,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",189,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc&lt;T&gt;`s.",189,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",189,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"eq","","Equality for two `Rc&lt;T&gt;`s.",189,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc&lt;T&gt;`s.",189,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"default","","Creates a new `Rc&lt;T&gt;`, with the `Default` value for `T`.",189,{"inputs":[],"output":{"name":"rc"}}],[11,"clone","","Makes a clone of the `Rc&lt;T&gt;`.",189,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"drop","","Drops the `Rc&lt;T&gt;`.",189,null],[11,"deref","","",189,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"make_mut","","Make a mutable reference into the given `Rc&lt;T&gt;` by cloning the inner\ndata if the `Rc&lt;T&gt;` doesn&#39;t have one strong reference and no weak\nreferences.",189,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[3,"Rc","bitflags::__core::rc","A reference-counted pointer type over an immutable value.",null,null],[11,"new","alloc::rc","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",190,{"inputs":[],"output":{"name":"weak"}}],[11,"fmt","","",190,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","Makes a clone of the `Weak&lt;T&gt;`.",190,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"drop","","Drops the `Weak&lt;T&gt;`.",190,null],[11,"upgrade","","Upgrades a weak reference to a strong reference.",190,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[3,"Weak","bitflags::__core::rc","A weak version of `Rc&lt;T&gt;`.",null,null],[0,"i16","bitflags::__core","The 16-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i16","",null,null],[17,"MAX","","",null,null],[0,"string","bitflags::__core","A UTF-8 encoded, growable string.",null,null],[3,"String","bitflags::__core::string","A UTF-8 encoded, growable string.",null,null],[11,"fmt","collections::string","",191,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",191,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",191,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",191,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[3,"FromUtf8Error","bitflags::__core::string","A possible error value when converting a `String` from a UTF-8 byte vector.",null,null],[11,"fmt","collections::string","",192,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",192,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"FromUtf16Error","bitflags::__core::string","A possible error value when converting a `String` from a UTF-16 byte slice.",null,null],[11,"clone","collections::string","",193,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"eq","","",193,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",193,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",193,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"ParseError","bitflags::__core::string","An error when parsing a `String`.",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",24,{"inputs":[{"name":"tostring"}],"output":{"name":"string"}}],[11,"drop","collections::string","",194,null],[11,"next_back","","",194,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"next","","",194,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",194,null],[3,"Drain","bitflags::__core::string","A draining iterator for `String`.",null,null],[0,"i8","bitflags::__core","The 8-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i8","",null,null],[17,"MAX","","",null,null],[0,"u32","bitflags::__core","The 32-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u32","",null,null],[17,"MAX","","",null,null],[0,"cmp","bitflags::__core","Functionality for ordering and comparison.",null,null],[8,"PartialEq","bitflags::__core::cmp","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",11,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",11,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[11,"partial_cmp","core::cmp","",195,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"cmp","","",195,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",195,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"clone","","",195,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"eq","","",195,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fmt","","",195,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Ordering","bitflags::__core::cmp","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",195,null],[13,"Equal","","An ordering where a compared value is equal [to another].",195,null],[13,"Greater","","An ordering where a compared value is greater [than another].",195,null],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",8,{"inputs":[{"name":"ord"},{"name":"self"}],"output":{"name":"ordering"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",22,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",22,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",22,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",22,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",22,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[5,"min","","Compare and return the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compare and return the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"char","bitflags::__core","A character type.",null,null],[3,"ToLowercase","bitflags::__core::char","Returns an iterator that yields the lowercase equivalent of a `char`.",null,null],[3,"ToUppercase","","Returns an iterator that yields the uppercase equivalent of a `char`.",null,null],[3,"DecodeUtf16","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[3,"DecodeUtf16Error","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[5,"decode_utf16","","Create an iterator over the UTF-16 encoded code points in `iter`,\nreturning unpaired surrogates as `Err`s.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf16"}}],[17,"REPLACEMENT_CHARACTER","","`U+FFFD REPLACEMENT CHARACTER` (�) is used in Unicode to represent a\ndecoding error.",null,null],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,{"inputs":[{"name":"u32"}],"output":{"name":"char"}}],[17,"UNICODE_VERSION","","The version of [Unicode](http://www.unicode.org/)\nthat the unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on.",null,null],[17,"MAX","","The highest valid code point a `char` can have.",null,null],[5,"from_u32","","Converts a `u32` to a `char`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"next","core::char","",196,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",196,null],[11,"count","","",196,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",196,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",196,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","","",196,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"fmt","","",196,{"inputs":[{"name":"escapedefault"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"EscapeDefault","bitflags::__core::char","An iterator that yields the literal escape code of a `char`.",null,null],[11,"next","core::char","",197,{"inputs":[{"name":"encodeutf8"}],"output":{"name":"option"}}],[11,"size_hint","","",197,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",197,null],[11,"fmt","","",197,{"inputs":[{"name":"encodeutf8"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"EncodeUtf8","bitflags::__core::char","An iterator over `u8` entries represending the UTF-8 encoding of a `char`\nvalue.",null,null],[11,"fmt","core::char","",198,{"inputs":[{"name":"encodeutf16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",198,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",198,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",198,null],[3,"EncodeUtf16","bitflags::__core::char","An iterator over `u16` entries represending the UTF-16 encoding of a `char`\nvalue.",null,null],[11,"next","core::char","",199,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",199,null],[11,"clone","","",199,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"fmt","","",199,{"inputs":[{"name":"escapeunicode"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"EscapeUnicode","bitflags::__core::char","Returns an iterator that yields the hexadecimal Unicode escape of a\ncharacter, as `char`s.",null,null],[0,"iter","bitflags::__core","Composable external iteration.",null,null],[8,"Iterator","bitflags::__core::iter","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",15,null],[10,"next","","Advances the iterator and returns the next value.",15,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",15,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",15,{"inputs":[{"name":"iterator"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",15,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",15,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",15,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",15,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",15,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"map"}}],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",15,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",15,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",15,{"inputs":[{"name":"iterator"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can look at the `next()` element without\nconsuming it.",15,{"inputs":[{"name":"iterator"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",15,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",15,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",15,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",15,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",15,{"inputs":[{"name":"iterator"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",15,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first `None`.",15,{"inputs":[{"name":"iterator"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",15,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",15,{"inputs":[{"name":"iterator"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",15,{"inputs":[{"name":"iterator"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",15,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",15,{"inputs":[{"name":"iterator"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",15,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",15,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",15,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",15,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",15,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",15,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",15,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",15,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",15,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator&#39;s direction.",15,{"inputs":[{"name":"iterator"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",15,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",15,{"inputs":[{"name":"iterator"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",15,{"inputs":[{"name":"iterator"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",15,{"inputs":[{"name":"iterator"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",15,{"inputs":[{"name":"iterator"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",15,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",15,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",15,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",15,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",15,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",15,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",15,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",15,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",200,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",2,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",2,null],[10,"into_iter","","Creates an iterator from a value.",2,null],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",7,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","An iterator able to yield elements from both ends.",18,{"inputs":[{"name":"doubleendediterator"}],"output":{"name":"option"}}],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",25,{"inputs":[{"name":"exactsizeiterator"}],"output":{"name":"usize"}}],[11,"next_back","core::iter","",201,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"next","","",201,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",201,null],[11,"clone","","",201,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"fmt","","",201,{"inputs":[{"name":"rev"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Rev","bitflags::__core::iter","An double-ended iterator with the direction inverted.",null,null],[11,"fmt","core::iter","",202,{"inputs":[{"name":"cloned"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",202,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",202,null],[11,"clone","","",202,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next_back","","",202,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[3,"Cloned","bitflags::__core::iter","An iterator that clones the elements of an underlying iterator.",null,null],[11,"next","core::iter","",203,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",203,null],[11,"clone","","",203,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"fmt","","",203,{"inputs":[{"name":"cycle"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Cycle","bitflags::__core::iter","An iterator that repeats endlessly.",null,null],[11,"clone","core::iter","",204,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"fmt","","",204,{"inputs":[{"name":"chain"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",204,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"next","","",204,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",204,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",204,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",204,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",204,null],[3,"Chain","bitflags::__core::iter","An iterator that strings two iterators together.",null,null],[11,"next_back","core::iter","",205,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"next","","",205,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",205,null],[11,"clone","","",205,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"fmt","","",205,{"inputs":[{"name":"zip"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Zip","bitflags::__core::iter","An iterator that iterates two other iterators simultaneously.",null,null],[11,"fmt","core::iter","",206,{"inputs":[{"name":"map"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",206,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"next","","",206,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",206,null],[11,"clone","","",206,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[3,"Map","bitflags::__core::iter","An iterator that maps the values of `iter` with `f`.",null,null],[11,"next_back","core::iter","",207,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"next","","",207,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",207,null],[11,"fmt","","",207,{"inputs":[{"name":"filter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",207,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[3,"Filter","bitflags::__core::iter","An iterator that filters the elements of `iter` with `predicate`.",null,null],[11,"fmt","core::iter","",208,{"inputs":[{"name":"filtermap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",208,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"next","","",208,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",208,null],[11,"clone","","",208,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[3,"FilterMap","bitflags::__core::iter","An iterator that uses `f` to both filter and map elements from `iter`.",null,null],[11,"next_back","core::iter","",209,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"next","","# Overflow Behavior",209,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",209,null],[11,"nth","","",209,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",209,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"clone","","",209,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"fmt","","",209,{"inputs":[{"name":"enumerate"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Enumerate","bitflags::__core::iter","An iterator that yields the current count and the element during iteration.",null,null],[11,"fmt","core::iter","",210,{"inputs":[{"name":"peekable"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",210,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",210,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",210,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"next","","",210,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",210,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",210,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",210,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",210,null],[3,"Peekable","bitflags::__core::iter","An iterator with a `peek()` that returns an optional reference to the next\nelement.",null,null],[11,"next","core::iter","",211,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",211,null],[11,"fmt","","",211,{"inputs":[{"name":"skipwhile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",211,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[3,"SkipWhile","bitflags::__core::iter","An iterator that rejects elements while `predicate` is true.",null,null],[11,"clone","core::iter","",212,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",212,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",212,null],[11,"fmt","","",212,{"inputs":[{"name":"takewhile"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"TakeWhile","bitflags::__core::iter","An iterator that only accepts elements while `predicate` is true.",null,null],[11,"next_back","core::iter","",213,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"fmt","","",213,{"inputs":[{"name":"skip"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",213,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",213,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",213,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",213,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",213,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",213,null],[3,"Skip","bitflags::__core::iter","An iterator that skips over `n` elements of `iter`.",null,null],[11,"next","core::iter","",214,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",214,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",214,null],[11,"clone","","",214,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"fmt","","",214,{"inputs":[{"name":"take"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Take","bitflags::__core::iter","An iterator that only iterates over the first `n` iterations of `iter`.",null,null],[11,"next","core::iter","",215,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",215,null],[11,"fmt","","",215,{"inputs":[{"name":"scan"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",215,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[3,"Scan","bitflags::__core::iter","An iterator to maintain state while iterating another iterator.",null,null],[11,"next_back","core::iter","",216,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"next","","",216,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",216,null],[11,"fmt","","",216,{"inputs":[{"name":"flatmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",216,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[3,"FlatMap","bitflags::__core::iter","An iterator that maps each element to an iterator, and yields the elements\nof the produced iterators.",null,null],[11,"fmt","core::iter","",217,{"inputs":[{"name":"fuse"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",217,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"next","","",217,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",217,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",217,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",217,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",217,null],[11,"clone","","",217,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[3,"Fuse","bitflags::__core::iter","An iterator that yields `None` forever after the underlying iterator\nyields `None` once.",null,null],[11,"fmt","core::iter","",218,{"inputs":[{"name":"inspect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",218,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next_back","","",218,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"next","","",218,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",218,null],[3,"Inspect","bitflags::__core::iter","An iterator that calls a function with a reference to each element before\nyielding it.",null,null],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"step","","Steps `self` if possible.",219,{"inputs":[{"name":"step"},{"name":"self"}],"output":{"name":"option"}}],[10,"steps_between","","Returns the number of steps between two step objects. The count is\ninclusive of `start` and exclusive of `end`.",219,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"next","core::iter","",220,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",220,null],[11,"clone","","",220,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"fmt","","",220,{"inputs":[{"name":"stepby"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",220,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",220,null],[11,"next","","",220,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",220,null],[3,"StepBy","bitflags::__core::iter","An adapter for stepping range iterators by a custom amount.",null,null],[11,"next_back","core::iter","",221,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",221,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",221,null],[11,"clone","","",221,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"fmt","","",221,{"inputs":[{"name":"repeat"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Repeat","bitflags::__core::iter","An iterator that repeats an element endlessly.",null,null],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[11,"default","core::iter","",222,{"inputs":[],"output":{"name":"empty"}}],[11,"clone","","",222,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"len","","",222,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"next_back","","",222,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"next","","",222,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",222,null],[11,"fmt","","",222,{"inputs":[{"name":"empty"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Empty","bitflags::__core::iter","An iterator that yields nothing.",null,null],[5,"empty","","Creates an iterator that yields nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[11,"len","core::iter","",223,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"next_back","","",223,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"next","","",223,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",223,null],[11,"clone","","",223,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"fmt","","",223,{"inputs":[{"name":"once"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Once","bitflags::__core::iter","An iterator that yields an element exactly once.",null,null],[5,"once","","Creates an iterator that yields an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[0,"i32","bitflags::__core","The 32-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i32","",null,null],[17,"MAX","","",null,null],[0,"u64","bitflags::__core","The 64-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u64","",null,null],[17,"MAX","","",null,null],[0,"mem","bitflags::__core","Basic functions for dealing with memory.",null,null],[5,"forget","bitflags::__core::mem","Leaks a value into the void, consuming ownership and never running its\ndestructor.",null,null],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the given value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the ABI-required minimum alignment of a type",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the alignment in memory for a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"zeroed","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"dropped","","Creates a value initialized to an unspecified series of bytes.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust&#39;s normal memory-initialization checks by pretending to\nproduce a value of type T, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swap the values at two mutable locations of the same type, without deinitializing or copying\neither one.",null,null],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without\ndeinitializing or copying either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,null],[17,"POST_DROP_U8","","",null,null],[17,"POST_DROP_U32","","",null,null],[17,"POST_DROP_U64","","",null,null],[17,"POST_DROP_USIZE","","",null,null],[5,"transmute_copy","","Interprets `src` as `&amp;U`, and then reads `src` without moving the contained\nvalue.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[0,"borrow","bitflags::__core","A module for working with borrowed data.",null,null],[8,"ToOwned","bitflags::__core::borrow","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","",17,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",17,null],[11,"from","collections::borrow","",224,null],[11,"from","","",224,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"eq","","",224,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",224,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"borrow","","",224,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"deref","","",224,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",224,null],[11,"into_owned","","Extracts the owned data.",224,null],[11,"clone","","",224,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"eq","","",224,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"cmp","","",224,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"as_ref","","",224,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"hash","","",224,null],[11,"fmt","","",224,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",224,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",224,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"from_iter","","",224,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"eq","","",224,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",224,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",224,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",224,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",224,null],[11,"ne","","",224,null],[11,"eq","","",224,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",224,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"from","","",224,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"eq","","",224,null],[11,"ne","","",224,null],[11,"from","","",224,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[4,"Cow","bitflags::__core::borrow","A clone-on-write smart pointer.",null,null],[13,"Borrowed","","Borrowed data.",224,null],[13,"Owned","","Owned data.",224,null],[8,"Borrow","","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",225,{"inputs":[{"name":"borrow"}],"output":{"name":"borrowed"}}],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",226,{"inputs":[{"name":"borrowmut"}],"output":{"name":"borrowed"}}],[0,"vec","bitflags::__core","A contiguous growable array type with heap-allocated contents, written\n`Vec&lt;T&gt;` but pronounced &#39;vector.&#39;",null,null],[3,"Vec","bitflags::__core::vec","A contiguous growable array type, written `Vec&lt;T&gt;` but pronounced &#39;vector.&#39;",null,null],[11,"drop","collections::vec","",227,null],[11,"next_back","","",227,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",227,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",227,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",227,null],[11,"count","","",227,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[3,"IntoIter","bitflags::__core::vec","An iterator that moves out of a vector.",null,null],[11,"drop","collections::vec","",228,null],[11,"next","","",228,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",228,null],[11,"next_back","","",228,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[3,"Drain","bitflags::__core::vec","A draining iterator for `Vec&lt;T&gt;`.",null,null],[0,"usize","bitflags::__core","The pointer-sized unsigned integer type.",null,null],[17,"MIN","bitflags::__core::usize","",null,null],[17,"MAX","","",null,null],[0,"ptr","bitflags::__core","Raw, unsafe pointers, `*const T`, and `*mut T`.",null,null],[5,"null","bitflags::__core::ptr","Creates a null raw pointer.",null,null],[5,"null_mut","","Creates a null mutable raw pointer.",null,null],[5,"swap","","Swaps the values at two mutable locations of the same type, without\ndeinitializing either. They may overlap, unlike `mem::swap` which is\notherwise equivalent.",null,null],[5,"replace","","Replaces the value at `dest` with `src`, returning the old\nvalue, without dropping either.",null,null],[5,"read","","Reads the value from `src` without moving it. This leaves the\nmemory in `src` unchanged.",null,null],[5,"read_and_drop","","",null,null],[5,"write","","Overwrites a memory location with the given value without reading or\ndropping the old value.",null,null],[5,"read_volatile","","Performs a volatile read of the value from `src` without moving it. This\nleaves the memory in `src` unchanged.",null,null],[5,"write_volatile","","Performs a volatile write of a memory location with the given value without\nreading or dropping the old value.",null,null],[11,"new","core::ptr","Creates a new `Unique`.",229,null],[11,"get","","Dereferences the content.",229,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",229,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"fmt","","",229,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",229,null],[3,"Unique","bitflags::__core::ptr","A wrapper around a raw non-null `*mut T` that indicates that the possessor\nof this wrapper owns the referent. This in turn implies that the\n`Unique&lt;T&gt;` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a raw\n`*mut T` (which conveys no particular ownership semantics).  It\nalso implies that the referent of the pointer should not be\nmodified without a unique path to the `Unique` reference. Useful\nfor building abstractions like `Vec&lt;T&gt;` or `Box&lt;T&gt;`, which\ninternally use raw pointers to manage the memory that they own.",null,null],[11,"fmt","core::ptr","",230,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",230,null],[11,"clone","","",230,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"new","","Creates a new `Shared`.",230,null],[3,"Shared","bitflags::__core::ptr","A wrapper around a raw non-null `*mut T` that indicates that the possessor\nof this wrapper has shared ownership of the referent. Useful for\nbuilding abstractions like `Rc&lt;T&gt;` or `Arc&lt;T&gt;`, which internally\nuse raw pointers to manage the memory that they own.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"copy","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::&lt;T&gt;()`\nbytes of memory starting at `dst` to `val`.",null,null],[0,"slice","bitflags::__core","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[8,"SliceConcatExt","bitflags::__core::slice","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",10,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",10,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a\ngiven separator between each.",10,null],[10,"connect","","",10,null],[11,"next_back","core::slice","",231,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next","","",231,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",231,null],[11,"count","","",231,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",231,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",231,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","","",231,{"inputs":[{"name":"chunksmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"ChunksMut","bitflags::__core::slice","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder.",null,null],[11,"next_back","core::slice","",232,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",232,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",232,null],[11,"count","","",232,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",232,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",232,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",232,null],[11,"fmt","","",232,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"IterMut","bitflags::__core::slice","Mutable slice iterator.",null,null],[11,"next","core::slice","",233,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",233,null],[11,"fmt","","",233,{"inputs":[{"name":"splitn"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"SplitN","bitflags::__core::slice","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[11,"next_back","core::slice","",234,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",234,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",234,null],[11,"fmt","","",234,{"inputs":[{"name":"splitmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"SplitMut","bitflags::__core::slice","An iterator over the subslices of the vector which are separated\nby elements that match `pred`.",null,null],[11,"next","core::slice","",235,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",235,null],[11,"fmt","","",235,{"inputs":[{"name":"rsplitnmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RSplitNMut","bitflags::__core::slice","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[11,"next_back","core::slice","",236,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next","","",236,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",236,null],[11,"count","","",236,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",236,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",236,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",236,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"fmt","","",236,{"inputs":[{"name":"windows"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Windows","bitflags::__core::slice","An iterator over overlapping subslices of length `size`.",null,null],[11,"next","core::slice","",237,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",237,null],[11,"fmt","","",237,{"inputs":[{"name":"rsplitn"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RSplitN","bitflags::__core::slice","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[11,"next_back","core::slice","",238,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",238,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",238,null],[11,"count","","",238,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",238,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",238,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"clone","","",238,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"fmt","","",238,{"inputs":[{"name":"chunks"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Chunks","bitflags::__core::slice","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime).",null,null],[11,"next","core::slice","",239,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",239,null],[11,"fmt","","",239,{"inputs":[{"name":"splitnmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"SplitNMut","bitflags::__core::slice","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable\nslice is returned.",null,null],[11,"clone","core::slice","",240,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next_back","","",240,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",240,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",240,null],[11,"count","","",240,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",240,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",240,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"as_slice","","View the underlying data as a subslice of the original data.",240,null],[11,"fmt","","",240,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Iter","bitflags::__core::slice","Immutable slice iterator",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[11,"next_back","core::slice","",241,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next","","",241,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",241,null],[11,"clone","","",241,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"fmt","","",241,{"inputs":[{"name":"split"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Split","bitflags::__core::slice","An iterator over subslices separated by elements that match a predicate\nfunction.",null,null],[0,"hash","bitflags::__core","Generic hashing support.",null,null],[8,"Hash","bitflags::__core::hash","A hashable type.",null,null],[10,"hash","","Feeds this value into the state given, updating the hasher as necessary.",242,null],[11,"hash_slice","","Feeds a slice of this type into the state provided.",242,null],[8,"Hasher","","A trait which represents the ability to hash an arbitrary stream of bytes.",null,null],[10,"finish","","Completes a round of hashing, producing the output hash generated.",243,{"inputs":[{"name":"hasher"}],"output":{"name":"u64"}}],[10,"write","","Writes some data into this `Hasher`",243,null],[11,"write_u8","","Write a single `u8` into this hasher",243,null],[11,"write_u16","","Write a single `u16` into this hasher.",243,null],[11,"write_u32","","Write a single `u32` into this hasher.",243,null],[11,"write_u64","","Write a single `u64` into this hasher.",243,null],[11,"write_usize","","Write a single `usize` into this hasher.",243,null],[11,"write_i8","","Write a single `i8` into this hasher.",243,null],[11,"write_i16","","Write a single `i16` into this hasher.",243,null],[11,"write_i32","","Write a single `i32` into this hasher.",243,null],[11,"write_i64","","Write a single `i64` into this hasher.",243,null],[11,"write_isize","","Write a single `isize` into this hasher.",243,null],[8,"BuildHasher","","A `BuildHasher` is typically used as a factory for instances of `Hasher`\nwhich a `HashMap` can then use to hash keys independently.",null,null],[16,"Hasher","","Type of the hasher that will be created.",244,null],[10,"build_hasher","","Creates a new hasher.",244,null],[11,"default","core::hash","",245,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"clone","","",245,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"build_hasher","","",245,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"fmt","","",245,{"inputs":[{"name":"buildhasherdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"BuildHasherDefault","bitflags::__core::hash","A structure which implements `BuildHasher` for all `Hasher` types which also\nimplement `Default`.",null,null],[11,"default","core::hash::sip","",246,{"inputs":[],"output":{"name":"siphasher"}}],[11,"write","","",246,null],[11,"finish","","",246,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",246,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",246,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"fmt","","",246,{"inputs":[{"name":"siphasher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",246,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[3,"SipHasher","bitflags::__core::hash","An implementation of SipHash 2-4.",null,null],[0,"default","bitflags::__core","The `Default` trait for types which may have meaningful default values.",null,null],[8,"Default","bitflags::__core::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the &quot;default value&quot; for a type.",20,{"inputs":[],"output":{"name":"self"}}],[0,"isize","bitflags::__core","The pointer-sized signed integer type.",null,null],[17,"MIN","bitflags::__core::isize","",null,null],[17,"MAX","","",null,null],[0,"u8","bitflags::__core","The 8-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u8","",null,null],[17,"MAX","","",null,null],[0,"boxed","bitflags::__core","A pointer type for heap allocation.",null,null],[17,"HEAP","bitflags::__core::boxed","A value that represents the heap. This is the default place that the `box`\nkeyword allocates into when no place is supplied.",null,null],[11,"make_place","alloc::boxed","",247,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"clone","","",247,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[3,"ExchangeHeapSingleton","bitflags::__core::boxed","This the singleton type used solely for `boxed::HEAP`.",null,null],[3,"Box","","A pointer type for heap allocation.",null,null],[11,"drop","alloc::boxed","",248,null],[11,"finalize","","",248,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",248,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"pointer","","",248,null],[3,"IntermediateBox","bitflags::__core::boxed","`IntermediateBox` represents uninitialized backing storage for `Box`.",null,null],[8,"FnBox","","`FnBox` is a version of the `FnOnce` intended for use with boxed\nclosure objects. The idea is that where one would normally store a\n`Box&lt;FnOnce()&gt;` in a data structure, you should use\n`Box&lt;FnBox()&gt;`. The two traits behave essentially the same, except\nthat a `FnBox` closure can only be called if it is boxed. (Note\nthat `FnBox` may be deprecated in the future if `Box&lt;FnOnce()&gt;`\nclosures become directly usable.)",null,null],[16,"Output","","",249,null],[10,"call_box","","",249,null],[0,"ops","bitflags::__core","Overloadable operators.",null,null],[8,"Drop","bitflags::__core::ops","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a &#39;destructor&#39;.",null,null],[10,"drop","","A method called when the value goes out of scope.",13,null],[8,"Add","","The `Add` trait is used to specify the functionality of `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator",250,null],[10,"add","","The method for the `+` operator",250,null],[8,"Sub","","The `Sub` trait is used to specify the functionality of `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",251,null],[10,"sub","","The method for the `-` operator",251,null],[8,"Mul","","The `Mul` trait is used to specify the functionality of `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator",252,null],[10,"mul","","The method for the `*` operator",252,null],[8,"Div","","The `Div` trait is used to specify the functionality of `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator",253,null],[10,"div","","The method for the `/` operator",253,null],[8,"Rem","","The `Rem` trait is used to specify the functionality of `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator",254,null],[10,"rem","","The method for the `%` operator",254,null],[8,"Neg","","The `Neg` trait is used to specify the functionality of unary `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",255,null],[10,"neg","","The method for the unary `-` operator",255,null],[8,"Not","","The `Not` trait is used to specify the functionality of unary `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator",256,null],[10,"not","","The method for the unary `!` operator",256,null],[8,"BitAnd","","The `BitAnd` trait is used to specify the functionality of `&amp;`.",null,null],[16,"Output","","The resulting type after applying the `&amp;` operator",257,null],[10,"bitand","","The method for the `&amp;` operator",257,null],[8,"BitOr","","The `BitOr` trait is used to specify the functionality of `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator",258,null],[10,"bitor","","The method for the `|` operator",258,null],[8,"BitXor","","The `BitXor` trait is used to specify the functionality of `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator",259,null],[10,"bitxor","","The method for the `^` operator",259,null],[8,"Shl","","The `Shl` trait is used to specify the functionality of `&lt;&lt;`.",null,null],[16,"Output","","The resulting type after applying the `&lt;&lt;` operator",260,null],[10,"shl","","The method for the `&lt;&lt;` operator",260,null],[8,"Shr","","The `Shr` trait is used to specify the functionality of `&gt;&gt;`.",null,null],[16,"Output","","The resulting type after applying the `&gt;&gt;` operator",261,null],[10,"shr","","The method for the `&gt;&gt;` operator",261,null],[8,"AddAssign","","The `AddAssign` trait is used to specify the functionality of `+=`.",null,null],[10,"add_assign","","The method for the `+=` operator",262,null],[8,"SubAssign","","The `SubAssign` trait is used to specify the functionality of `-=`.",null,null],[10,"sub_assign","","The method for the `-=` operator",263,null],[8,"MulAssign","","The `MulAssign` trait is used to specify the functionality of `*=`.",null,null],[10,"mul_assign","","The method for the `*=` operator",264,null],[8,"DivAssign","","The `DivAssign` trait is used to specify the functionality of `/=`.",null,null],[10,"div_assign","","The method for the `/=` operator",265,null],[8,"RemAssign","","The `RemAssign` trait is used to specify the functionality of `%=`.",null,null],[10,"rem_assign","","The method for the `%=` operator",266,null],[8,"BitAndAssign","","The `BitAndAssign` trait is used to specify the functionality of `&amp;=`.",null,null],[10,"bitand_assign","","The method for the `&amp;` operator",267,null],[8,"BitOrAssign","","The `BitOrAssign` trait is used to specify the functionality of `|=`.",null,null],[10,"bitor_assign","","The method for the `|=` operator",268,null],[8,"BitXorAssign","","The `BitXorAssign` trait is used to specify the functionality of `^=`.",null,null],[10,"bitxor_assign","","The method for the `^=` operator",269,null],[8,"ShlAssign","","The `ShlAssign` trait is used to specify the functionality of `&lt;&lt;=`.",null,null],[10,"shl_assign","","The method for the `&lt;&lt;=` operator",270,null],[8,"ShrAssign","","The `ShrAssign` trait is used to specify the functionality of `&gt;&gt;=`.",null,null],[10,"shr_assign","","The method for the `&gt;&gt;=` operator",271,null],[8,"Index","","The `Index` trait is used to specify the functionality of indexing operations\nlike `arr[idx]` when used in an immutable context.",null,null],[16,"Output","","The returned type after indexing",272,null],[10,"index","","The method for the indexing (`Foo[Bar]`) operation",272,null],[8,"IndexMut","","The `IndexMut` trait is used to specify the functionality of indexing\noperations like `arr[idx]`, when used in a mutable context.",null,null],[10,"index_mut","","The method for the indexing (`Foo[Bar]`) operation",273,null],[11,"fmt","core::ops","",274,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",274,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"eq","","",274,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[3,"RangeFull","bitflags::__core::ops","An unbounded range. Use `..` (two dots) for its shorthand.",null,null],[11,"step_by","core::ops","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",275,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","","",275,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",275,null],[11,"contains","","# Examples",275,{"inputs":[{"name":"range"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"fmt","","",275,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",275,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"eq","","",275,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",275,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"next_back","","",275,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[3,"Range","bitflags::__core::ops","A (half-open) range which is bounded at both ends: { x | start &lt;= x &lt; end }.\nUse `start..end` (two dots) for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",275,null],[12,"end","","The upper bound of the range (exclusive).",275,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",276,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"contains","","# Examples",276,{"inputs":[{"name":"rangefrom"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"fmt","","",276,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",276,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"eq","","",276,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",276,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"next","","",276,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[3,"RangeFrom","bitflags::__core::ops","A range which is only bounded below: { x | start &lt;= x }.\nUse `start..` for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",276,null],[11,"contains","core::ops","# Examples",277,{"inputs":[{"name":"rangeto"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"fmt","","",277,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",277,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"eq","","",277,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",277,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[3,"RangeTo","bitflags::__core::ops","A range which is only bounded above: { x | x &lt; end }.\nUse `..end` (two dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (exclusive).",277,null],[11,"step_by","core::ops","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",278,{"inputs":[{"name":"rangeinclusive"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"contains","","# Examples",278,{"inputs":[{"name":"rangeinclusive"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"from","","",278,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"fmt","","",278,{"inputs":[{"name":"rangeinclusive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",278,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"eq","","",278,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",278,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"next_back","","",278,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",278,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",278,null],[4,"RangeInclusive","bitflags::__core::ops","An inclusive range which is bounded at both ends: { x | start &lt;= x &lt;= end }.\nUse `start...end` (three dots) for its shorthand.",null,null],[13,"Empty","","Empty range (iteration has finished)",278,null],[12,"at","bitflags::__core::ops::RangeInclusive","",278,null],[13,"NonEmpty","bitflags::__core::ops","Non-empty range (iteration will yield value(s))",278,null],[12,"start","bitflags::__core::ops::RangeInclusive","",278,null],[12,"end","","",278,null],[11,"contains","core::ops","# Examples",279,{"inputs":[{"name":"rangetoinclusive"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"fmt","","",279,{"inputs":[{"name":"rangetoinclusive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",279,{"inputs":[{"name":"rangetoinclusive"}],"output":{"name":"rangetoinclusive"}}],[11,"eq","","",279,{"inputs":[{"name":"rangetoinclusive"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",279,{"inputs":[{"name":"rangetoinclusive"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[3,"RangeToInclusive","bitflags::__core::ops","An inclusive range which is only bounded above: { x | x &lt;= end }.\nUse `...end` (three dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (inclusive)",279,null],[8,"Deref","","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",280,null],[10,"deref","","The method called to dereference a value",280,null],[8,"DerefMut","","The `DerefMut` trait is used to specify the functionality of dereferencing\nmutably like `*v = 1;`",null,null],[10,"deref_mut","","The method called to mutably dereference a value",281,null],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",12,null],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",21,null],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",1,null],[10,"call_once","","This is called when the call operator is used.",1,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one,\nwhere unsizing can be performed on the pointee.",null,null],[8,"Place","","Both `in (PLACE) EXPR` and `box EXPR` desugar into expressions\nthat allocate an intermediate &quot;place&quot; that holds uninitialized\nstate.  The desugaring evaluates EXPR, and writes the result at\nthe address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written.\nNote that the data at this address is generally uninitialized,\nand thus one should use `ptr::write` for initializing it.",282,null],[8,"Placer","","Interface to implementations of  `in (PLACE) EXPR`.",null,null],[16,"Place","","`Place` is the intermedate agent guarding the\nuninitialized state for `Data`.",283,null],[10,"make_place","","Creates a fresh place from `self`.",283,null],[8,"InPlace","","Specialization of `Place` trait supporting `in (PLACE) EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `in (PLACE) EXPR`",284,null],[10,"finalize","","Converts self into the final value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nthe returned instance of `Owner` and forgetting self.",284,null],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",285,null],[16,"Place","","The place that will negotiate the storage of the data.",285,null],[10,"finalize","","Converts filled place into final owning value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nreturned instance of `Self` and forgetting `filled`.",285,null],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",286,{"inputs":[],"output":{"name":"self"}}],[0,"convert","bitflags::__core","Traits for conversions between types.",null,null],[8,"AsRef","bitflags::__core::convert","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",23,{"inputs":[{"name":"asref"}],"output":{"name":"t"}}],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",4,{"inputs":[{"name":"asmut"}],"output":{"name":"t"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",19,{"inputs":[{"name":"into"}],"output":{"name":"t"}}],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",14,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"result","bitflags::__core","Error handling with the `Result` type.",null,null],[4,"Result","bitflags::__core::result","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",6,null],[13,"Err","","Contains the error value",6,null],[11,"clone","core::result","",287,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next_back","","",287,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",287,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",287,null],[11,"fmt","","",287,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Iter","bitflags::__core::result","An iterator over a reference to the `Ok` variant of a `Result`.",null,null],[11,"next_back","core::result","",288,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",288,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",288,null],[11,"fmt","","",288,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"IterMut","bitflags::__core::result","An iterator over a mutable reference to the `Ok` variant of a `Result`.",null,null],[11,"next_back","core::result","",289,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",289,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",289,null],[11,"fmt","","",289,{"inputs":[{"name":"intoiter"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"IntoIter","bitflags::__core::result","An iterator over the value in a `Ok` variant of a `Result`.",null,null],[14,"bitflags!","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[[8,"Error"],[8,"FnOnce"],[8,"IntoIterator"],[3,"Box"],[8,"AsMut"],[4,"Option"],[4,"Result"],[8,"Extend"],[8,"Ord"],[3,"String"],[8,"SliceConcatExt"],[8,"PartialEq"],[8,"Fn"],[8,"Drop"],[8,"From"],[8,"Iterator"],[8,"Clone"],[8,"ToOwned"],[8,"DoubleEndedIterator"],[8,"Into"],[8,"Default"],[8,"FnMut"],[8,"PartialOrd"],[8,"AsRef"],[8,"ToString"],[8,"ExactSizeIterator"],[3,"Vec"],[8,"AsciiExt"],[3,"EscapeDefault"],[4,"FpCategory"],[3,"ParseIntError"],[8,"One"],[3,"Wrapping"],[8,"Zero"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[4,"LocalKeyState"],[3,"ScopedKey"],[3,"KeyInner"],[3,"Key"],[3,"LocalKey"],[3,"Key"],[4,"Entry"],[3,"VecDeque"],[3,"BinaryHeap"],[4,"Bound"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"LinkedList"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"FrontPlace"],[3,"BackPlace"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"SymmetricDifference"],[3,"IntoIter"],[3,"Iter"],[3,"Union"],[3,"Difference"],[3,"Intersection"],[3,"Range"],[3,"OccupiedEntry"],[3,"IterMut"],[3,"VacantEntry"],[3,"IntoIter"],[3,"Keys"],[3,"Iter"],[3,"Range"],[3,"Values"],[3,"ValuesMut"],[3,"RangeMut"],[4,"Entry"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[4,"VarError"],[8,"Seek"],[8,"BufRead"],[8,"Write"],[8,"Read"],[4,"SeekFrom"],[4,"CharsError"],[4,"ErrorKind"],[4,"Shutdown"],[4,"IpAddr"],[8,"ToSocketAddrs"],[4,"Ipv6MulticastScope"],[4,"SocketAddr"],[3,"stat"],[8,"MetadataExt"],[8,"AsRawFd"],[8,"FromRawFd"],[8,"IntoRawFd"],[8,"OsStringExt"],[8,"OsStrExt"],[8,"PermissionsExt"],[8,"OpenOptionsExt"],[8,"MetadataExt"],[8,"FileTypeExt"],[8,"DirEntryExt"],[8,"DirBuilderExt"],[8,"CommandExt"],[8,"ExitStatusExt"],[8,"JoinHandleExt"],[3,"AssertUnwindSafe"],[3,"AssertRecoverSafe"],[4,"Prefix"],[4,"Component"],[3,"Child"],[3,"Output"],[3,"SendError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[4,"TryLockError"],[3,"Arc"],[3,"Weak"],[8,"Rng"],[8,"UpperExp"],[8,"LowerExp"],[8,"Display"],[8,"Pointer"],[8,"Write"],[8,"Debug"],[3,"Formatter"],[3,"DebugMap"],[3,"Error"],[3,"DebugSet"],[3,"DebugTuple"],[3,"DebugStruct"],[3,"Arguments"],[8,"UpperHex"],[8,"Binary"],[8,"LowerHex"],[3,"DebugList"],[8,"Octal"],[8,"Any"],[3,"TypeId"],[3,"Cell"],[3,"RefCell"],[4,"BorrowState"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[8,"Repr"],[3,"EncodeUtf16"],[3,"CharIndices"],[3,"RSplitN"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RMatches"],[3,"RMatchIndices"],[8,"FromStr"],[3,"Bytes"],[3,"LinesAny"],[3,"Lines"],[3,"Utf8Error"],[3,"ParseBoolError"],[3,"RSplitTerminator"],[3,"CharRange"],[3,"Matches"],[3,"SplitN"],[3,"MatchIndices"],[3,"Split"],[3,"Chars"],[3,"SplitWhitespace"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"PhantomData"],[3,"Rc"],[3,"Weak"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[4,"Ordering"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"EscapeUnicode"],[8,"FromIterator"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[8,"Step"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[4,"Cow"],[8,"Borrow"],[8,"BorrowMut"],[3,"IntoIter"],[3,"Drain"],[3,"Unique"],[3,"Shared"],[3,"ChunksMut"],[3,"IterMut"],[3,"SplitN"],[3,"SplitMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"RSplitN"],[3,"Chunks"],[3,"SplitNMut"],[3,"Iter"],[3,"Split"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[3,"BuildHasherDefault"],[3,"SipHasher"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[8,"FnBox"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"AddAssign"],[8,"SubAssign"],[8,"MulAssign"],[8,"DivAssign"],[8,"RemAssign"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Index"],[8,"IndexMut"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[8,"Deref"],[8,"DerefMut"],[8,"Place"],[8,"Placer"],[8,"InPlace"],[8,"Boxed"],[8,"BoxPlace"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["ws2_32"] = {"doc":"","items":[],"paths":[]};
searchIndex["bytes"] = {"doc":"","items":[[3,"ByteBuf","bytes","A `Buf` backed by a contiguous region of memory.",null,null],[3,"MutByteBuf","","",null,null],[3,"RingBuf","","Buf backed by a continous chunk of memory. Maintains a read cursor and a\nwrite cursor. When reads and writes reach the end of the allocated buffer,\nwraps around to the start.",null,null],[3,"ROByteBuf","","Same as `ByteBuf` but cannot be flipped to a `MutByteBuf`.",null,null],[3,"SliceBuf","","",null,null],[3,"MutSliceBuf","","",null,null],[3,"Take","","",null,null],[3,"Bytes","","A specialized `ByteStr` box.",null,null],[3,"Rope","","An immutable sequence of bytes formed by concatenation of other `ByteStr`\nvalues, without copying the data in the pieces. The concatenation is\nrepresented as a tree whose leaf nodes are each a `Bytes` value.",null,null],[3,"RopeBuf","","",null,null],[3,"SeqByteStr","","",null,null],[3,"SmallByteStr","","",null,null],[3,"SmallByteStrBuf","","",null,null],[4,"BufError","","",null,null],[13,"Underflow","","",0,null],[13,"Overflow","","",0,null],[0,"alloc","","",null,null],[3,"Heap","bytes::alloc","",null,null],[3,"MemRef","","",null,null],[3,"Mem","","Memory allocated by an Allocator must be prefixed with Mem",null,null],[5,"heap","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"memref"}}],[11,"allocate","","",1,{"inputs":[{"name":"heap"},{"name":"usize"}],"output":{"name":"memref"}}],[11,"deallocate","","",1,null],[11,"allocate","","",1,{"inputs":[{"name":"heap"},{"name":"usize"}],"output":{"name":"memref"}}],[11,"deallocate","","",1,null],[8,"Allocator","","Allocates memory to be used by Bufs or Bytes. Allows allocating memory\nusing alternate stratgies than the default Rust heap allocator. Also does\nnot require that allocations are continuous in memory.",null,null],[10,"allocate","","Allocate memory. May or may not be contiguous.",2,{"inputs":[{"name":"allocator"},{"name":"usize"}],"output":{"name":"memref"}}],[10,"deallocate","","Deallocate a chunk of memory",2,null],[11,"new","","",3,null],[11,"none","","",3,{"inputs":[],"output":{"name":"memref"}}],[11,"is_none","","",3,{"inputs":[{"name":"memref"}],"output":{"name":"bool"}}],[11,"ptr","","",3,null],[11,"bytes","","",3,null],[11,"bytes_mut","","",3,null],[11,"clone","","",3,{"inputs":[{"name":"memref"}],"output":{"name":"memref"}}],[11,"drop","","",3,{"inputs":[{"name":"memref"}],"output":null}],[11,"new","","",4,null],[0,"buf","bytes","",null,null],[3,"ByteBuf","bytes::buf","A `Buf` backed by a contiguous region of memory.",null,null],[3,"MutByteBuf","","",null,null],[3,"ROByteBuf","","Same as `ByteBuf` but cannot be flipped to a `MutByteBuf`.",null,null],[3,"RingBuf","","Buf backed by a continous chunk of memory. Maintains a read cursor and a\nwrite cursor. When reads and writes reach the end of the allocated buffer,\nwraps around to the start.",null,null],[3,"SliceBuf","","",null,null],[3,"MutSliceBuf","","",null,null],[3,"Take","","",null,null],[11,"from_slice","bytes","Create a new `ByteBuf` by copying the contents of the given slice.",5,null],[11,"mut_with_capacity","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"mutbytebuf"}}],[11,"none","","",5,{"inputs":[],"output":{"name":"bytebuf"}}],[11,"from_mem_ref","","",5,{"inputs":[{"name":"memref"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bytebuf"}}],[11,"capacity","","",5,{"inputs":[{"name":"bytebuf"}],"output":{"name":"usize"}}],[11,"flip","","",5,{"inputs":[{"name":"bytebuf"}],"output":{"name":"mutbytebuf"}}],[11,"resume","","Flips the buffer back to mutable, resetting the write position\nto the byte after the previous write.",5,{"inputs":[{"name":"bytebuf"}],"output":{"name":"mutbytebuf"}}],[11,"read_slice","","",5,null],[11,"to_seq_byte_str","","",5,{"inputs":[{"name":"bytebuf"}],"output":{"name":"seqbytestr"}}],[11,"to_bytes","","",5,{"inputs":[{"name":"bytebuf"}],"output":{"name":"bytes"}}],[11,"mark","","Marks the current read location.",5,{"inputs":[{"name":"bytebuf"}],"output":null}],[11,"reset","","Resets the read position to the previously marked position.",5,{"inputs":[{"name":"bytebuf"}],"output":null}],[11,"remaining","","",5,{"inputs":[{"name":"bytebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",5,null],[11,"advance","","",5,{"inputs":[{"name":"bytebuf"},{"name":"usize"}],"output":null}],[11,"read_slice","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"bytebuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_mem_ref","","",6,{"inputs":[{"name":"memref"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"robytebuf"}}],[11,"to_seq_byte_str","","",6,{"inputs":[{"name":"robytebuf"}],"output":{"name":"seqbytestr"}}],[11,"to_bytes","","",6,{"inputs":[{"name":"robytebuf"}],"output":{"name":"bytes"}}],[11,"mark","","Marks the current read location.",6,{"inputs":[{"name":"robytebuf"}],"output":null}],[11,"reset","","Resets the read position to the previously marked position.",6,{"inputs":[{"name":"robytebuf"}],"output":null}],[11,"remaining","","",6,{"inputs":[{"name":"robytebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",6,null],[11,"advance","","",6,{"inputs":[{"name":"robytebuf"},{"name":"usize"}],"output":null}],[11,"read_slice","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"robytebuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"capacity","","",7,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"usize"}}],[11,"flip","","",7,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"bytebuf"}}],[11,"clear","","",7,{"inputs":[{"name":"mutbytebuf"}],"output":null}],[11,"write_slice","","",7,null],[11,"bytes","","",7,null],[11,"remaining","","",7,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"usize"}}],[11,"advance","","",7,{"inputs":[{"name":"mutbytebuf"},{"name":"usize"}],"output":null}],[11,"mut_bytes","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"mutbytebuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Allocates a new `RingBuf` with the specified capacity.",8,{"inputs":[{"name":"usize"}],"output":{"name":"ringbuf"}}],[11,"is_full","","Returns `true` if the buf cannot accept any further writes.",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns `true` if the buf cannot accept any further reads.",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"bool"}}],[11,"capacity","","Returns the number of bytes that the buf can hold.",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"usize"}}],[11,"mark","","Marks the current read location.",8,{"inputs":[{"name":"ringbuf"}],"output":null}],[11,"reset","","Resets the read position to the previously marked position.",8,{"inputs":[{"name":"ringbuf"}],"output":null}],[11,"clear","","Resets all internal state to the initial state.",8,{"inputs":[{"name":"ringbuf"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"ringbuf"}}],[11,"fmt","","",8,{"inputs":[{"name":"ringbuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"remaining","","",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"usize"}}],[11,"bytes","","",8,null],[11,"advance","","",8,{"inputs":[{"name":"ringbuf"},{"name":"usize"}],"output":null}],[11,"remaining","","",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"usize"}}],[11,"advance","","",8,{"inputs":[{"name":"ringbuf"},{"name":"usize"}],"output":null}],[11,"mut_bytes","","",8,null],[11,"read","","",8,null],[11,"write","","",8,null],[11,"flush","","",8,{"inputs":[{"name":"ringbuf"}],"output":{"name":"result"}}],[11,"wrap","","",9,null],[11,"remaining","","",9,{"inputs":[{"name":"slicebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",9,null],[11,"advance","","",9,{"inputs":[{"name":"slicebuf"},{"name":"usize"}],"output":null}],[11,"wrap","","",10,null],[11,"remaining","","",10,{"inputs":[{"name":"mutslicebuf"}],"output":{"name":"usize"}}],[11,"advance","","",10,{"inputs":[{"name":"mutslicebuf"},{"name":"usize"}],"output":null}],[11,"mut_bytes","","",10,null],[11,"fmt","","",11,{"inputs":[{"name":"take"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",11,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"take"}}],[11,"into_inner","","",11,{"inputs":[{"name":"take"}],"output":{"name":"t"}}],[11,"get_ref","","",11,{"inputs":[{"name":"take"}],"output":{"name":"t"}}],[11,"get_mut","","",11,{"inputs":[{"name":"take"}],"output":{"name":"t"}}],[11,"limit","","",11,{"inputs":[{"name":"take"}],"output":{"name":"usize"}}],[11,"set_limit","","",11,{"inputs":[{"name":"take"},{"name":"usize"}],"output":null}],[11,"remaining","","",11,{"inputs":[{"name":"take"}],"output":{"name":"usize"}}],[11,"bytes","","",11,null],[11,"advance","","",11,{"inputs":[{"name":"take"},{"name":"usize"}],"output":null}],[11,"read","","",11,null],[11,"remaining","","",11,{"inputs":[{"name":"take"}],"output":{"name":"usize"}}],[11,"mut_bytes","","",11,null],[11,"advance","","",11,{"inputs":[{"name":"take"},{"name":"usize"}],"output":null}],[8,"Buf","bytes::buf","A trait for values that provide sequential read access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be accessed from the Buf",12,{"inputs":[{"name":"buf"}],"output":{"name":"usize"}}],[10,"bytes","","Returns a slice starting at the current Buf position and of length\nbetween 0 and `Buf::remaining()`.",12,null],[10,"advance","","Advance the internal cursor of the Buf",12,{"inputs":[{"name":"buf"},{"name":"usize"}],"output":null}],[11,"has_remaining","","Returns true if there are any more bytes to consume",12,{"inputs":[{"name":"buf"}],"output":{"name":"bool"}}],[11,"read_slice","","Read bytes from the `Buf` into the given slice and advance the cursor by\nthe number of bytes read.\nReturns the number of bytes read.",12,null],[11,"read_byte","","Read a single byte from the `Buf`",12,{"inputs":[{"name":"buf"}],"output":{"name":"option"}}],[8,"BufExt","","An extension trait providing extra functions applicable to all `Buf` values.",null,null],[10,"read","","Read bytes from this Buf into the given sink and advance the cursor by\nthe number of bytes read.",13,{"inputs":[{"name":"bufext"},{"name":"s"}],"output":{"name":"result"}}],[8,"MutBuf","","A trait for values that provide sequential write access to bytes.",null,null],[10,"remaining","","Returns the number of bytes that can be written to the MutBuf",14,{"inputs":[{"name":"mutbuf"}],"output":{"name":"usize"}}],[10,"advance","","Advance the internal cursor of the MutBuf",14,{"inputs":[{"name":"mutbuf"},{"name":"usize"}],"output":null}],[11,"has_remaining","","Returns true iff there is any more space for bytes to be written",14,{"inputs":[{"name":"mutbuf"}],"output":{"name":"bool"}}],[10,"mut_bytes","","Returns a mutable slice starting at the current MutBuf position and of\nlength between 0 and `MutBuf::remaining()`.",14,null],[11,"write_slice","","Write bytes from the given slice into the `MutBuf` and advance the\ncursor by the number of bytes written.\nReturns the number of bytes written.",14,null],[11,"write_byte","","Write a single byte to the `MuBuf`",14,{"inputs":[{"name":"mutbuf"},{"name":"u8"}],"output":{"name":"bool"}}],[8,"MutBufExt","","An extension trait providing extra functions applicable to all `MutBuf` values.",null,null],[10,"write","","Write bytes from the given source into the current `MutBuf` and advance\nthe cursor by the number of bytes written.",15,{"inputs":[{"name":"mutbufext"},{"name":"s"}],"output":{"name":"result"}}],[8,"Sink","","A value that reads bytes from a Buf into itself",null,null],[16,"Error","","",16,null],[10,"sink","","",16,{"inputs":[{"name":"sink"},{"name":"b"}],"output":{"name":"result"}}],[8,"Source","","A value that writes bytes from itself into a `MutBuf`.",null,null],[16,"Error","","",17,null],[10,"fill","","",17,{"inputs":[{"name":"source"},{"name":"b"}],"output":{"name":"result"}}],[11,"remaining","alloc::boxed","",18,{"inputs":[{"name":"box"}],"output":{"name":"usize"}}],[11,"bytes","","",18,null],[11,"advance","","",18,{"inputs":[{"name":"box"},{"name":"usize"}],"output":null}],[11,"read_slice","","",18,null],[11,"fmt","","",18,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"remaining","std::io::cursor","",19,{"inputs":[{"name":"cursor"}],"output":{"name":"usize"}}],[11,"bytes","","",19,null],[11,"advance","","",19,{"inputs":[{"name":"cursor"},{"name":"usize"}],"output":null}],[11,"remaining","collections::vec","",20,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"advance","","",20,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":null}],[11,"mut_bytes","","",20,null],[11,"remaining","std::io::cursor","",19,{"inputs":[{"name":"cursor"}],"output":{"name":"usize"}}],[11,"bytes","","",19,null],[11,"advance","","",19,{"inputs":[{"name":"cursor"},{"name":"usize"}],"output":null}],[11,"read","bytes","",5,null],[11,"read","","",6,null],[11,"read","","",21,null],[11,"read","alloc::boxed","",18,null],[11,"write","bytes","",7,null],[11,"flush","","",7,{"inputs":[{"name":"mutbytebuf"}],"output":{"name":"result"}}],[0,"str","","",null,null],[3,"Bytes","bytes::str","A specialized `ByteStr` box.",null,null],[3,"Rope","","An immutable sequence of bytes formed by concatenation of other `ByteStr`\nvalues, without copying the data in the pieces. The concatenation is\nrepresented as a tree whose leaf nodes are each a `Bytes` value.",null,null],[3,"RopeBuf","","",null,null],[3,"SeqByteStr","","",null,null],[3,"SmallByteStr","","",null,null],[3,"SmallByteStrBuf","","",null,null],[11,"from_slice","bytes","",22,null],[11,"of","","",22,{"inputs":[{"name":"b"}],"output":{"name":"bytes"}}],[11,"empty","","",22,{"inputs":[],"output":{"name":"bytes"}}],[11,"downcast_ref","","If the underlying `ByteStr` is of type `B`, returns a reference to it\notherwise None.",22,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"try_unwrap","","If the underlying `ByteStr` is of type `B`, returns the unwraped value,\notherwise, returns the original `Bytes` as `Err`.",22,{"inputs":[{"name":"bytes"}],"output":{"name":"result"}}],[11,"buf","","",22,{"inputs":[{"name":"bytes"}],"output":{"name":"box"}}],[11,"concat","","",22,{"inputs":[{"name":"bytes"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",22,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"slice","","",22,{"inputs":[{"name":"bytes"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"split_at","","",22,null],[11,"to_bytes","","",22,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"index","","",22,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"fmt","","",22,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"drop","","",22,{"inputs":[{"name":"bytes"}],"output":null}],[11,"from_slice","","",23,null],[11,"of","","Returns a Rope consisting of the supplied Bytes as a single segment.",23,{"inputs":[{"name":"b"}],"output":{"name":"rope"}}],[11,"len","","",23,{"inputs":[{"name":"rope"}],"output":{"name":"usize"}}],[11,"is_empty","","",23,{"inputs":[{"name":"rope"}],"output":{"name":"bool"}}],[11,"buf","","",23,{"inputs":[{"name":"rope"}],"output":{"name":"ropebuf"}}],[11,"concat","","",23,{"inputs":[{"name":"rope"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",23,{"inputs":[{"name":"rope"}],"output":{"name":"usize"}}],[11,"slice","","",23,{"inputs":[{"name":"rope"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"to_bytes","","",23,{"inputs":[{"name":"rope"}],"output":{"name":"bytes"}}],[11,"index","","",23,{"inputs":[{"name":"rope"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"clone","","",23,{"inputs":[{"name":"rope"}],"output":{"name":"rope"}}],[11,"remaining","","",21,{"inputs":[{"name":"ropebuf"}],"output":{"name":"usize"}}],[11,"bytes","","",21,null],[11,"advance","","",21,{"inputs":[{"name":"ropebuf"},{"name":"usize"}],"output":null}],[11,"from_slice","","Create a new `SeqByteStr` from a byte slice.",24,null],[11,"from_mem_ref","","Creates a new `SeqByteStr` from a `MemRef`, an offset, and a length.",24,{"inputs":[{"name":"memref"},{"name":"u32"},{"name":"u32"}],"output":{"name":"seqbytestr"}}],[11,"buf","","",24,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"robytebuf"}}],[11,"concat","","",24,{"inputs":[{"name":"seqbytestr"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",24,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"usize"}}],[11,"slice","","",24,{"inputs":[{"name":"seqbytestr"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"to_bytes","","",24,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"bytes"}}],[11,"index","","",24,{"inputs":[{"name":"seqbytestr"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"clone","","",24,{"inputs":[{"name":"seqbytestr"}],"output":{"name":"seqbytestr"}}],[11,"clone","","",25,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"smallbytestr"}}],[11,"zero","","",25,{"inputs":[],"output":{"name":"smallbytestr"}}],[11,"from_slice","","",25,null],[11,"as_slice","","",25,null],[11,"buf","","",25,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"smallbytestrbuf"}}],[11,"concat","","",25,{"inputs":[{"name":"smallbytestr"},{"name":"b"}],"output":{"name":"bytes"}}],[11,"len","","",25,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"usize"}}],[11,"slice","","",25,{"inputs":[{"name":"smallbytestr"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"to_bytes","","",25,{"inputs":[{"name":"smallbytestr"}],"output":{"name":"bytes"}}],[11,"index","","",25,{"inputs":[{"name":"smallbytestr"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"clone","","",26,{"inputs":[{"name":"smallbytestrbuf"}],"output":{"name":"smallbytestrbuf"}}],[11,"remaining","","",26,{"inputs":[{"name":"smallbytestrbuf"}],"output":{"name":"usize"}}],[11,"bytes","","",26,null],[11,"advance","","",26,{"inputs":[{"name":"smallbytestrbuf"},{"name":"usize"}],"output":null}],[8,"ByteStr","bytes::str","An immutable sequence of bytes. Operations will not mutate the original\nvalue. Since only immutable access is permitted, operations do not require\ncopying (though, sometimes copying will happen as an optimization).",null,null],[16,"Buf","","",27,null],[10,"buf","","Returns a read-only `Buf` for accessing the byte contents of the\n`ByteStr`.",27,{"inputs":[{"name":"bytestr"}],"output":{"name":"buf"}}],[10,"concat","","Returns a new `Bytes` value representing the concatenation of `self`\nwith the given `Bytes`.",27,{"inputs":[{"name":"bytestr"},{"name":"b"}],"output":{"name":"bytes"}}],[10,"len","","Returns the number of bytes in the ByteStr",27,{"inputs":[{"name":"bytestr"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the length of the `ByteStr` is 0",27,{"inputs":[{"name":"bytestr"}],"output":{"name":"bool"}}],[10,"slice","","Returns a new ByteStr value containing the byte range between `begin`\n(inclusive) and `end` (exclusive)",27,{"inputs":[{"name":"bytestr"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"slice_from","","Returns a new ByteStr value containing the byte range starting from\n`begin` (inclusive) to the end of the byte str.",27,{"inputs":[{"name":"bytestr"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"slice_to","","Returns a new ByteStr value containing the byte range from the start up\nto `end` (exclusive).",27,{"inputs":[{"name":"bytestr"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"split_at","","Divides the value into two `Bytes` at the given index.",27,null],[8,"ToBytes","","",null,null],[10,"to_bytes","","Consumes the value and returns a `Bytes` instance containing\nidentical bytes",28,{"inputs":[{"name":"tobytes"}],"output":{"name":"bytes"}}],[11,"eq","bytes","",24,{"inputs":[{"name":"seqbytestr"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"seqbytestr"},{"name":"b"}],"output":{"name":"bool"}}],[11,"eq","","",25,{"inputs":[{"name":"smallbytestr"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"smallbytestr"},{"name":"b"}],"output":{"name":"bool"}}],[11,"eq","","",22,{"inputs":[{"name":"bytes"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"bytes"},{"name":"b"}],"output":{"name":"bool"}}],[11,"eq","","",23,{"inputs":[{"name":"rope"},{"name":"b"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"rope"},{"name":"b"}],"output":{"name":"bool"}}],[0,"traits","","All traits are re-exported here to allow glob imports.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"buferror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"buferror"}],"output":{"name":"buferror"}}]],"paths":[[4,"BufError"],[3,"Heap"],[8,"Allocator"],[3,"MemRef"],[3,"Mem"],[3,"ByteBuf"],[3,"ROByteBuf"],[3,"MutByteBuf"],[3,"RingBuf"],[3,"SliceBuf"],[3,"MutSliceBuf"],[3,"Take"],[8,"Buf"],[8,"BufExt"],[8,"MutBuf"],[8,"MutBufExt"],[8,"Sink"],[8,"Source"],[3,"Box"],[3,"Cursor"],[3,"Vec"],[3,"RopeBuf"],[3,"Bytes"],[3,"Rope"],[3,"SeqByteStr"],[3,"SmallByteStr"],[3,"SmallByteStrBuf"],[8,"ByteStr"],[8,"ToBytes"]]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,{"inputs":[{"name":"log"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"log"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"loglocation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"loglocation"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"maxloglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"setloggererror"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"shutdownloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"shutdownloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"shutdownloggererror"}],"output":{"name":"str"}}],[14,"log!","","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["slab"] = {"doc":"","items":[[3,"Slab","slab","A preallocated chunk of memory for storing objects of the same type.",null,null],[3,"SlabIter","","",null,null],[3,"SlabMutIter","","",null,null],[8,"Index","","Slab can be indexed by any type implementing `Index` trait.",null,null],[10,"from_usize","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"as_usize","","",0,{"inputs":[{"name":"index"}],"output":{"name":"usize"}}],[11,"new","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"slab"}}],[11,"new_starting_at","","",1,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"slab"}}],[11,"count","","",1,{"inputs":[{"name":"slab"}],"output":{"name":"usize"}}],[11,"is_empty","","",1,{"inputs":[{"name":"slab"}],"output":{"name":"bool"}}],[11,"remaining","","",1,{"inputs":[{"name":"slab"}],"output":{"name":"usize"}}],[11,"has_remaining","","",1,{"inputs":[{"name":"slab"}],"output":{"name":"bool"}}],[11,"contains","","",1,{"inputs":[{"name":"slab"},{"name":"i"}],"output":{"name":"bool"}}],[11,"get","","",1,{"inputs":[{"name":"slab"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","",1,{"inputs":[{"name":"slab"},{"name":"i"}],"output":{"name":"option"}}],[11,"insert","","",1,{"inputs":[{"name":"slab"},{"name":"t"}],"output":{"name":"result"}}],[11,"insert_with","","Like `insert` but for objects that require newly allocated\nusize in their constructor.",1,{"inputs":[{"name":"slab"},{"name":"f"}],"output":{"name":"option"}}],[11,"remove","","Releases the given slot",1,{"inputs":[{"name":"slab"},{"name":"i"}],"output":{"name":"option"}}],[11,"replace","","",1,{"inputs":[{"name":"slab"},{"name":"i"},{"name":"t"}],"output":{"name":"option"}}],[11,"replace_with","","Execute a function on the *value* in the slot and put the result of\nthe function back into the slot. If function returns None,\nslot is left empty on exit.",1,{"inputs":[{"name":"slab"},{"name":"i"},{"name":"f"}],"output":{"name":"result"}}],[11,"retain","","Retain only the elements specified by the predicate.",1,{"inputs":[{"name":"slab"},{"name":"f"}],"output":null}],[11,"iter","","",1,{"inputs":[{"name":"slab"}],"output":{"name":"slabiter"}}],[11,"iter_mut","","",1,{"inputs":[{"name":"slab"}],"output":{"name":"slabmutiter"}}],[11,"clear","","Empty the slab, by freeing all entries",1,{"inputs":[{"name":"slab"}],"output":null}],[11,"grow","","Grow the slab, by adding `entries_num`",1,{"inputs":[{"name":"slab"},{"name":"usize"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"slab"},{"name":"i"}],"output":{"name":"t"}}],[11,"index_mut","","",1,{"inputs":[{"name":"slab"},{"name":"i"}],"output":{"name":"t"}}],[11,"fmt","","",1,{"inputs":[{"name":"slab"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"slabiter"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"slabmutiter"}],"output":{"name":"option"}}]],"paths":[[8,"Index"],[3,"Slab"],[3,"SlabIter"],[3,"SlabMutIter"]]};
searchIndex["thread_scoped"] = {"doc":"A stable version of `std::thread::scoped`","items":[[3,"JoinGuard","thread_scoped","A RAII guard for that joins a scoped thread upon drop",null,null],[5,"scoped","","Spawns a new scoped thread",null,{"inputs":[{"name":"f"}],"output":{"name":"joinguard"}}],[8,"ScopedDetach","","Detaches a child thread from its guard",null,null],[10,"detach","","Detaches a child thread from its guard",0,{"inputs":[{"name":"scopeddetach"}],"output":null}],[11,"thread","","Provides the backing `Thread` object",1,{"inputs":[{"name":"joinguard"}],"output":{"name":"thread"}}],[11,"join","","Joins the guarded thread and returns its result",1,{"inputs":[{"name":"joinguard"}],"output":{"name":"t"}}],[11,"detach","","",1,{"inputs":[{"name":"joinguard"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"joinguard"}],"output":null}]],"paths":[[8,"ScopedDetach"],[3,"JoinGuard"]]};
searchIndex["spin"] = {"doc":"Synchronization primitives based on spinning","items":[[3,"Mutex","spin","This type provides MUTual EXclusion based on spinning.",null,null],[3,"MutexGuard","","A guard to which the protected data can be accessed",null,null],[3,"RwLock","","A reader-writer lock",null,null],[3,"RwLockReadGuard","","A guard to which the protected data can be read",null,null],[3,"RwLockWriteGuard","","A guard to which the protected data can be written",null,null],[11,"new","","Creates a new spinlock wrapping the supplied data.",0,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Locks the spinlock and returns a guard.",0,{"inputs":[{"name":"mutex"}],"output":{"name":"mutexguard"}}],[11,"fmt","","",0,{"inputs":[{"name":"mutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"mutex"}}],[11,"deref","","",1,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"drop","","The dropping of the MutexGuard will release the lock it was created from.",1,{"inputs":[{"name":"mutexguard"}],"output":null}],[11,"new","","Creates a new spinlock wrapping the supplied data.",2,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",2,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlockreadguard"}}],[11,"try_read","","Attempt to acquire this lock with shared read access.",2,{"inputs":[{"name":"rwlock"}],"output":{"name":"option"}}],[11,"write","","Lock this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",2,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlockwriteguard"}}],[11,"try_write","","Attempt to lock this rwlock with exclusive write access.",2,{"inputs":[{"name":"rwlock"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"rwlock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"rwlock"}}],[11,"deref","","",3,{"inputs":[{"name":"rwlockreadguard"}],"output":{"name":"t"}}],[11,"deref","","",4,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"drop","","",3,{"inputs":[{"name":"rwlockreadguard"}],"output":null}],[11,"drop","","",4,{"inputs":[{"name":"rwlockwriteguard"}],"output":null}]],"paths":[[3,"Mutex"],[3,"MutexGuard"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if!","cfg_if","",null,null]],"paths":[]};
initSearch(searchIndex);
